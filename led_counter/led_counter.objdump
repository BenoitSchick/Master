
led_counter.elf:     file format elf32-littlenios2
led_counter.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x01000244

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01000020 paddr 0x01000020 align 2**12
         filesz 0x0000592c memsz 0x0000592c flags r-x
    LOAD off    0x0000694c vaddr 0x0100594c paddr 0x010073b8 align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x00008e24 vaddr 0x01008e24 paddr 0x01008e24 align 2**12
         filesz 0x00000000 memsz 0x00000158 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  01000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000056bc  01000244  01000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000004c  01005900  01005900  00006900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  0100594c  010073b8  0000694c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000158  01008e24  01008e24  00008e24  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM_controller 00000000  01008f7c  01008f7c  000083b8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000083b8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a30  00000000  00000000  000083e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000165bd  00000000  00000000  00008e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000060b3  00000000  00000000  0001f3cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006a28  00000000  00000000  00025480  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000015c0  00000000  00000000  0002bea8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002756  00000000  00000000  0002d468  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004a4c  00000000  00000000  0002fbbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0003460c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000680  00000000  00000000  00034640  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00037282  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00037285  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00037288  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00037289  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0003728a  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0003728e  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00037292  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00037296  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0003729f  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000372a8  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000009  00000000  00000000  000372b1  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000040  00000000  00000000  000372ba  2**0
                  CONTENTS, READONLY
 29 .jdi          00004d7a  00000000  00000000  000372fa  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00049fef  00000000  00000000  0003c074  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
01000020 l    d  .exceptions	00000000 .exceptions
01000244 l    d  .text	00000000 .text
01005900 l    d  .rodata	00000000 .rodata
0100594c l    d  .rwdata	00000000 .rwdata
01008e24 l    d  .bss	00000000 .bss
01008f7c l    d  .SDRAM_controller	00000000 .SDRAM_controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../led_controller_bsp//obj/HAL/src/crt0.o
0100028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 counter.c
01008e24 l     O .bss	00000004 counter
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
010004f4 l     F .text	00000008 __fp_unlock
01000508 l     F .text	0000019c __sinit.part.1
010006a4 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0100594c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
01003150 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0100325c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
01003288 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
01003614 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
010036f4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
010037e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
010039b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
010073ac l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
01003c00 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
01003d34 l     F .text	00000034 alt_dev_reg
01006320 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
01004028 l     F .text	0000020c altera_avalon_jtag_uart_irq
01004234 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0100486c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
01004ad4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
01004d44 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
01004e84 l     F .text	0000003c alt_get_errno
01004ec0 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
01008e48 g     O .bss	00000004 alt_instruction_exception_handler
01002f48 g     F .text	00000054 _isatty_r
010038f0 g     F .text	0000007c alt_main
01000388 g     F .text	000000c0 _puts_r
01008e7c g     O .bss	00000100 alt_irq
01002c70 g     F .text	00000060 _lseek_r
010073b8 g       *ABS*	00000000 __flash_rwdata_start
01008f7c g       *ABS*	00000000 __alt_heap_start
01002224 g     F .text	0000005c __sseek
01000844 g     F .text	00000010 __sinit
010006ac g     F .text	00000068 __sfmoreglue
01003990 g     F .text	00000024 __malloc_unlock
01001910 g     F .text	0000015c memmove
0100082c g     F .text	00000018 _cleanup
0100527c g     F .text	00000024 altera_nios2_gen2_irq_init
01000000 g     F .entry	0000001c __reset
01000020 g       *ABS*	00000000 __flash_exceptions_start
01002eec g     F .text	0000005c _fstat_r
01008e34 g     O .bss	00000004 errno
010021a0 g     F .text	00000008 __seofread
01008e40 g     O .bss	00000004 alt_argv
0100f380 g       *ABS*	00000000 _gp
010061a0 g     O .rwdata	00000180 alt_fd_list
010052a0 g     F .text	00000090 alt_find_dev
010017c8 g     F .text	00000148 memcpy
010004fc g     F .text	0000000c _cleanup_r
01004e08 g     F .text	0000007c alt_io_redirect
01005900 g       *ABS*	00000000 __DTOR_END__
01000448 g     F .text	00000014 puts
01004ca8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0100442c g     F .text	0000021c altera_avalon_jtag_uart_read
01003094 g     F .text	00000064 .hidden __udivsi3
01003650 g     F .text	000000a4 isatty
010054dc g     F .text	00000090 alt_icache_flush
01008e30 g     O .bss	00000004 __malloc_top_pad
01000894 g     F .text	000004bc __sfvwrite_r
010020f8 g     F .text	00000054 _sbrk_r
01002e8c g     F .text	00000060 _read_r
010073a0 g     O .rwdata	00000004 alt_max_fd
01002490 g     F .text	000000f0 _fclose_r
0100280c g     F .text	00000030 fflush
01008e2c g     O .bss	00000004 __malloc_max_sbrked_mem
0100381c g     F .text	000000d4 lseek
01007380 g     O .rwdata	00000004 _global_impure_ptr
01001b94 g     F .text	00000564 _realloc_r
01008f7c g       *ABS*	00000000 __bss_end
01003524 g     F .text	000000f0 alt_iic_isr_register
01005174 g     F .text	00000108 alt_tick
01000864 g     F .text	00000018 __fp_lock_all
010034d8 g     F .text	0000004c alt_ic_irq_enabled
010050d8 g     F .text	0000009c alt_alarm_stop
01008e38 g     O .bss	00000004 alt_irq_active
010000fc g     F .exceptions	000000d4 alt_irq_handler
01006178 g     O .rwdata	00000028 alt_dev_null
01004a8c g     F .text	00000048 alt_dcache_flush_all
010073b8 g       *ABS*	00000000 __ram_rwdata_end
01007398 g     O .rwdata	00000008 alt_dev_list
01003c3c g     F .text	000000f8 write
0100594c g       *ABS*	00000000 __ram_rodata_end
010032c4 g     F .text	000000b0 fstat
010030f8 g     F .text	00000058 .hidden __umodsi3
01008f7c g       *ABS*	00000000 end
01003f68 g     F .text	000000c0 altera_avalon_jtag_uart_init
010001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
01005900 g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
010048e4 g     F .text	0000007c alt_avalon_timer_sc_init
01004648 g     F .text	00000224 altera_avalon_jtag_uart_write
01000854 g     F .text	00000004 __sfp_lock_acquire
010016e4 g     F .text	000000e4 memchr
01002960 g     F .text	00000310 _free_r
0100574c g     F .text	00000180 __call_exitprocs
01007388 g     O .rwdata	00000004 __malloc_sbrk_base
01000244 g     F .text	0000004c _start
01008e4c g     O .bss	00000004 _alt_tick_rate
01008e50 g     O .bss	00000004 _alt_nticks
010039f0 g     F .text	000000fc read
01003da0 g     F .text	00000064 alt_sys_init
01005634 g     F .text	00000118 __register_exitproc
010042d4 g     F .text	00000068 altera_avalon_jtag_uart_close
0100594c g       *ABS*	00000000 __ram_rwdata_start
01005900 g       *ABS*	00000000 __ram_rodata_start
01008e54 g     O .bss	00000028 __malloc_current_mallinfo
01003e04 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
01005438 g     F .text	000000a4 alt_get_fd
0100243c g     F .text	00000054 _close_r
010055b8 g     F .text	0000007c memcmp
01003ec4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
01008f7c g       *ABS*	00000000 __alt_stack_base
01003f14 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
010022e8 g     F .text	00000154 __swsetup_r
01000714 g     F .text	00000118 __sfp
01005d70 g     O .rwdata	00000408 __malloc_av_
01000860 g     F .text	00000004 __sinit_lock_release
0100214c g     F .text	00000054 __sread
01005330 g     F .text	00000108 alt_find_file
01004b10 g     F .text	000000a4 alt_dev_llist_insert
0100396c g     F .text	00000024 __malloc_lock
01003b50 g     F .text	000000b0 sbrk
010027b0 g     F .text	0000005c _fflush_r
01008e24 g       *ABS*	00000000 __bss_start
01001a6c g     F .text	00000128 memset
010002e8 g     F .text	000000a0 main
01008e44 g     O .bss	00000004 alt_envp
01008e28 g     O .bss	00000004 __malloc_max_total_mem
01003e64 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
01002280 g     F .text	00000008 __sclose
02000000 g       *ABS*	00000000 __alt_heap_limit
01002580 g     F .text	00000014 fclose
01000ed8 g     F .text	0000080c _malloc_r
010073a4 g     O .rwdata	00000004 alt_errno
01000d50 g     F .text	000000c4 _fwalk
01002f9c g     F .text	00000084 .hidden __divsi3
0100283c g     F .text	00000124 _malloc_trim_r
01005900 g       *ABS*	00000000 __CTOR_END__
01005900 g       *ABS*	00000000 __flash_rodata_start
01005900 g       *ABS*	00000000 __DTOR_LIST__
01000000 g       *ABS*	00000000 __alt_mem_SDRAM_controller
01003d68 g     F .text	00000038 alt_irq_init
01003aec g     F .text	00000064 alt_release_fd
0100556c g     F .text	00000014 atexit
01002288 g     F .text	00000060 _write_r
01007384 g     O .rwdata	00000004 _impure_ptr
01008e3c g     O .bss	00000004 alt_argc
01000290 g     F .text	00000058 timer_interrupt
01002594 g     F .text	0000021c __sflush_r
01004c14 g     F .text	00000060 _do_dtors
01000020 g       .exceptions	00000000 alt_irq_entry
0100087c g     F .text	00000018 __fp_unlock_all
01007390 g     O .rwdata	00000008 alt_fs_list
01000020 g       *ABS*	00000000 __ram_exceptions_start
01003374 g     F .text	00000050 alt_ic_isr_register
010073b8 g       *ABS*	00000000 _edata
01008f7c g       *ABS*	00000000 _end
01000244 g       *ABS*	00000000 __ram_exceptions_end
0100433c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0100344c g     F .text	0000008c alt_ic_irq_disable
010021a8 g     F .text	0000007c __swrite
0100738c g     O .rwdata	00000004 __malloc_trim_threshold
01005580 g     F .text	00000038 exit
01000e14 g     F .text	000000c4 _fwalk_reent
01003020 g     F .text	00000074 .hidden __modsi3
02000000 g       *ABS*	00000000 __alt_data_end
01000020 g     F .exceptions	00000000 alt_exception
01000858 g     F .text	00000004 __sfp_lock_release
010058cc g     F .text	00000034 _exit
01004960 g     F .text	0000012c alt_alarm_start
01002cd0 g     F .text	000001bc __smakebuf_r
0100045c g     F .text	00000098 strlen
01004f84 g     F .text	00000154 open
01004c74 g     F .text	00000034 alt_icache_flush_all
010073a8 g     O .rwdata	00000004 alt_priority_mask
010033c4 g     F .text	00000088 alt_ic_irq_enable
010073b0 g     O .rwdata	00000008 alt_alarm_list
01004bb4 g     F .text	00000060 _do_ctors
0100318c g     F .text	000000d0 close
0100375c g     F .text	00000084 alt_load
0100085c g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

01000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 1000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 100000c:	00bffd16 	blt	zero,r2,1000004 <__alt_data_end+0xff000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000010:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000014:	08409114 	ori	at,at,580
    jmp r1
 1000018:	0800683a 	jmp	at
 100001c:	00000000 	call	0 <__alt_mem_SDRAM_controller-0x1000000>

Disassembly of section .exceptions:

01000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 1000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 1000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 1000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 1000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 1000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100007c:	10000326 	beq	r2,zero,100008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1000080:	20000226 	beq	r4,zero,100008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1000084:	10000fc0 	call	10000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1000088:	00000706 	br	10000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 100008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 1000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 1000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 1000098:	10001d00 	call	10001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 100009c:	1000021e 	bne	r2,zero,10000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 10000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 10000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 10000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 10000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 10000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 10000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10000f8:	ef80083a 	eret

010000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10000fc:	defff904 	addi	sp,sp,-28
 1000100:	dfc00615 	stw	ra,24(sp)
 1000104:	df000515 	stw	fp,20(sp)
 1000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 100010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000110:	0005313a 	rdctl	r2,ipending
 1000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 1000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 100011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 1000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1000124:	00800044 	movi	r2,1
 1000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 100012c:	e0fffb17 	ldw	r3,-20(fp)
 1000130:	e0bffc17 	ldw	r2,-16(fp)
 1000134:	1884703a 	and	r2,r3,r2
 1000138:	10001426 	beq	r2,zero,100018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 100013c:	00804074 	movhi	r2,257
 1000140:	10a39f04 	addi	r2,r2,-29060
 1000144:	e0fffd17 	ldw	r3,-12(fp)
 1000148:	180690fa 	slli	r3,r3,3
 100014c:	10c5883a 	add	r2,r2,r3
 1000150:	10c00017 	ldw	r3,0(r2)
 1000154:	00804074 	movhi	r2,257
 1000158:	10a39f04 	addi	r2,r2,-29060
 100015c:	e13ffd17 	ldw	r4,-12(fp)
 1000160:	200890fa 	slli	r4,r4,3
 1000164:	1105883a 	add	r2,r2,r4
 1000168:	10800104 	addi	r2,r2,4
 100016c:	10800017 	ldw	r2,0(r2)
 1000170:	1009883a 	mov	r4,r2
 1000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 1000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100017c:	0005313a 	rdctl	r2,ipending
 1000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 1000184:	e0bfff17 	ldw	r2,-4(fp)
 1000188:	00000706 	br	10001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 100018c:	e0bffc17 	ldw	r2,-16(fp)
 1000190:	1085883a 	add	r2,r2,r2
 1000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 1000198:	e0bffd17 	ldw	r2,-12(fp)
 100019c:	10800044 	addi	r2,r2,1
 10001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 10001a4:	003fe106 	br	100012c <__alt_data_end+0xff00012c>

    active = alt_irq_pending ();
 10001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 10001ac:	e0bffb17 	ldw	r2,-20(fp)
 10001b0:	103fdb1e 	bne	r2,zero,1000120 <__alt_data_end+0xff000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 10001b4:	0001883a 	nop
}
 10001b8:	0001883a 	nop
 10001bc:	e037883a 	mov	sp,fp
 10001c0:	dfc00117 	ldw	ra,4(sp)
 10001c4:	df000017 	ldw	fp,0(sp)
 10001c8:	dec00204 	addi	sp,sp,8
 10001cc:	f800283a 	ret

010001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 10001d0:	defffb04 	addi	sp,sp,-20
 10001d4:	dfc00415 	stw	ra,16(sp)
 10001d8:	df000315 	stw	fp,12(sp)
 10001dc:	df000304 	addi	fp,sp,12
 10001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 10001e4:	000531fa 	rdctl	r2,exception
 10001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 10001ec:	e0bffd17 	ldw	r2,-12(fp)
 10001f0:	10801f0c 	andi	r2,r2,124
 10001f4:	1004d0ba 	srli	r2,r2,2
 10001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 10001fc:	0005333a 	rdctl	r2,badaddr
 1000200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1000204:	d0a6b217 	ldw	r2,-25912(gp)
 1000208:	10000726 	beq	r2,zero,1000228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 100020c:	d0a6b217 	ldw	r2,-25912(gp)
 1000210:	e0fffd17 	ldw	r3,-12(fp)
 1000214:	e1bffe17 	ldw	r6,-8(fp)
 1000218:	e17fff17 	ldw	r5,-4(fp)
 100021c:	1809883a 	mov	r4,r3
 1000220:	103ee83a 	callr	r2
 1000224:	00000206 	br	1000230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 1000228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 100022c:	0005883a 	mov	r2,zero
}
 1000230:	e037883a 	mov	sp,fp
 1000234:	dfc00117 	ldw	ra,4(sp)
 1000238:	df000017 	ldw	fp,0(sp)
 100023c:	dec00204 	addi	sp,sp,8
 1000240:	f800283a 	ret

Disassembly of section .text:

01000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 1000244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 1000248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 100024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 1000250:	00bffd16 	blt	zero,r2,1000248 <__alt_data_end+0xff000248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 1000254:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
 1000258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 100025c:	06804034 	movhi	gp,256
    ori gp, gp, %lo(_gp)
 1000260:	d6bce014 	ori	gp,gp,62336
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 1000264:	00804034 	movhi	r2,256
    ori r2, r2, %lo(__bss_start)
 1000268:	10a38914 	ori	r2,r2,36388

    movhi r3, %hi(__bss_end)
 100026c:	00c04034 	movhi	r3,256
    ori r3, r3, %lo(__bss_end)
 1000270:	18e3df14 	ori	r3,r3,36732

    beq r2, r3, 1f
 1000274:	10c00326 	beq	r2,r3,1000284 <_start+0x40>

0:
    stw zero, (r2)
 1000278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 100027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 1000280:	10fffd36 	bltu	r2,r3,1000278 <__alt_data_end+0xff000278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 1000284:	100375c0 	call	100375c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 1000288:	10038f00 	call	10038f0 <alt_main>

0100028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 100028c:	003fff06 	br	100028c <__alt_data_end+0xff00028c>

01000290 <timer_interrupt>:


static uint32_t counter;

void timer_interrupt(void *context, alt_u32 id)
{
 1000290:	defffd04 	addi	sp,sp,-12
 1000294:	df000215 	stw	fp,8(sp)
 1000298:	df000204 	addi	fp,sp,8
 100029c:	e13ffe15 	stw	r4,-8(fp)
 10002a0:	e17fff15 	stw	r5,-4(fp)
	counter++;
 10002a4:	d0a6a917 	ldw	r2,-25948(gp)
 10002a8:	10800044 	addi	r2,r2,1
 10002ac:	d0a6a915 	stw	r2,-25948(gp)

	// write counter value on the parallel port
	IOWR_32DIRECT(PARALLELPORT_0_BASE,2*4,counter); // -->regport
 10002b0:	d0a6a917 	ldw	r2,-25948(gp)
 10002b4:	1007883a 	mov	r3,r2
 10002b8:	00808034 	movhi	r2,512
 10002bc:	10840a04 	addi	r2,r2,4136
 10002c0:	10c00035 	stwio	r3,0(r2)

	//clear pending interrupt
	IOWR_16DIRECT(TIMER_0_BASE, ALTERA_AVALON_TIMER_STATUS_REG*4, 0x00);
 10002c4:	0007883a 	mov	r3,zero
 10002c8:	00808034 	movhi	r2,512
 10002cc:	10840004 	addi	r2,r2,4096
 10002d0:	10c0002d 	sthio	r3,0(r2)
}
 10002d4:	0001883a 	nop
 10002d8:	e037883a 	mov	sp,fp
 10002dc:	df000017 	ldw	fp,0(sp)
 10002e0:	dec00104 	addi	sp,sp,4
 10002e4:	f800283a 	ret

010002e8 <main>:


int main()
{
 10002e8:	defffd04 	addi	sp,sp,-12
 10002ec:	dfc00215 	stw	ra,8(sp)
 10002f0:	df000115 	stw	fp,4(sp)
 10002f4:	df000104 	addi	fp,sp,4
	//uint32_t dir, port;
	counter = 0;
 10002f8:	d026a915 	stw	zero,-25948(gp)

	printf("Lets start counting \n");
 10002fc:	01004034 	movhi	r4,256
 1000300:	21164004 	addi	r4,r4,22784
 1000304:	10004480 	call	1000448 <puts>


	// Configurer les 32 bits du port en sortie
	IOWR_32DIRECT(PARALLELPORT_0_BASE, 0x0, 0xFFFFFFFF);  // RegDir
 1000308:	00ffffc4 	movi	r3,-1
 100030c:	00808034 	movhi	r2,512
 1000310:	10840804 	addi	r2,r2,4128
 1000314:	10c00035 	stwio	r3,0(r2)

	//stop timer
	IOWR_16DIRECT(TIMER_0_BASE, ALTERA_AVALON_TIMER_CONTROL_REG*4, 0x04);
 1000318:	00c00104 	movi	r3,4
 100031c:	00808034 	movhi	r2,512
 1000320:	10840104 	addi	r2,r2,4100
 1000324:	10c0002d 	sthio	r3,0(r2)

	//clear pending interrupt
	IOWR_16DIRECT(TIMER_0_BASE, ALTERA_AVALON_TIMER_STATUS_REG*4, 0x00);
 1000328:	0007883a 	mov	r3,zero
 100032c:	00808034 	movhi	r2,512
 1000330:	10840004 	addi	r2,r2,4096
 1000334:	10c0002d 	sthio	r3,0(r2)


	//start timer (bit0 = interrupt enable, bit1 = continous count, bit2 = start)
	IOWR_16DIRECT(TIMER_0_BASE, ALTERA_AVALON_TIMER_CONTROL_REG*4, 0x07);
 1000338:	00c001c4 	movi	r3,7
 100033c:	00808034 	movhi	r2,512
 1000340:	10840104 	addi	r2,r2,4100
 1000344:	10c0002d 	sthio	r3,0(r2)


	//Register ISR function
	//alt_irq_register(TIMER_0_IRQ, NULL, timer_interrupt);
	if (alt_ic_isr_register(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_0_IRQ, (alt_isr_func)timer_interrupt, NULL, NULL) != 0)
 1000348:	d8000015 	stw	zero,0(sp)
 100034c:	000f883a 	mov	r7,zero
 1000350:	01804034 	movhi	r6,256
 1000354:	3180a404 	addi	r6,r6,656
 1000358:	01400044 	movi	r5,1
 100035c:	0009883a 	mov	r4,zero
 1000360:	10033740 	call	1003374 <alt_ic_isr_register>
 1000364:	10000226 	beq	r2,zero,1000370 <main+0x88>
	{
	        return -1;
 1000368:	00bfffc4 	movi	r2,-1
 100036c:	00000106 	br	1000374 <main+0x8c>

	while(1)
	{
		//port = IORD_32DIRECT(PARALLELPORT_0_BASE, 2);
		//printf("Port register = 0x%08X\n", port);
	}
 1000370:	003fff06 	br	1000370 <__alt_data_end+0xff000370>
}
 1000374:	e037883a 	mov	sp,fp
 1000378:	dfc00117 	ldw	ra,4(sp)
 100037c:	df000017 	ldw	fp,0(sp)
 1000380:	dec00204 	addi	sp,sp,8
 1000384:	f800283a 	ret

01000388 <_puts_r>:
 1000388:	defff604 	addi	sp,sp,-40
 100038c:	dc000715 	stw	r16,28(sp)
 1000390:	2021883a 	mov	r16,r4
 1000394:	2809883a 	mov	r4,r5
 1000398:	dc400815 	stw	r17,32(sp)
 100039c:	dfc00915 	stw	ra,36(sp)
 10003a0:	2823883a 	mov	r17,r5
 10003a4:	100045c0 	call	100045c <strlen>
 10003a8:	10c00044 	addi	r3,r2,1
 10003ac:	d8800115 	stw	r2,4(sp)
 10003b0:	00804034 	movhi	r2,256
 10003b4:	10964604 	addi	r2,r2,22808
 10003b8:	d8800215 	stw	r2,8(sp)
 10003bc:	00800044 	movi	r2,1
 10003c0:	d8800315 	stw	r2,12(sp)
 10003c4:	00800084 	movi	r2,2
 10003c8:	dc400015 	stw	r17,0(sp)
 10003cc:	d8c00615 	stw	r3,24(sp)
 10003d0:	dec00415 	stw	sp,16(sp)
 10003d4:	d8800515 	stw	r2,20(sp)
 10003d8:	80000226 	beq	r16,zero,10003e4 <_puts_r+0x5c>
 10003dc:	80800e17 	ldw	r2,56(r16)
 10003e0:	10001426 	beq	r2,zero,1000434 <_puts_r+0xac>
 10003e4:	81400217 	ldw	r5,8(r16)
 10003e8:	2880030b 	ldhu	r2,12(r5)
 10003ec:	10c8000c 	andi	r3,r2,8192
 10003f0:	1800061e 	bne	r3,zero,100040c <_puts_r+0x84>
 10003f4:	29001917 	ldw	r4,100(r5)
 10003f8:	00f7ffc4 	movi	r3,-8193
 10003fc:	10880014 	ori	r2,r2,8192
 1000400:	20c6703a 	and	r3,r4,r3
 1000404:	2880030d 	sth	r2,12(r5)
 1000408:	28c01915 	stw	r3,100(r5)
 100040c:	d9800404 	addi	r6,sp,16
 1000410:	8009883a 	mov	r4,r16
 1000414:	10008940 	call	1000894 <__sfvwrite_r>
 1000418:	1000091e 	bne	r2,zero,1000440 <_puts_r+0xb8>
 100041c:	00800284 	movi	r2,10
 1000420:	dfc00917 	ldw	ra,36(sp)
 1000424:	dc400817 	ldw	r17,32(sp)
 1000428:	dc000717 	ldw	r16,28(sp)
 100042c:	dec00a04 	addi	sp,sp,40
 1000430:	f800283a 	ret
 1000434:	8009883a 	mov	r4,r16
 1000438:	10008440 	call	1000844 <__sinit>
 100043c:	003fe906 	br	10003e4 <__alt_data_end+0xff0003e4>
 1000440:	00bfffc4 	movi	r2,-1
 1000444:	003ff606 	br	1000420 <__alt_data_end+0xff000420>

01000448 <puts>:
 1000448:	00804034 	movhi	r2,256
 100044c:	109ce104 	addi	r2,r2,29572
 1000450:	200b883a 	mov	r5,r4
 1000454:	11000017 	ldw	r4,0(r2)
 1000458:	10003881 	jmpi	1000388 <_puts_r>

0100045c <strlen>:
 100045c:	208000cc 	andi	r2,r4,3
 1000460:	10002026 	beq	r2,zero,10004e4 <strlen+0x88>
 1000464:	20800007 	ldb	r2,0(r4)
 1000468:	10002026 	beq	r2,zero,10004ec <strlen+0x90>
 100046c:	2005883a 	mov	r2,r4
 1000470:	00000206 	br	100047c <strlen+0x20>
 1000474:	10c00007 	ldb	r3,0(r2)
 1000478:	18001826 	beq	r3,zero,10004dc <strlen+0x80>
 100047c:	10800044 	addi	r2,r2,1
 1000480:	10c000cc 	andi	r3,r2,3
 1000484:	183ffb1e 	bne	r3,zero,1000474 <__alt_data_end+0xff000474>
 1000488:	10c00017 	ldw	r3,0(r2)
 100048c:	01ffbff4 	movhi	r7,65279
 1000490:	39ffbfc4 	addi	r7,r7,-257
 1000494:	00ca303a 	nor	r5,zero,r3
 1000498:	01a02074 	movhi	r6,32897
 100049c:	19c7883a 	add	r3,r3,r7
 10004a0:	31a02004 	addi	r6,r6,-32640
 10004a4:	1946703a 	and	r3,r3,r5
 10004a8:	1986703a 	and	r3,r3,r6
 10004ac:	1800091e 	bne	r3,zero,10004d4 <strlen+0x78>
 10004b0:	10800104 	addi	r2,r2,4
 10004b4:	10c00017 	ldw	r3,0(r2)
 10004b8:	19cb883a 	add	r5,r3,r7
 10004bc:	00c6303a 	nor	r3,zero,r3
 10004c0:	28c6703a 	and	r3,r5,r3
 10004c4:	1986703a 	and	r3,r3,r6
 10004c8:	183ff926 	beq	r3,zero,10004b0 <__alt_data_end+0xff0004b0>
 10004cc:	00000106 	br	10004d4 <strlen+0x78>
 10004d0:	10800044 	addi	r2,r2,1
 10004d4:	10c00007 	ldb	r3,0(r2)
 10004d8:	183ffd1e 	bne	r3,zero,10004d0 <__alt_data_end+0xff0004d0>
 10004dc:	1105c83a 	sub	r2,r2,r4
 10004e0:	f800283a 	ret
 10004e4:	2005883a 	mov	r2,r4
 10004e8:	003fe706 	br	1000488 <__alt_data_end+0xff000488>
 10004ec:	0005883a 	mov	r2,zero
 10004f0:	f800283a 	ret

010004f4 <__fp_unlock>:
 10004f4:	0005883a 	mov	r2,zero
 10004f8:	f800283a 	ret

010004fc <_cleanup_r>:
 10004fc:	01404034 	movhi	r5,256
 1000500:	29492404 	addi	r5,r5,9360
 1000504:	1000e141 	jmpi	1000e14 <_fwalk_reent>

01000508 <__sinit.part.1>:
 1000508:	defff704 	addi	sp,sp,-36
 100050c:	00c04034 	movhi	r3,256
 1000510:	dfc00815 	stw	ra,32(sp)
 1000514:	ddc00715 	stw	r23,28(sp)
 1000518:	dd800615 	stw	r22,24(sp)
 100051c:	dd400515 	stw	r21,20(sp)
 1000520:	dd000415 	stw	r20,16(sp)
 1000524:	dcc00315 	stw	r19,12(sp)
 1000528:	dc800215 	stw	r18,8(sp)
 100052c:	dc400115 	stw	r17,4(sp)
 1000530:	dc000015 	stw	r16,0(sp)
 1000534:	18c13f04 	addi	r3,r3,1276
 1000538:	24000117 	ldw	r16,4(r4)
 100053c:	20c00f15 	stw	r3,60(r4)
 1000540:	2080bb04 	addi	r2,r4,748
 1000544:	00c000c4 	movi	r3,3
 1000548:	20c0b915 	stw	r3,740(r4)
 100054c:	2080ba15 	stw	r2,744(r4)
 1000550:	2000b815 	stw	zero,736(r4)
 1000554:	05c00204 	movi	r23,8
 1000558:	00800104 	movi	r2,4
 100055c:	2025883a 	mov	r18,r4
 1000560:	b80d883a 	mov	r6,r23
 1000564:	81001704 	addi	r4,r16,92
 1000568:	000b883a 	mov	r5,zero
 100056c:	80000015 	stw	zero,0(r16)
 1000570:	80000115 	stw	zero,4(r16)
 1000574:	80000215 	stw	zero,8(r16)
 1000578:	8080030d 	sth	r2,12(r16)
 100057c:	80001915 	stw	zero,100(r16)
 1000580:	8000038d 	sth	zero,14(r16)
 1000584:	80000415 	stw	zero,16(r16)
 1000588:	80000515 	stw	zero,20(r16)
 100058c:	80000615 	stw	zero,24(r16)
 1000590:	1001a6c0 	call	1001a6c <memset>
 1000594:	05804034 	movhi	r22,256
 1000598:	94400217 	ldw	r17,8(r18)
 100059c:	05404034 	movhi	r21,256
 10005a0:	05004034 	movhi	r20,256
 10005a4:	04c04034 	movhi	r19,256
 10005a8:	b5885304 	addi	r22,r22,8524
 10005ac:	ad486a04 	addi	r21,r21,8616
 10005b0:	a5088904 	addi	r20,r20,8740
 10005b4:	9cc8a004 	addi	r19,r19,8832
 10005b8:	85800815 	stw	r22,32(r16)
 10005bc:	85400915 	stw	r21,36(r16)
 10005c0:	85000a15 	stw	r20,40(r16)
 10005c4:	84c00b15 	stw	r19,44(r16)
 10005c8:	84000715 	stw	r16,28(r16)
 10005cc:	00800284 	movi	r2,10
 10005d0:	8880030d 	sth	r2,12(r17)
 10005d4:	00800044 	movi	r2,1
 10005d8:	b80d883a 	mov	r6,r23
 10005dc:	89001704 	addi	r4,r17,92
 10005e0:	000b883a 	mov	r5,zero
 10005e4:	88000015 	stw	zero,0(r17)
 10005e8:	88000115 	stw	zero,4(r17)
 10005ec:	88000215 	stw	zero,8(r17)
 10005f0:	88001915 	stw	zero,100(r17)
 10005f4:	8880038d 	sth	r2,14(r17)
 10005f8:	88000415 	stw	zero,16(r17)
 10005fc:	88000515 	stw	zero,20(r17)
 1000600:	88000615 	stw	zero,24(r17)
 1000604:	1001a6c0 	call	1001a6c <memset>
 1000608:	94000317 	ldw	r16,12(r18)
 100060c:	00800484 	movi	r2,18
 1000610:	8c400715 	stw	r17,28(r17)
 1000614:	8d800815 	stw	r22,32(r17)
 1000618:	8d400915 	stw	r21,36(r17)
 100061c:	8d000a15 	stw	r20,40(r17)
 1000620:	8cc00b15 	stw	r19,44(r17)
 1000624:	8080030d 	sth	r2,12(r16)
 1000628:	00800084 	movi	r2,2
 100062c:	80000015 	stw	zero,0(r16)
 1000630:	80000115 	stw	zero,4(r16)
 1000634:	80000215 	stw	zero,8(r16)
 1000638:	80001915 	stw	zero,100(r16)
 100063c:	8080038d 	sth	r2,14(r16)
 1000640:	80000415 	stw	zero,16(r16)
 1000644:	80000515 	stw	zero,20(r16)
 1000648:	80000615 	stw	zero,24(r16)
 100064c:	b80d883a 	mov	r6,r23
 1000650:	000b883a 	mov	r5,zero
 1000654:	81001704 	addi	r4,r16,92
 1000658:	1001a6c0 	call	1001a6c <memset>
 100065c:	00800044 	movi	r2,1
 1000660:	84000715 	stw	r16,28(r16)
 1000664:	85800815 	stw	r22,32(r16)
 1000668:	85400915 	stw	r21,36(r16)
 100066c:	85000a15 	stw	r20,40(r16)
 1000670:	84c00b15 	stw	r19,44(r16)
 1000674:	90800e15 	stw	r2,56(r18)
 1000678:	dfc00817 	ldw	ra,32(sp)
 100067c:	ddc00717 	ldw	r23,28(sp)
 1000680:	dd800617 	ldw	r22,24(sp)
 1000684:	dd400517 	ldw	r21,20(sp)
 1000688:	dd000417 	ldw	r20,16(sp)
 100068c:	dcc00317 	ldw	r19,12(sp)
 1000690:	dc800217 	ldw	r18,8(sp)
 1000694:	dc400117 	ldw	r17,4(sp)
 1000698:	dc000017 	ldw	r16,0(sp)
 100069c:	dec00904 	addi	sp,sp,36
 10006a0:	f800283a 	ret

010006a4 <__fp_lock>:
 10006a4:	0005883a 	mov	r2,zero
 10006a8:	f800283a 	ret

010006ac <__sfmoreglue>:
 10006ac:	defffc04 	addi	sp,sp,-16
 10006b0:	dc400115 	stw	r17,4(sp)
 10006b4:	2c7fffc4 	addi	r17,r5,-1
 10006b8:	8c401a24 	muli	r17,r17,104
 10006bc:	dc800215 	stw	r18,8(sp)
 10006c0:	2825883a 	mov	r18,r5
 10006c4:	89401d04 	addi	r5,r17,116
 10006c8:	dc000015 	stw	r16,0(sp)
 10006cc:	dfc00315 	stw	ra,12(sp)
 10006d0:	1000ed80 	call	1000ed8 <_malloc_r>
 10006d4:	1021883a 	mov	r16,r2
 10006d8:	10000726 	beq	r2,zero,10006f8 <__sfmoreglue+0x4c>
 10006dc:	11000304 	addi	r4,r2,12
 10006e0:	10000015 	stw	zero,0(r2)
 10006e4:	14800115 	stw	r18,4(r2)
 10006e8:	11000215 	stw	r4,8(r2)
 10006ec:	89801a04 	addi	r6,r17,104
 10006f0:	000b883a 	mov	r5,zero
 10006f4:	1001a6c0 	call	1001a6c <memset>
 10006f8:	8005883a 	mov	r2,r16
 10006fc:	dfc00317 	ldw	ra,12(sp)
 1000700:	dc800217 	ldw	r18,8(sp)
 1000704:	dc400117 	ldw	r17,4(sp)
 1000708:	dc000017 	ldw	r16,0(sp)
 100070c:	dec00404 	addi	sp,sp,16
 1000710:	f800283a 	ret

01000714 <__sfp>:
 1000714:	defffb04 	addi	sp,sp,-20
 1000718:	dc000015 	stw	r16,0(sp)
 100071c:	04004034 	movhi	r16,256
 1000720:	841ce004 	addi	r16,r16,29568
 1000724:	dcc00315 	stw	r19,12(sp)
 1000728:	2027883a 	mov	r19,r4
 100072c:	81000017 	ldw	r4,0(r16)
 1000730:	dfc00415 	stw	ra,16(sp)
 1000734:	dc800215 	stw	r18,8(sp)
 1000738:	20800e17 	ldw	r2,56(r4)
 100073c:	dc400115 	stw	r17,4(sp)
 1000740:	1000021e 	bne	r2,zero,100074c <__sfp+0x38>
 1000744:	10005080 	call	1000508 <__sinit.part.1>
 1000748:	81000017 	ldw	r4,0(r16)
 100074c:	2480b804 	addi	r18,r4,736
 1000750:	047fffc4 	movi	r17,-1
 1000754:	91000117 	ldw	r4,4(r18)
 1000758:	94000217 	ldw	r16,8(r18)
 100075c:	213fffc4 	addi	r4,r4,-1
 1000760:	20000a16 	blt	r4,zero,100078c <__sfp+0x78>
 1000764:	8080030f 	ldh	r2,12(r16)
 1000768:	10000c26 	beq	r2,zero,100079c <__sfp+0x88>
 100076c:	80c01d04 	addi	r3,r16,116
 1000770:	00000206 	br	100077c <__sfp+0x68>
 1000774:	18bfe60f 	ldh	r2,-104(r3)
 1000778:	10000826 	beq	r2,zero,100079c <__sfp+0x88>
 100077c:	213fffc4 	addi	r4,r4,-1
 1000780:	1c3ffd04 	addi	r16,r3,-12
 1000784:	18c01a04 	addi	r3,r3,104
 1000788:	247ffa1e 	bne	r4,r17,1000774 <__alt_data_end+0xff000774>
 100078c:	90800017 	ldw	r2,0(r18)
 1000790:	10001d26 	beq	r2,zero,1000808 <__sfp+0xf4>
 1000794:	1025883a 	mov	r18,r2
 1000798:	003fee06 	br	1000754 <__alt_data_end+0xff000754>
 100079c:	00bfffc4 	movi	r2,-1
 10007a0:	8080038d 	sth	r2,14(r16)
 10007a4:	00800044 	movi	r2,1
 10007a8:	8080030d 	sth	r2,12(r16)
 10007ac:	80001915 	stw	zero,100(r16)
 10007b0:	80000015 	stw	zero,0(r16)
 10007b4:	80000215 	stw	zero,8(r16)
 10007b8:	80000115 	stw	zero,4(r16)
 10007bc:	80000415 	stw	zero,16(r16)
 10007c0:	80000515 	stw	zero,20(r16)
 10007c4:	80000615 	stw	zero,24(r16)
 10007c8:	01800204 	movi	r6,8
 10007cc:	000b883a 	mov	r5,zero
 10007d0:	81001704 	addi	r4,r16,92
 10007d4:	1001a6c0 	call	1001a6c <memset>
 10007d8:	8005883a 	mov	r2,r16
 10007dc:	80000c15 	stw	zero,48(r16)
 10007e0:	80000d15 	stw	zero,52(r16)
 10007e4:	80001115 	stw	zero,68(r16)
 10007e8:	80001215 	stw	zero,72(r16)
 10007ec:	dfc00417 	ldw	ra,16(sp)
 10007f0:	dcc00317 	ldw	r19,12(sp)
 10007f4:	dc800217 	ldw	r18,8(sp)
 10007f8:	dc400117 	ldw	r17,4(sp)
 10007fc:	dc000017 	ldw	r16,0(sp)
 1000800:	dec00504 	addi	sp,sp,20
 1000804:	f800283a 	ret
 1000808:	01400104 	movi	r5,4
 100080c:	9809883a 	mov	r4,r19
 1000810:	10006ac0 	call	10006ac <__sfmoreglue>
 1000814:	90800015 	stw	r2,0(r18)
 1000818:	103fde1e 	bne	r2,zero,1000794 <__alt_data_end+0xff000794>
 100081c:	00800304 	movi	r2,12
 1000820:	98800015 	stw	r2,0(r19)
 1000824:	0005883a 	mov	r2,zero
 1000828:	003ff006 	br	10007ec <__alt_data_end+0xff0007ec>

0100082c <_cleanup>:
 100082c:	00804034 	movhi	r2,256
 1000830:	109ce004 	addi	r2,r2,29568
 1000834:	11000017 	ldw	r4,0(r2)
 1000838:	01404034 	movhi	r5,256
 100083c:	29492404 	addi	r5,r5,9360
 1000840:	1000e141 	jmpi	1000e14 <_fwalk_reent>

01000844 <__sinit>:
 1000844:	20800e17 	ldw	r2,56(r4)
 1000848:	10000126 	beq	r2,zero,1000850 <__sinit+0xc>
 100084c:	f800283a 	ret
 1000850:	10005081 	jmpi	1000508 <__sinit.part.1>

01000854 <__sfp_lock_acquire>:
 1000854:	f800283a 	ret

01000858 <__sfp_lock_release>:
 1000858:	f800283a 	ret

0100085c <__sinit_lock_acquire>:
 100085c:	f800283a 	ret

01000860 <__sinit_lock_release>:
 1000860:	f800283a 	ret

01000864 <__fp_lock_all>:
 1000864:	00804034 	movhi	r2,256
 1000868:	109ce104 	addi	r2,r2,29572
 100086c:	11000017 	ldw	r4,0(r2)
 1000870:	01404034 	movhi	r5,256
 1000874:	2941a904 	addi	r5,r5,1700
 1000878:	1000d501 	jmpi	1000d50 <_fwalk>

0100087c <__fp_unlock_all>:
 100087c:	00804034 	movhi	r2,256
 1000880:	109ce104 	addi	r2,r2,29572
 1000884:	11000017 	ldw	r4,0(r2)
 1000888:	01404034 	movhi	r5,256
 100088c:	29413d04 	addi	r5,r5,1268
 1000890:	1000d501 	jmpi	1000d50 <_fwalk>

01000894 <__sfvwrite_r>:
 1000894:	30800217 	ldw	r2,8(r6)
 1000898:	10006726 	beq	r2,zero,1000a38 <__sfvwrite_r+0x1a4>
 100089c:	28c0030b 	ldhu	r3,12(r5)
 10008a0:	defff404 	addi	sp,sp,-48
 10008a4:	dd400715 	stw	r21,28(sp)
 10008a8:	dd000615 	stw	r20,24(sp)
 10008ac:	dc000215 	stw	r16,8(sp)
 10008b0:	dfc00b15 	stw	ra,44(sp)
 10008b4:	df000a15 	stw	fp,40(sp)
 10008b8:	ddc00915 	stw	r23,36(sp)
 10008bc:	dd800815 	stw	r22,32(sp)
 10008c0:	dcc00515 	stw	r19,20(sp)
 10008c4:	dc800415 	stw	r18,16(sp)
 10008c8:	dc400315 	stw	r17,12(sp)
 10008cc:	1880020c 	andi	r2,r3,8
 10008d0:	2821883a 	mov	r16,r5
 10008d4:	202b883a 	mov	r21,r4
 10008d8:	3029883a 	mov	r20,r6
 10008dc:	10002726 	beq	r2,zero,100097c <__sfvwrite_r+0xe8>
 10008e0:	28800417 	ldw	r2,16(r5)
 10008e4:	10002526 	beq	r2,zero,100097c <__sfvwrite_r+0xe8>
 10008e8:	1880008c 	andi	r2,r3,2
 10008ec:	a4400017 	ldw	r17,0(r20)
 10008f0:	10002a26 	beq	r2,zero,100099c <__sfvwrite_r+0x108>
 10008f4:	05a00034 	movhi	r22,32768
 10008f8:	0027883a 	mov	r19,zero
 10008fc:	0025883a 	mov	r18,zero
 1000900:	b5bf0004 	addi	r22,r22,-1024
 1000904:	980d883a 	mov	r6,r19
 1000908:	a809883a 	mov	r4,r21
 100090c:	90004626 	beq	r18,zero,1000a28 <__sfvwrite_r+0x194>
 1000910:	900f883a 	mov	r7,r18
 1000914:	b480022e 	bgeu	r22,r18,1000920 <__sfvwrite_r+0x8c>
 1000918:	01e00034 	movhi	r7,32768
 100091c:	39ff0004 	addi	r7,r7,-1024
 1000920:	80800917 	ldw	r2,36(r16)
 1000924:	81400717 	ldw	r5,28(r16)
 1000928:	103ee83a 	callr	r2
 100092c:	0080570e 	bge	zero,r2,1000a8c <__sfvwrite_r+0x1f8>
 1000930:	a0c00217 	ldw	r3,8(r20)
 1000934:	98a7883a 	add	r19,r19,r2
 1000938:	90a5c83a 	sub	r18,r18,r2
 100093c:	1885c83a 	sub	r2,r3,r2
 1000940:	a0800215 	stw	r2,8(r20)
 1000944:	103fef1e 	bne	r2,zero,1000904 <__alt_data_end+0xff000904>
 1000948:	0005883a 	mov	r2,zero
 100094c:	dfc00b17 	ldw	ra,44(sp)
 1000950:	df000a17 	ldw	fp,40(sp)
 1000954:	ddc00917 	ldw	r23,36(sp)
 1000958:	dd800817 	ldw	r22,32(sp)
 100095c:	dd400717 	ldw	r21,28(sp)
 1000960:	dd000617 	ldw	r20,24(sp)
 1000964:	dcc00517 	ldw	r19,20(sp)
 1000968:	dc800417 	ldw	r18,16(sp)
 100096c:	dc400317 	ldw	r17,12(sp)
 1000970:	dc000217 	ldw	r16,8(sp)
 1000974:	dec00c04 	addi	sp,sp,48
 1000978:	f800283a 	ret
 100097c:	800b883a 	mov	r5,r16
 1000980:	a809883a 	mov	r4,r21
 1000984:	10022e80 	call	10022e8 <__swsetup_r>
 1000988:	1000eb1e 	bne	r2,zero,1000d38 <__sfvwrite_r+0x4a4>
 100098c:	80c0030b 	ldhu	r3,12(r16)
 1000990:	a4400017 	ldw	r17,0(r20)
 1000994:	1880008c 	andi	r2,r3,2
 1000998:	103fd61e 	bne	r2,zero,10008f4 <__alt_data_end+0xff0008f4>
 100099c:	1880004c 	andi	r2,r3,1
 10009a0:	10003f1e 	bne	r2,zero,1000aa0 <__sfvwrite_r+0x20c>
 10009a4:	0039883a 	mov	fp,zero
 10009a8:	0025883a 	mov	r18,zero
 10009ac:	90001a26 	beq	r18,zero,1000a18 <__sfvwrite_r+0x184>
 10009b0:	1880800c 	andi	r2,r3,512
 10009b4:	84c00217 	ldw	r19,8(r16)
 10009b8:	10002126 	beq	r2,zero,1000a40 <__sfvwrite_r+0x1ac>
 10009bc:	982f883a 	mov	r23,r19
 10009c0:	94c09336 	bltu	r18,r19,1000c10 <__sfvwrite_r+0x37c>
 10009c4:	1881200c 	andi	r2,r3,1152
 10009c8:	10009e1e 	bne	r2,zero,1000c44 <__sfvwrite_r+0x3b0>
 10009cc:	81000017 	ldw	r4,0(r16)
 10009d0:	b80d883a 	mov	r6,r23
 10009d4:	e00b883a 	mov	r5,fp
 10009d8:	10019100 	call	1001910 <memmove>
 10009dc:	80c00217 	ldw	r3,8(r16)
 10009e0:	81000017 	ldw	r4,0(r16)
 10009e4:	9005883a 	mov	r2,r18
 10009e8:	1ce7c83a 	sub	r19,r3,r19
 10009ec:	25cf883a 	add	r7,r4,r23
 10009f0:	84c00215 	stw	r19,8(r16)
 10009f4:	81c00015 	stw	r7,0(r16)
 10009f8:	a0c00217 	ldw	r3,8(r20)
 10009fc:	e0b9883a 	add	fp,fp,r2
 1000a00:	90a5c83a 	sub	r18,r18,r2
 1000a04:	18a7c83a 	sub	r19,r3,r2
 1000a08:	a4c00215 	stw	r19,8(r20)
 1000a0c:	983fce26 	beq	r19,zero,1000948 <__alt_data_end+0xff000948>
 1000a10:	80c0030b 	ldhu	r3,12(r16)
 1000a14:	903fe61e 	bne	r18,zero,10009b0 <__alt_data_end+0xff0009b0>
 1000a18:	8f000017 	ldw	fp,0(r17)
 1000a1c:	8c800117 	ldw	r18,4(r17)
 1000a20:	8c400204 	addi	r17,r17,8
 1000a24:	003fe106 	br	10009ac <__alt_data_end+0xff0009ac>
 1000a28:	8cc00017 	ldw	r19,0(r17)
 1000a2c:	8c800117 	ldw	r18,4(r17)
 1000a30:	8c400204 	addi	r17,r17,8
 1000a34:	003fb306 	br	1000904 <__alt_data_end+0xff000904>
 1000a38:	0005883a 	mov	r2,zero
 1000a3c:	f800283a 	ret
 1000a40:	81000017 	ldw	r4,0(r16)
 1000a44:	80800417 	ldw	r2,16(r16)
 1000a48:	11005736 	bltu	r2,r4,1000ba8 <__sfvwrite_r+0x314>
 1000a4c:	85c00517 	ldw	r23,20(r16)
 1000a50:	95c05536 	bltu	r18,r23,1000ba8 <__sfvwrite_r+0x314>
 1000a54:	00a00034 	movhi	r2,32768
 1000a58:	10bfffc4 	addi	r2,r2,-1
 1000a5c:	9009883a 	mov	r4,r18
 1000a60:	1480012e 	bgeu	r2,r18,1000a68 <__sfvwrite_r+0x1d4>
 1000a64:	1009883a 	mov	r4,r2
 1000a68:	b80b883a 	mov	r5,r23
 1000a6c:	1002f9c0 	call	1002f9c <__divsi3>
 1000a70:	15cf383a 	mul	r7,r2,r23
 1000a74:	81400717 	ldw	r5,28(r16)
 1000a78:	80800917 	ldw	r2,36(r16)
 1000a7c:	e00d883a 	mov	r6,fp
 1000a80:	a809883a 	mov	r4,r21
 1000a84:	103ee83a 	callr	r2
 1000a88:	00bfdb16 	blt	zero,r2,10009f8 <__alt_data_end+0xff0009f8>
 1000a8c:	8080030b 	ldhu	r2,12(r16)
 1000a90:	10801014 	ori	r2,r2,64
 1000a94:	8080030d 	sth	r2,12(r16)
 1000a98:	00bfffc4 	movi	r2,-1
 1000a9c:	003fab06 	br	100094c <__alt_data_end+0xff00094c>
 1000aa0:	0027883a 	mov	r19,zero
 1000aa4:	0011883a 	mov	r8,zero
 1000aa8:	0039883a 	mov	fp,zero
 1000aac:	0025883a 	mov	r18,zero
 1000ab0:	90001f26 	beq	r18,zero,1000b30 <__sfvwrite_r+0x29c>
 1000ab4:	40005a26 	beq	r8,zero,1000c20 <__sfvwrite_r+0x38c>
 1000ab8:	982d883a 	mov	r22,r19
 1000abc:	94c0012e 	bgeu	r18,r19,1000ac4 <__sfvwrite_r+0x230>
 1000ac0:	902d883a 	mov	r22,r18
 1000ac4:	81000017 	ldw	r4,0(r16)
 1000ac8:	80800417 	ldw	r2,16(r16)
 1000acc:	b02f883a 	mov	r23,r22
 1000ad0:	81c00517 	ldw	r7,20(r16)
 1000ad4:	1100032e 	bgeu	r2,r4,1000ae4 <__sfvwrite_r+0x250>
 1000ad8:	80c00217 	ldw	r3,8(r16)
 1000adc:	38c7883a 	add	r3,r7,r3
 1000ae0:	1d801816 	blt	r3,r22,1000b44 <__sfvwrite_r+0x2b0>
 1000ae4:	b1c03e16 	blt	r22,r7,1000be0 <__sfvwrite_r+0x34c>
 1000ae8:	80800917 	ldw	r2,36(r16)
 1000aec:	81400717 	ldw	r5,28(r16)
 1000af0:	e00d883a 	mov	r6,fp
 1000af4:	da000115 	stw	r8,4(sp)
 1000af8:	a809883a 	mov	r4,r21
 1000afc:	103ee83a 	callr	r2
 1000b00:	102f883a 	mov	r23,r2
 1000b04:	da000117 	ldw	r8,4(sp)
 1000b08:	00bfe00e 	bge	zero,r2,1000a8c <__alt_data_end+0xff000a8c>
 1000b0c:	9de7c83a 	sub	r19,r19,r23
 1000b10:	98001f26 	beq	r19,zero,1000b90 <__sfvwrite_r+0x2fc>
 1000b14:	a0800217 	ldw	r2,8(r20)
 1000b18:	e5f9883a 	add	fp,fp,r23
 1000b1c:	95e5c83a 	sub	r18,r18,r23
 1000b20:	15efc83a 	sub	r23,r2,r23
 1000b24:	a5c00215 	stw	r23,8(r20)
 1000b28:	b83f8726 	beq	r23,zero,1000948 <__alt_data_end+0xff000948>
 1000b2c:	903fe11e 	bne	r18,zero,1000ab4 <__alt_data_end+0xff000ab4>
 1000b30:	8f000017 	ldw	fp,0(r17)
 1000b34:	8c800117 	ldw	r18,4(r17)
 1000b38:	0011883a 	mov	r8,zero
 1000b3c:	8c400204 	addi	r17,r17,8
 1000b40:	003fdb06 	br	1000ab0 <__alt_data_end+0xff000ab0>
 1000b44:	180d883a 	mov	r6,r3
 1000b48:	e00b883a 	mov	r5,fp
 1000b4c:	da000115 	stw	r8,4(sp)
 1000b50:	d8c00015 	stw	r3,0(sp)
 1000b54:	10019100 	call	1001910 <memmove>
 1000b58:	d8c00017 	ldw	r3,0(sp)
 1000b5c:	80800017 	ldw	r2,0(r16)
 1000b60:	800b883a 	mov	r5,r16
 1000b64:	a809883a 	mov	r4,r21
 1000b68:	10c5883a 	add	r2,r2,r3
 1000b6c:	80800015 	stw	r2,0(r16)
 1000b70:	d8c00015 	stw	r3,0(sp)
 1000b74:	10027b00 	call	10027b0 <_fflush_r>
 1000b78:	d8c00017 	ldw	r3,0(sp)
 1000b7c:	da000117 	ldw	r8,4(sp)
 1000b80:	103fc21e 	bne	r2,zero,1000a8c <__alt_data_end+0xff000a8c>
 1000b84:	182f883a 	mov	r23,r3
 1000b88:	9de7c83a 	sub	r19,r19,r23
 1000b8c:	983fe11e 	bne	r19,zero,1000b14 <__alt_data_end+0xff000b14>
 1000b90:	800b883a 	mov	r5,r16
 1000b94:	a809883a 	mov	r4,r21
 1000b98:	10027b00 	call	10027b0 <_fflush_r>
 1000b9c:	103fbb1e 	bne	r2,zero,1000a8c <__alt_data_end+0xff000a8c>
 1000ba0:	0011883a 	mov	r8,zero
 1000ba4:	003fdb06 	br	1000b14 <__alt_data_end+0xff000b14>
 1000ba8:	94c0012e 	bgeu	r18,r19,1000bb0 <__sfvwrite_r+0x31c>
 1000bac:	9027883a 	mov	r19,r18
 1000bb0:	980d883a 	mov	r6,r19
 1000bb4:	e00b883a 	mov	r5,fp
 1000bb8:	10019100 	call	1001910 <memmove>
 1000bbc:	80800217 	ldw	r2,8(r16)
 1000bc0:	80c00017 	ldw	r3,0(r16)
 1000bc4:	14c5c83a 	sub	r2,r2,r19
 1000bc8:	1cc7883a 	add	r3,r3,r19
 1000bcc:	80800215 	stw	r2,8(r16)
 1000bd0:	80c00015 	stw	r3,0(r16)
 1000bd4:	10004326 	beq	r2,zero,1000ce4 <__sfvwrite_r+0x450>
 1000bd8:	9805883a 	mov	r2,r19
 1000bdc:	003f8606 	br	10009f8 <__alt_data_end+0xff0009f8>
 1000be0:	b00d883a 	mov	r6,r22
 1000be4:	e00b883a 	mov	r5,fp
 1000be8:	da000115 	stw	r8,4(sp)
 1000bec:	10019100 	call	1001910 <memmove>
 1000bf0:	80800217 	ldw	r2,8(r16)
 1000bf4:	80c00017 	ldw	r3,0(r16)
 1000bf8:	da000117 	ldw	r8,4(sp)
 1000bfc:	1585c83a 	sub	r2,r2,r22
 1000c00:	1dad883a 	add	r22,r3,r22
 1000c04:	80800215 	stw	r2,8(r16)
 1000c08:	85800015 	stw	r22,0(r16)
 1000c0c:	003fbf06 	br	1000b0c <__alt_data_end+0xff000b0c>
 1000c10:	81000017 	ldw	r4,0(r16)
 1000c14:	9027883a 	mov	r19,r18
 1000c18:	902f883a 	mov	r23,r18
 1000c1c:	003f6c06 	br	10009d0 <__alt_data_end+0xff0009d0>
 1000c20:	900d883a 	mov	r6,r18
 1000c24:	01400284 	movi	r5,10
 1000c28:	e009883a 	mov	r4,fp
 1000c2c:	10016e40 	call	10016e4 <memchr>
 1000c30:	10003e26 	beq	r2,zero,1000d2c <__sfvwrite_r+0x498>
 1000c34:	10800044 	addi	r2,r2,1
 1000c38:	1727c83a 	sub	r19,r2,fp
 1000c3c:	02000044 	movi	r8,1
 1000c40:	003f9d06 	br	1000ab8 <__alt_data_end+0xff000ab8>
 1000c44:	80800517 	ldw	r2,20(r16)
 1000c48:	81400417 	ldw	r5,16(r16)
 1000c4c:	81c00017 	ldw	r7,0(r16)
 1000c50:	10a7883a 	add	r19,r2,r2
 1000c54:	9885883a 	add	r2,r19,r2
 1000c58:	1026d7fa 	srli	r19,r2,31
 1000c5c:	396dc83a 	sub	r22,r7,r5
 1000c60:	b1000044 	addi	r4,r22,1
 1000c64:	9885883a 	add	r2,r19,r2
 1000c68:	1027d07a 	srai	r19,r2,1
 1000c6c:	2485883a 	add	r2,r4,r18
 1000c70:	980d883a 	mov	r6,r19
 1000c74:	9880022e 	bgeu	r19,r2,1000c80 <__sfvwrite_r+0x3ec>
 1000c78:	1027883a 	mov	r19,r2
 1000c7c:	100d883a 	mov	r6,r2
 1000c80:	18c1000c 	andi	r3,r3,1024
 1000c84:	18001c26 	beq	r3,zero,1000cf8 <__sfvwrite_r+0x464>
 1000c88:	300b883a 	mov	r5,r6
 1000c8c:	a809883a 	mov	r4,r21
 1000c90:	1000ed80 	call	1000ed8 <_malloc_r>
 1000c94:	102f883a 	mov	r23,r2
 1000c98:	10002926 	beq	r2,zero,1000d40 <__sfvwrite_r+0x4ac>
 1000c9c:	81400417 	ldw	r5,16(r16)
 1000ca0:	b00d883a 	mov	r6,r22
 1000ca4:	1009883a 	mov	r4,r2
 1000ca8:	10017c80 	call	10017c8 <memcpy>
 1000cac:	8080030b 	ldhu	r2,12(r16)
 1000cb0:	00fedfc4 	movi	r3,-1153
 1000cb4:	10c4703a 	and	r2,r2,r3
 1000cb8:	10802014 	ori	r2,r2,128
 1000cbc:	8080030d 	sth	r2,12(r16)
 1000cc0:	bd89883a 	add	r4,r23,r22
 1000cc4:	9d8fc83a 	sub	r7,r19,r22
 1000cc8:	85c00415 	stw	r23,16(r16)
 1000ccc:	84c00515 	stw	r19,20(r16)
 1000cd0:	81000015 	stw	r4,0(r16)
 1000cd4:	9027883a 	mov	r19,r18
 1000cd8:	81c00215 	stw	r7,8(r16)
 1000cdc:	902f883a 	mov	r23,r18
 1000ce0:	003f3b06 	br	10009d0 <__alt_data_end+0xff0009d0>
 1000ce4:	800b883a 	mov	r5,r16
 1000ce8:	a809883a 	mov	r4,r21
 1000cec:	10027b00 	call	10027b0 <_fflush_r>
 1000cf0:	103fb926 	beq	r2,zero,1000bd8 <__alt_data_end+0xff000bd8>
 1000cf4:	003f6506 	br	1000a8c <__alt_data_end+0xff000a8c>
 1000cf8:	a809883a 	mov	r4,r21
 1000cfc:	1001b940 	call	1001b94 <_realloc_r>
 1000d00:	102f883a 	mov	r23,r2
 1000d04:	103fee1e 	bne	r2,zero,1000cc0 <__alt_data_end+0xff000cc0>
 1000d08:	81400417 	ldw	r5,16(r16)
 1000d0c:	a809883a 	mov	r4,r21
 1000d10:	10029600 	call	1002960 <_free_r>
 1000d14:	8080030b 	ldhu	r2,12(r16)
 1000d18:	00ffdfc4 	movi	r3,-129
 1000d1c:	1884703a 	and	r2,r3,r2
 1000d20:	00c00304 	movi	r3,12
 1000d24:	a8c00015 	stw	r3,0(r21)
 1000d28:	003f5906 	br	1000a90 <__alt_data_end+0xff000a90>
 1000d2c:	94c00044 	addi	r19,r18,1
 1000d30:	02000044 	movi	r8,1
 1000d34:	003f6006 	br	1000ab8 <__alt_data_end+0xff000ab8>
 1000d38:	00bfffc4 	movi	r2,-1
 1000d3c:	003f0306 	br	100094c <__alt_data_end+0xff00094c>
 1000d40:	00800304 	movi	r2,12
 1000d44:	a8800015 	stw	r2,0(r21)
 1000d48:	8080030b 	ldhu	r2,12(r16)
 1000d4c:	003f5006 	br	1000a90 <__alt_data_end+0xff000a90>

01000d50 <_fwalk>:
 1000d50:	defff704 	addi	sp,sp,-36
 1000d54:	dd000415 	stw	r20,16(sp)
 1000d58:	dfc00815 	stw	ra,32(sp)
 1000d5c:	ddc00715 	stw	r23,28(sp)
 1000d60:	dd800615 	stw	r22,24(sp)
 1000d64:	dd400515 	stw	r21,20(sp)
 1000d68:	dcc00315 	stw	r19,12(sp)
 1000d6c:	dc800215 	stw	r18,8(sp)
 1000d70:	dc400115 	stw	r17,4(sp)
 1000d74:	dc000015 	stw	r16,0(sp)
 1000d78:	2500b804 	addi	r20,r4,736
 1000d7c:	a0002326 	beq	r20,zero,1000e0c <_fwalk+0xbc>
 1000d80:	282b883a 	mov	r21,r5
 1000d84:	002f883a 	mov	r23,zero
 1000d88:	05800044 	movi	r22,1
 1000d8c:	04ffffc4 	movi	r19,-1
 1000d90:	a4400117 	ldw	r17,4(r20)
 1000d94:	a4800217 	ldw	r18,8(r20)
 1000d98:	8c7fffc4 	addi	r17,r17,-1
 1000d9c:	88000d16 	blt	r17,zero,1000dd4 <_fwalk+0x84>
 1000da0:	94000304 	addi	r16,r18,12
 1000da4:	94800384 	addi	r18,r18,14
 1000da8:	8080000b 	ldhu	r2,0(r16)
 1000dac:	8c7fffc4 	addi	r17,r17,-1
 1000db0:	813ffd04 	addi	r4,r16,-12
 1000db4:	b080042e 	bgeu	r22,r2,1000dc8 <_fwalk+0x78>
 1000db8:	9080000f 	ldh	r2,0(r18)
 1000dbc:	14c00226 	beq	r2,r19,1000dc8 <_fwalk+0x78>
 1000dc0:	a83ee83a 	callr	r21
 1000dc4:	b8aeb03a 	or	r23,r23,r2
 1000dc8:	84001a04 	addi	r16,r16,104
 1000dcc:	94801a04 	addi	r18,r18,104
 1000dd0:	8cfff51e 	bne	r17,r19,1000da8 <__alt_data_end+0xff000da8>
 1000dd4:	a5000017 	ldw	r20,0(r20)
 1000dd8:	a03fed1e 	bne	r20,zero,1000d90 <__alt_data_end+0xff000d90>
 1000ddc:	b805883a 	mov	r2,r23
 1000de0:	dfc00817 	ldw	ra,32(sp)
 1000de4:	ddc00717 	ldw	r23,28(sp)
 1000de8:	dd800617 	ldw	r22,24(sp)
 1000dec:	dd400517 	ldw	r21,20(sp)
 1000df0:	dd000417 	ldw	r20,16(sp)
 1000df4:	dcc00317 	ldw	r19,12(sp)
 1000df8:	dc800217 	ldw	r18,8(sp)
 1000dfc:	dc400117 	ldw	r17,4(sp)
 1000e00:	dc000017 	ldw	r16,0(sp)
 1000e04:	dec00904 	addi	sp,sp,36
 1000e08:	f800283a 	ret
 1000e0c:	002f883a 	mov	r23,zero
 1000e10:	003ff206 	br	1000ddc <__alt_data_end+0xff000ddc>

01000e14 <_fwalk_reent>:
 1000e14:	defff704 	addi	sp,sp,-36
 1000e18:	dd000415 	stw	r20,16(sp)
 1000e1c:	dfc00815 	stw	ra,32(sp)
 1000e20:	ddc00715 	stw	r23,28(sp)
 1000e24:	dd800615 	stw	r22,24(sp)
 1000e28:	dd400515 	stw	r21,20(sp)
 1000e2c:	dcc00315 	stw	r19,12(sp)
 1000e30:	dc800215 	stw	r18,8(sp)
 1000e34:	dc400115 	stw	r17,4(sp)
 1000e38:	dc000015 	stw	r16,0(sp)
 1000e3c:	2500b804 	addi	r20,r4,736
 1000e40:	a0002326 	beq	r20,zero,1000ed0 <_fwalk_reent+0xbc>
 1000e44:	282b883a 	mov	r21,r5
 1000e48:	2027883a 	mov	r19,r4
 1000e4c:	002f883a 	mov	r23,zero
 1000e50:	05800044 	movi	r22,1
 1000e54:	04bfffc4 	movi	r18,-1
 1000e58:	a4400117 	ldw	r17,4(r20)
 1000e5c:	a4000217 	ldw	r16,8(r20)
 1000e60:	8c7fffc4 	addi	r17,r17,-1
 1000e64:	88000c16 	blt	r17,zero,1000e98 <_fwalk_reent+0x84>
 1000e68:	84000304 	addi	r16,r16,12
 1000e6c:	8080000b 	ldhu	r2,0(r16)
 1000e70:	8c7fffc4 	addi	r17,r17,-1
 1000e74:	817ffd04 	addi	r5,r16,-12
 1000e78:	b080052e 	bgeu	r22,r2,1000e90 <_fwalk_reent+0x7c>
 1000e7c:	8080008f 	ldh	r2,2(r16)
 1000e80:	9809883a 	mov	r4,r19
 1000e84:	14800226 	beq	r2,r18,1000e90 <_fwalk_reent+0x7c>
 1000e88:	a83ee83a 	callr	r21
 1000e8c:	b8aeb03a 	or	r23,r23,r2
 1000e90:	84001a04 	addi	r16,r16,104
 1000e94:	8cbff51e 	bne	r17,r18,1000e6c <__alt_data_end+0xff000e6c>
 1000e98:	a5000017 	ldw	r20,0(r20)
 1000e9c:	a03fee1e 	bne	r20,zero,1000e58 <__alt_data_end+0xff000e58>
 1000ea0:	b805883a 	mov	r2,r23
 1000ea4:	dfc00817 	ldw	ra,32(sp)
 1000ea8:	ddc00717 	ldw	r23,28(sp)
 1000eac:	dd800617 	ldw	r22,24(sp)
 1000eb0:	dd400517 	ldw	r21,20(sp)
 1000eb4:	dd000417 	ldw	r20,16(sp)
 1000eb8:	dcc00317 	ldw	r19,12(sp)
 1000ebc:	dc800217 	ldw	r18,8(sp)
 1000ec0:	dc400117 	ldw	r17,4(sp)
 1000ec4:	dc000017 	ldw	r16,0(sp)
 1000ec8:	dec00904 	addi	sp,sp,36
 1000ecc:	f800283a 	ret
 1000ed0:	002f883a 	mov	r23,zero
 1000ed4:	003ff206 	br	1000ea0 <__alt_data_end+0xff000ea0>

01000ed8 <_malloc_r>:
 1000ed8:	defff504 	addi	sp,sp,-44
 1000edc:	dc800315 	stw	r18,12(sp)
 1000ee0:	dfc00a15 	stw	ra,40(sp)
 1000ee4:	df000915 	stw	fp,36(sp)
 1000ee8:	ddc00815 	stw	r23,32(sp)
 1000eec:	dd800715 	stw	r22,28(sp)
 1000ef0:	dd400615 	stw	r21,24(sp)
 1000ef4:	dd000515 	stw	r20,20(sp)
 1000ef8:	dcc00415 	stw	r19,16(sp)
 1000efc:	dc400215 	stw	r17,8(sp)
 1000f00:	dc000115 	stw	r16,4(sp)
 1000f04:	288002c4 	addi	r2,r5,11
 1000f08:	00c00584 	movi	r3,22
 1000f0c:	2025883a 	mov	r18,r4
 1000f10:	18807f2e 	bgeu	r3,r2,1001110 <_malloc_r+0x238>
 1000f14:	047ffe04 	movi	r17,-8
 1000f18:	1462703a 	and	r17,r2,r17
 1000f1c:	8800a316 	blt	r17,zero,10011ac <_malloc_r+0x2d4>
 1000f20:	8940a236 	bltu	r17,r5,10011ac <_malloc_r+0x2d4>
 1000f24:	100396c0 	call	100396c <__malloc_lock>
 1000f28:	00807dc4 	movi	r2,503
 1000f2c:	1441e92e 	bgeu	r2,r17,10016d4 <_malloc_r+0x7fc>
 1000f30:	8804d27a 	srli	r2,r17,9
 1000f34:	1000a126 	beq	r2,zero,10011bc <_malloc_r+0x2e4>
 1000f38:	00c00104 	movi	r3,4
 1000f3c:	18811e36 	bltu	r3,r2,10013b8 <_malloc_r+0x4e0>
 1000f40:	8804d1ba 	srli	r2,r17,6
 1000f44:	12000e44 	addi	r8,r2,57
 1000f48:	11c00e04 	addi	r7,r2,56
 1000f4c:	4209883a 	add	r4,r8,r8
 1000f50:	04c04034 	movhi	r19,256
 1000f54:	2109883a 	add	r4,r4,r4
 1000f58:	9cd75c04 	addi	r19,r19,23920
 1000f5c:	2109883a 	add	r4,r4,r4
 1000f60:	9909883a 	add	r4,r19,r4
 1000f64:	24000117 	ldw	r16,4(r4)
 1000f68:	213ffe04 	addi	r4,r4,-8
 1000f6c:	24009726 	beq	r4,r16,10011cc <_malloc_r+0x2f4>
 1000f70:	80800117 	ldw	r2,4(r16)
 1000f74:	01bfff04 	movi	r6,-4
 1000f78:	014003c4 	movi	r5,15
 1000f7c:	1184703a 	and	r2,r2,r6
 1000f80:	1447c83a 	sub	r3,r2,r17
 1000f84:	28c00716 	blt	r5,r3,1000fa4 <_malloc_r+0xcc>
 1000f88:	1800920e 	bge	r3,zero,10011d4 <_malloc_r+0x2fc>
 1000f8c:	84000317 	ldw	r16,12(r16)
 1000f90:	24008e26 	beq	r4,r16,10011cc <_malloc_r+0x2f4>
 1000f94:	80800117 	ldw	r2,4(r16)
 1000f98:	1184703a 	and	r2,r2,r6
 1000f9c:	1447c83a 	sub	r3,r2,r17
 1000fa0:	28fff90e 	bge	r5,r3,1000f88 <__alt_data_end+0xff000f88>
 1000fa4:	3809883a 	mov	r4,r7
 1000fa8:	01804034 	movhi	r6,256
 1000fac:	9c000417 	ldw	r16,16(r19)
 1000fb0:	31975c04 	addi	r6,r6,23920
 1000fb4:	32000204 	addi	r8,r6,8
 1000fb8:	82013426 	beq	r16,r8,100148c <_malloc_r+0x5b4>
 1000fbc:	80c00117 	ldw	r3,4(r16)
 1000fc0:	00bfff04 	movi	r2,-4
 1000fc4:	188e703a 	and	r7,r3,r2
 1000fc8:	3c45c83a 	sub	r2,r7,r17
 1000fcc:	00c003c4 	movi	r3,15
 1000fd0:	18811f16 	blt	r3,r2,1001450 <_malloc_r+0x578>
 1000fd4:	32000515 	stw	r8,20(r6)
 1000fd8:	32000415 	stw	r8,16(r6)
 1000fdc:	10007f0e 	bge	r2,zero,10011dc <_malloc_r+0x304>
 1000fe0:	00807fc4 	movi	r2,511
 1000fe4:	11c0fd36 	bltu	r2,r7,10013dc <_malloc_r+0x504>
 1000fe8:	3806d0fa 	srli	r3,r7,3
 1000fec:	01c00044 	movi	r7,1
 1000ff0:	30800117 	ldw	r2,4(r6)
 1000ff4:	19400044 	addi	r5,r3,1
 1000ff8:	294b883a 	add	r5,r5,r5
 1000ffc:	1807d0ba 	srai	r3,r3,2
 1001000:	294b883a 	add	r5,r5,r5
 1001004:	294b883a 	add	r5,r5,r5
 1001008:	298b883a 	add	r5,r5,r6
 100100c:	38c6983a 	sll	r3,r7,r3
 1001010:	29c00017 	ldw	r7,0(r5)
 1001014:	2a7ffe04 	addi	r9,r5,-8
 1001018:	1886b03a 	or	r3,r3,r2
 100101c:	82400315 	stw	r9,12(r16)
 1001020:	81c00215 	stw	r7,8(r16)
 1001024:	30c00115 	stw	r3,4(r6)
 1001028:	2c000015 	stw	r16,0(r5)
 100102c:	3c000315 	stw	r16,12(r7)
 1001030:	2005d0ba 	srai	r2,r4,2
 1001034:	01400044 	movi	r5,1
 1001038:	288a983a 	sll	r5,r5,r2
 100103c:	19406f36 	bltu	r3,r5,10011fc <_malloc_r+0x324>
 1001040:	28c4703a 	and	r2,r5,r3
 1001044:	10000a1e 	bne	r2,zero,1001070 <_malloc_r+0x198>
 1001048:	00bfff04 	movi	r2,-4
 100104c:	294b883a 	add	r5,r5,r5
 1001050:	2088703a 	and	r4,r4,r2
 1001054:	28c4703a 	and	r2,r5,r3
 1001058:	21000104 	addi	r4,r4,4
 100105c:	1000041e 	bne	r2,zero,1001070 <_malloc_r+0x198>
 1001060:	294b883a 	add	r5,r5,r5
 1001064:	28c4703a 	and	r2,r5,r3
 1001068:	21000104 	addi	r4,r4,4
 100106c:	103ffc26 	beq	r2,zero,1001060 <__alt_data_end+0xff001060>
 1001070:	02bfff04 	movi	r10,-4
 1001074:	024003c4 	movi	r9,15
 1001078:	21800044 	addi	r6,r4,1
 100107c:	318d883a 	add	r6,r6,r6
 1001080:	318d883a 	add	r6,r6,r6
 1001084:	318d883a 	add	r6,r6,r6
 1001088:	998d883a 	add	r6,r19,r6
 100108c:	333ffe04 	addi	r12,r6,-8
 1001090:	2017883a 	mov	r11,r4
 1001094:	31800104 	addi	r6,r6,4
 1001098:	34000017 	ldw	r16,0(r6)
 100109c:	31fffd04 	addi	r7,r6,-12
 10010a0:	81c0041e 	bne	r16,r7,10010b4 <_malloc_r+0x1dc>
 10010a4:	0000fb06 	br	1001494 <_malloc_r+0x5bc>
 10010a8:	1801030e 	bge	r3,zero,10014b8 <_malloc_r+0x5e0>
 10010ac:	84000317 	ldw	r16,12(r16)
 10010b0:	81c0f826 	beq	r16,r7,1001494 <_malloc_r+0x5bc>
 10010b4:	80800117 	ldw	r2,4(r16)
 10010b8:	1284703a 	and	r2,r2,r10
 10010bc:	1447c83a 	sub	r3,r2,r17
 10010c0:	48fff90e 	bge	r9,r3,10010a8 <__alt_data_end+0xff0010a8>
 10010c4:	80800317 	ldw	r2,12(r16)
 10010c8:	81000217 	ldw	r4,8(r16)
 10010cc:	89400054 	ori	r5,r17,1
 10010d0:	81400115 	stw	r5,4(r16)
 10010d4:	20800315 	stw	r2,12(r4)
 10010d8:	11000215 	stw	r4,8(r2)
 10010dc:	8463883a 	add	r17,r16,r17
 10010e0:	9c400515 	stw	r17,20(r19)
 10010e4:	9c400415 	stw	r17,16(r19)
 10010e8:	18800054 	ori	r2,r3,1
 10010ec:	88800115 	stw	r2,4(r17)
 10010f0:	8a000315 	stw	r8,12(r17)
 10010f4:	8a000215 	stw	r8,8(r17)
 10010f8:	88e3883a 	add	r17,r17,r3
 10010fc:	88c00015 	stw	r3,0(r17)
 1001100:	9009883a 	mov	r4,r18
 1001104:	10039900 	call	1003990 <__malloc_unlock>
 1001108:	80800204 	addi	r2,r16,8
 100110c:	00001b06 	br	100117c <_malloc_r+0x2a4>
 1001110:	04400404 	movi	r17,16
 1001114:	89402536 	bltu	r17,r5,10011ac <_malloc_r+0x2d4>
 1001118:	100396c0 	call	100396c <__malloc_lock>
 100111c:	00800184 	movi	r2,6
 1001120:	01000084 	movi	r4,2
 1001124:	04c04034 	movhi	r19,256
 1001128:	1085883a 	add	r2,r2,r2
 100112c:	9cd75c04 	addi	r19,r19,23920
 1001130:	1085883a 	add	r2,r2,r2
 1001134:	9885883a 	add	r2,r19,r2
 1001138:	14000117 	ldw	r16,4(r2)
 100113c:	10fffe04 	addi	r3,r2,-8
 1001140:	80c0d926 	beq	r16,r3,10014a8 <_malloc_r+0x5d0>
 1001144:	80c00117 	ldw	r3,4(r16)
 1001148:	81000317 	ldw	r4,12(r16)
 100114c:	00bfff04 	movi	r2,-4
 1001150:	1884703a 	and	r2,r3,r2
 1001154:	81400217 	ldw	r5,8(r16)
 1001158:	8085883a 	add	r2,r16,r2
 100115c:	10c00117 	ldw	r3,4(r2)
 1001160:	29000315 	stw	r4,12(r5)
 1001164:	21400215 	stw	r5,8(r4)
 1001168:	18c00054 	ori	r3,r3,1
 100116c:	10c00115 	stw	r3,4(r2)
 1001170:	9009883a 	mov	r4,r18
 1001174:	10039900 	call	1003990 <__malloc_unlock>
 1001178:	80800204 	addi	r2,r16,8
 100117c:	dfc00a17 	ldw	ra,40(sp)
 1001180:	df000917 	ldw	fp,36(sp)
 1001184:	ddc00817 	ldw	r23,32(sp)
 1001188:	dd800717 	ldw	r22,28(sp)
 100118c:	dd400617 	ldw	r21,24(sp)
 1001190:	dd000517 	ldw	r20,20(sp)
 1001194:	dcc00417 	ldw	r19,16(sp)
 1001198:	dc800317 	ldw	r18,12(sp)
 100119c:	dc400217 	ldw	r17,8(sp)
 10011a0:	dc000117 	ldw	r16,4(sp)
 10011a4:	dec00b04 	addi	sp,sp,44
 10011a8:	f800283a 	ret
 10011ac:	00800304 	movi	r2,12
 10011b0:	90800015 	stw	r2,0(r18)
 10011b4:	0005883a 	mov	r2,zero
 10011b8:	003ff006 	br	100117c <__alt_data_end+0xff00117c>
 10011bc:	01002004 	movi	r4,128
 10011c0:	02001004 	movi	r8,64
 10011c4:	01c00fc4 	movi	r7,63
 10011c8:	003f6106 	br	1000f50 <__alt_data_end+0xff000f50>
 10011cc:	4009883a 	mov	r4,r8
 10011d0:	003f7506 	br	1000fa8 <__alt_data_end+0xff000fa8>
 10011d4:	81000317 	ldw	r4,12(r16)
 10011d8:	003fde06 	br	1001154 <__alt_data_end+0xff001154>
 10011dc:	81c5883a 	add	r2,r16,r7
 10011e0:	11400117 	ldw	r5,4(r2)
 10011e4:	9009883a 	mov	r4,r18
 10011e8:	29400054 	ori	r5,r5,1
 10011ec:	11400115 	stw	r5,4(r2)
 10011f0:	10039900 	call	1003990 <__malloc_unlock>
 10011f4:	80800204 	addi	r2,r16,8
 10011f8:	003fe006 	br	100117c <__alt_data_end+0xff00117c>
 10011fc:	9c000217 	ldw	r16,8(r19)
 1001200:	00bfff04 	movi	r2,-4
 1001204:	85800117 	ldw	r22,4(r16)
 1001208:	b0ac703a 	and	r22,r22,r2
 100120c:	b4400336 	bltu	r22,r17,100121c <_malloc_r+0x344>
 1001210:	b445c83a 	sub	r2,r22,r17
 1001214:	00c003c4 	movi	r3,15
 1001218:	18805d16 	blt	r3,r2,1001390 <_malloc_r+0x4b8>
 100121c:	05c04034 	movhi	r23,256
 1001220:	00804074 	movhi	r2,257
 1001224:	10a38c04 	addi	r2,r2,-29136
 1001228:	bddce204 	addi	r23,r23,29576
 100122c:	15400017 	ldw	r21,0(r2)
 1001230:	b8c00017 	ldw	r3,0(r23)
 1001234:	00bfffc4 	movi	r2,-1
 1001238:	858d883a 	add	r6,r16,r22
 100123c:	8d6b883a 	add	r21,r17,r21
 1001240:	1880ea26 	beq	r3,r2,10015ec <_malloc_r+0x714>
 1001244:	ad4403c4 	addi	r21,r21,4111
 1001248:	00bc0004 	movi	r2,-4096
 100124c:	a8aa703a 	and	r21,r21,r2
 1001250:	a80b883a 	mov	r5,r21
 1001254:	9009883a 	mov	r4,r18
 1001258:	d9800015 	stw	r6,0(sp)
 100125c:	10020f80 	call	10020f8 <_sbrk_r>
 1001260:	1029883a 	mov	r20,r2
 1001264:	00bfffc4 	movi	r2,-1
 1001268:	d9800017 	ldw	r6,0(sp)
 100126c:	a080e826 	beq	r20,r2,1001610 <_malloc_r+0x738>
 1001270:	a180a636 	bltu	r20,r6,100150c <_malloc_r+0x634>
 1001274:	07004074 	movhi	fp,257
 1001278:	e7239504 	addi	fp,fp,-29100
 100127c:	e0800017 	ldw	r2,0(fp)
 1001280:	a887883a 	add	r3,r21,r2
 1001284:	e0c00015 	stw	r3,0(fp)
 1001288:	3500e626 	beq	r6,r20,1001624 <_malloc_r+0x74c>
 100128c:	b9000017 	ldw	r4,0(r23)
 1001290:	00bfffc4 	movi	r2,-1
 1001294:	2080ee26 	beq	r4,r2,1001650 <_malloc_r+0x778>
 1001298:	a185c83a 	sub	r2,r20,r6
 100129c:	10c5883a 	add	r2,r2,r3
 10012a0:	e0800015 	stw	r2,0(fp)
 10012a4:	a0c001cc 	andi	r3,r20,7
 10012a8:	1800bc26 	beq	r3,zero,100159c <_malloc_r+0x6c4>
 10012ac:	a0e9c83a 	sub	r20,r20,r3
 10012b0:	00840204 	movi	r2,4104
 10012b4:	a5000204 	addi	r20,r20,8
 10012b8:	10c7c83a 	sub	r3,r2,r3
 10012bc:	a545883a 	add	r2,r20,r21
 10012c0:	1083ffcc 	andi	r2,r2,4095
 10012c4:	18abc83a 	sub	r21,r3,r2
 10012c8:	a80b883a 	mov	r5,r21
 10012cc:	9009883a 	mov	r4,r18
 10012d0:	10020f80 	call	10020f8 <_sbrk_r>
 10012d4:	00ffffc4 	movi	r3,-1
 10012d8:	10c0e126 	beq	r2,r3,1001660 <_malloc_r+0x788>
 10012dc:	1505c83a 	sub	r2,r2,r20
 10012e0:	1545883a 	add	r2,r2,r21
 10012e4:	10800054 	ori	r2,r2,1
 10012e8:	e0c00017 	ldw	r3,0(fp)
 10012ec:	9d000215 	stw	r20,8(r19)
 10012f0:	a0800115 	stw	r2,4(r20)
 10012f4:	a8c7883a 	add	r3,r21,r3
 10012f8:	e0c00015 	stw	r3,0(fp)
 10012fc:	84c00e26 	beq	r16,r19,1001338 <_malloc_r+0x460>
 1001300:	018003c4 	movi	r6,15
 1001304:	3580a72e 	bgeu	r6,r22,10015a4 <_malloc_r+0x6cc>
 1001308:	81400117 	ldw	r5,4(r16)
 100130c:	013ffe04 	movi	r4,-8
 1001310:	b0bffd04 	addi	r2,r22,-12
 1001314:	1104703a 	and	r2,r2,r4
 1001318:	2900004c 	andi	r4,r5,1
 100131c:	2088b03a 	or	r4,r4,r2
 1001320:	81000115 	stw	r4,4(r16)
 1001324:	01400144 	movi	r5,5
 1001328:	8089883a 	add	r4,r16,r2
 100132c:	21400115 	stw	r5,4(r4)
 1001330:	21400215 	stw	r5,8(r4)
 1001334:	3080cd36 	bltu	r6,r2,100166c <_malloc_r+0x794>
 1001338:	00804074 	movhi	r2,257
 100133c:	10a38b04 	addi	r2,r2,-29140
 1001340:	11000017 	ldw	r4,0(r2)
 1001344:	20c0012e 	bgeu	r4,r3,100134c <_malloc_r+0x474>
 1001348:	10c00015 	stw	r3,0(r2)
 100134c:	00804074 	movhi	r2,257
 1001350:	10a38a04 	addi	r2,r2,-29144
 1001354:	11000017 	ldw	r4,0(r2)
 1001358:	9c000217 	ldw	r16,8(r19)
 100135c:	20c0012e 	bgeu	r4,r3,1001364 <_malloc_r+0x48c>
 1001360:	10c00015 	stw	r3,0(r2)
 1001364:	80c00117 	ldw	r3,4(r16)
 1001368:	00bfff04 	movi	r2,-4
 100136c:	1886703a 	and	r3,r3,r2
 1001370:	1c45c83a 	sub	r2,r3,r17
 1001374:	1c400236 	bltu	r3,r17,1001380 <_malloc_r+0x4a8>
 1001378:	00c003c4 	movi	r3,15
 100137c:	18800416 	blt	r3,r2,1001390 <_malloc_r+0x4b8>
 1001380:	9009883a 	mov	r4,r18
 1001384:	10039900 	call	1003990 <__malloc_unlock>
 1001388:	0005883a 	mov	r2,zero
 100138c:	003f7b06 	br	100117c <__alt_data_end+0xff00117c>
 1001390:	88c00054 	ori	r3,r17,1
 1001394:	80c00115 	stw	r3,4(r16)
 1001398:	8463883a 	add	r17,r16,r17
 100139c:	10800054 	ori	r2,r2,1
 10013a0:	9c400215 	stw	r17,8(r19)
 10013a4:	88800115 	stw	r2,4(r17)
 10013a8:	9009883a 	mov	r4,r18
 10013ac:	10039900 	call	1003990 <__malloc_unlock>
 10013b0:	80800204 	addi	r2,r16,8
 10013b4:	003f7106 	br	100117c <__alt_data_end+0xff00117c>
 10013b8:	00c00504 	movi	r3,20
 10013bc:	18804a2e 	bgeu	r3,r2,10014e8 <_malloc_r+0x610>
 10013c0:	00c01504 	movi	r3,84
 10013c4:	18806e36 	bltu	r3,r2,1001580 <_malloc_r+0x6a8>
 10013c8:	8804d33a 	srli	r2,r17,12
 10013cc:	12001bc4 	addi	r8,r2,111
 10013d0:	11c01b84 	addi	r7,r2,110
 10013d4:	4209883a 	add	r4,r8,r8
 10013d8:	003edd06 	br	1000f50 <__alt_data_end+0xff000f50>
 10013dc:	3804d27a 	srli	r2,r7,9
 10013e0:	00c00104 	movi	r3,4
 10013e4:	1880442e 	bgeu	r3,r2,10014f8 <_malloc_r+0x620>
 10013e8:	00c00504 	movi	r3,20
 10013ec:	18808136 	bltu	r3,r2,10015f4 <_malloc_r+0x71c>
 10013f0:	11401704 	addi	r5,r2,92
 10013f4:	10c016c4 	addi	r3,r2,91
 10013f8:	294b883a 	add	r5,r5,r5
 10013fc:	294b883a 	add	r5,r5,r5
 1001400:	294b883a 	add	r5,r5,r5
 1001404:	994b883a 	add	r5,r19,r5
 1001408:	28800017 	ldw	r2,0(r5)
 100140c:	01804034 	movhi	r6,256
 1001410:	297ffe04 	addi	r5,r5,-8
 1001414:	31975c04 	addi	r6,r6,23920
 1001418:	28806526 	beq	r5,r2,10015b0 <_malloc_r+0x6d8>
 100141c:	01bfff04 	movi	r6,-4
 1001420:	10c00117 	ldw	r3,4(r2)
 1001424:	1986703a 	and	r3,r3,r6
 1001428:	38c0022e 	bgeu	r7,r3,1001434 <_malloc_r+0x55c>
 100142c:	10800217 	ldw	r2,8(r2)
 1001430:	28bffb1e 	bne	r5,r2,1001420 <__alt_data_end+0xff001420>
 1001434:	11400317 	ldw	r5,12(r2)
 1001438:	98c00117 	ldw	r3,4(r19)
 100143c:	81400315 	stw	r5,12(r16)
 1001440:	80800215 	stw	r2,8(r16)
 1001444:	2c000215 	stw	r16,8(r5)
 1001448:	14000315 	stw	r16,12(r2)
 100144c:	003ef806 	br	1001030 <__alt_data_end+0xff001030>
 1001450:	88c00054 	ori	r3,r17,1
 1001454:	80c00115 	stw	r3,4(r16)
 1001458:	8463883a 	add	r17,r16,r17
 100145c:	34400515 	stw	r17,20(r6)
 1001460:	34400415 	stw	r17,16(r6)
 1001464:	10c00054 	ori	r3,r2,1
 1001468:	8a000315 	stw	r8,12(r17)
 100146c:	8a000215 	stw	r8,8(r17)
 1001470:	88c00115 	stw	r3,4(r17)
 1001474:	88a3883a 	add	r17,r17,r2
 1001478:	88800015 	stw	r2,0(r17)
 100147c:	9009883a 	mov	r4,r18
 1001480:	10039900 	call	1003990 <__malloc_unlock>
 1001484:	80800204 	addi	r2,r16,8
 1001488:	003f3c06 	br	100117c <__alt_data_end+0xff00117c>
 100148c:	30c00117 	ldw	r3,4(r6)
 1001490:	003ee706 	br	1001030 <__alt_data_end+0xff001030>
 1001494:	5ac00044 	addi	r11,r11,1
 1001498:	588000cc 	andi	r2,r11,3
 100149c:	31800204 	addi	r6,r6,8
 10014a0:	103efd1e 	bne	r2,zero,1001098 <__alt_data_end+0xff001098>
 10014a4:	00002406 	br	1001538 <_malloc_r+0x660>
 10014a8:	14000317 	ldw	r16,12(r2)
 10014ac:	143f251e 	bne	r2,r16,1001144 <__alt_data_end+0xff001144>
 10014b0:	21000084 	addi	r4,r4,2
 10014b4:	003ebc06 	br	1000fa8 <__alt_data_end+0xff000fa8>
 10014b8:	8085883a 	add	r2,r16,r2
 10014bc:	10c00117 	ldw	r3,4(r2)
 10014c0:	81000317 	ldw	r4,12(r16)
 10014c4:	81400217 	ldw	r5,8(r16)
 10014c8:	18c00054 	ori	r3,r3,1
 10014cc:	10c00115 	stw	r3,4(r2)
 10014d0:	29000315 	stw	r4,12(r5)
 10014d4:	21400215 	stw	r5,8(r4)
 10014d8:	9009883a 	mov	r4,r18
 10014dc:	10039900 	call	1003990 <__malloc_unlock>
 10014e0:	80800204 	addi	r2,r16,8
 10014e4:	003f2506 	br	100117c <__alt_data_end+0xff00117c>
 10014e8:	12001704 	addi	r8,r2,92
 10014ec:	11c016c4 	addi	r7,r2,91
 10014f0:	4209883a 	add	r4,r8,r8
 10014f4:	003e9606 	br	1000f50 <__alt_data_end+0xff000f50>
 10014f8:	3804d1ba 	srli	r2,r7,6
 10014fc:	11400e44 	addi	r5,r2,57
 1001500:	10c00e04 	addi	r3,r2,56
 1001504:	294b883a 	add	r5,r5,r5
 1001508:	003fbc06 	br	10013fc <__alt_data_end+0xff0013fc>
 100150c:	84ff5926 	beq	r16,r19,1001274 <__alt_data_end+0xff001274>
 1001510:	00804034 	movhi	r2,256
 1001514:	10975c04 	addi	r2,r2,23920
 1001518:	14000217 	ldw	r16,8(r2)
 100151c:	00bfff04 	movi	r2,-4
 1001520:	80c00117 	ldw	r3,4(r16)
 1001524:	1886703a 	and	r3,r3,r2
 1001528:	003f9106 	br	1001370 <__alt_data_end+0xff001370>
 100152c:	60800217 	ldw	r2,8(r12)
 1001530:	213fffc4 	addi	r4,r4,-1
 1001534:	1300651e 	bne	r2,r12,10016cc <_malloc_r+0x7f4>
 1001538:	208000cc 	andi	r2,r4,3
 100153c:	633ffe04 	addi	r12,r12,-8
 1001540:	103ffa1e 	bne	r2,zero,100152c <__alt_data_end+0xff00152c>
 1001544:	98800117 	ldw	r2,4(r19)
 1001548:	0146303a 	nor	r3,zero,r5
 100154c:	1884703a 	and	r2,r3,r2
 1001550:	98800115 	stw	r2,4(r19)
 1001554:	294b883a 	add	r5,r5,r5
 1001558:	117f2836 	bltu	r2,r5,10011fc <__alt_data_end+0xff0011fc>
 100155c:	283f2726 	beq	r5,zero,10011fc <__alt_data_end+0xff0011fc>
 1001560:	2886703a 	and	r3,r5,r2
 1001564:	5809883a 	mov	r4,r11
 1001568:	183ec31e 	bne	r3,zero,1001078 <__alt_data_end+0xff001078>
 100156c:	294b883a 	add	r5,r5,r5
 1001570:	2886703a 	and	r3,r5,r2
 1001574:	21000104 	addi	r4,r4,4
 1001578:	183ffc26 	beq	r3,zero,100156c <__alt_data_end+0xff00156c>
 100157c:	003ebe06 	br	1001078 <__alt_data_end+0xff001078>
 1001580:	00c05504 	movi	r3,340
 1001584:	18801236 	bltu	r3,r2,10015d0 <_malloc_r+0x6f8>
 1001588:	8804d3fa 	srli	r2,r17,15
 100158c:	12001e04 	addi	r8,r2,120
 1001590:	11c01dc4 	addi	r7,r2,119
 1001594:	4209883a 	add	r4,r8,r8
 1001598:	003e6d06 	br	1000f50 <__alt_data_end+0xff000f50>
 100159c:	00c40004 	movi	r3,4096
 10015a0:	003f4606 	br	10012bc <__alt_data_end+0xff0012bc>
 10015a4:	00800044 	movi	r2,1
 10015a8:	a0800115 	stw	r2,4(r20)
 10015ac:	003f7406 	br	1001380 <__alt_data_end+0xff001380>
 10015b0:	1805d0ba 	srai	r2,r3,2
 10015b4:	01c00044 	movi	r7,1
 10015b8:	30c00117 	ldw	r3,4(r6)
 10015bc:	388e983a 	sll	r7,r7,r2
 10015c0:	2805883a 	mov	r2,r5
 10015c4:	38c6b03a 	or	r3,r7,r3
 10015c8:	30c00115 	stw	r3,4(r6)
 10015cc:	003f9b06 	br	100143c <__alt_data_end+0xff00143c>
 10015d0:	00c15504 	movi	r3,1364
 10015d4:	18801a36 	bltu	r3,r2,1001640 <_malloc_r+0x768>
 10015d8:	8804d4ba 	srli	r2,r17,18
 10015dc:	12001f44 	addi	r8,r2,125
 10015e0:	11c01f04 	addi	r7,r2,124
 10015e4:	4209883a 	add	r4,r8,r8
 10015e8:	003e5906 	br	1000f50 <__alt_data_end+0xff000f50>
 10015ec:	ad400404 	addi	r21,r21,16
 10015f0:	003f1706 	br	1001250 <__alt_data_end+0xff001250>
 10015f4:	00c01504 	movi	r3,84
 10015f8:	18802336 	bltu	r3,r2,1001688 <_malloc_r+0x7b0>
 10015fc:	3804d33a 	srli	r2,r7,12
 1001600:	11401bc4 	addi	r5,r2,111
 1001604:	10c01b84 	addi	r3,r2,110
 1001608:	294b883a 	add	r5,r5,r5
 100160c:	003f7b06 	br	10013fc <__alt_data_end+0xff0013fc>
 1001610:	9c000217 	ldw	r16,8(r19)
 1001614:	00bfff04 	movi	r2,-4
 1001618:	80c00117 	ldw	r3,4(r16)
 100161c:	1886703a 	and	r3,r3,r2
 1001620:	003f5306 	br	1001370 <__alt_data_end+0xff001370>
 1001624:	3083ffcc 	andi	r2,r6,4095
 1001628:	103f181e 	bne	r2,zero,100128c <__alt_data_end+0xff00128c>
 100162c:	99000217 	ldw	r4,8(r19)
 1001630:	b545883a 	add	r2,r22,r21
 1001634:	10800054 	ori	r2,r2,1
 1001638:	20800115 	stw	r2,4(r4)
 100163c:	003f3e06 	br	1001338 <__alt_data_end+0xff001338>
 1001640:	01003f84 	movi	r4,254
 1001644:	02001fc4 	movi	r8,127
 1001648:	01c01f84 	movi	r7,126
 100164c:	003e4006 	br	1000f50 <__alt_data_end+0xff000f50>
 1001650:	00804034 	movhi	r2,256
 1001654:	109ce204 	addi	r2,r2,29576
 1001658:	15000015 	stw	r20,0(r2)
 100165c:	003f1106 	br	10012a4 <__alt_data_end+0xff0012a4>
 1001660:	00800044 	movi	r2,1
 1001664:	002b883a 	mov	r21,zero
 1001668:	003f1f06 	br	10012e8 <__alt_data_end+0xff0012e8>
 100166c:	81400204 	addi	r5,r16,8
 1001670:	9009883a 	mov	r4,r18
 1001674:	10029600 	call	1002960 <_free_r>
 1001678:	00804074 	movhi	r2,257
 100167c:	10a39504 	addi	r2,r2,-29100
 1001680:	10c00017 	ldw	r3,0(r2)
 1001684:	003f2c06 	br	1001338 <__alt_data_end+0xff001338>
 1001688:	00c05504 	movi	r3,340
 100168c:	18800536 	bltu	r3,r2,10016a4 <_malloc_r+0x7cc>
 1001690:	3804d3fa 	srli	r2,r7,15
 1001694:	11401e04 	addi	r5,r2,120
 1001698:	10c01dc4 	addi	r3,r2,119
 100169c:	294b883a 	add	r5,r5,r5
 10016a0:	003f5606 	br	10013fc <__alt_data_end+0xff0013fc>
 10016a4:	00c15504 	movi	r3,1364
 10016a8:	18800536 	bltu	r3,r2,10016c0 <_malloc_r+0x7e8>
 10016ac:	3804d4ba 	srli	r2,r7,18
 10016b0:	11401f44 	addi	r5,r2,125
 10016b4:	10c01f04 	addi	r3,r2,124
 10016b8:	294b883a 	add	r5,r5,r5
 10016bc:	003f4f06 	br	10013fc <__alt_data_end+0xff0013fc>
 10016c0:	01403f84 	movi	r5,254
 10016c4:	00c01f84 	movi	r3,126
 10016c8:	003f4c06 	br	10013fc <__alt_data_end+0xff0013fc>
 10016cc:	98800117 	ldw	r2,4(r19)
 10016d0:	003fa006 	br	1001554 <__alt_data_end+0xff001554>
 10016d4:	8808d0fa 	srli	r4,r17,3
 10016d8:	20800044 	addi	r2,r4,1
 10016dc:	1085883a 	add	r2,r2,r2
 10016e0:	003e9006 	br	1001124 <__alt_data_end+0xff001124>

010016e4 <memchr>:
 10016e4:	208000cc 	andi	r2,r4,3
 10016e8:	280f883a 	mov	r7,r5
 10016ec:	10003426 	beq	r2,zero,10017c0 <memchr+0xdc>
 10016f0:	30bfffc4 	addi	r2,r6,-1
 10016f4:	30001a26 	beq	r6,zero,1001760 <memchr+0x7c>
 10016f8:	20c00003 	ldbu	r3,0(r4)
 10016fc:	29803fcc 	andi	r6,r5,255
 1001700:	30c0051e 	bne	r6,r3,1001718 <memchr+0x34>
 1001704:	00001806 	br	1001768 <memchr+0x84>
 1001708:	10001526 	beq	r2,zero,1001760 <memchr+0x7c>
 100170c:	20c00003 	ldbu	r3,0(r4)
 1001710:	10bfffc4 	addi	r2,r2,-1
 1001714:	30c01426 	beq	r6,r3,1001768 <memchr+0x84>
 1001718:	21000044 	addi	r4,r4,1
 100171c:	20c000cc 	andi	r3,r4,3
 1001720:	183ff91e 	bne	r3,zero,1001708 <__alt_data_end+0xff001708>
 1001724:	020000c4 	movi	r8,3
 1001728:	40801136 	bltu	r8,r2,1001770 <memchr+0x8c>
 100172c:	10000c26 	beq	r2,zero,1001760 <memchr+0x7c>
 1001730:	20c00003 	ldbu	r3,0(r4)
 1001734:	29403fcc 	andi	r5,r5,255
 1001738:	28c00b26 	beq	r5,r3,1001768 <memchr+0x84>
 100173c:	20c00044 	addi	r3,r4,1
 1001740:	39803fcc 	andi	r6,r7,255
 1001744:	2089883a 	add	r4,r4,r2
 1001748:	00000306 	br	1001758 <memchr+0x74>
 100174c:	18c00044 	addi	r3,r3,1
 1001750:	197fffc3 	ldbu	r5,-1(r3)
 1001754:	31400526 	beq	r6,r5,100176c <memchr+0x88>
 1001758:	1805883a 	mov	r2,r3
 100175c:	20fffb1e 	bne	r4,r3,100174c <__alt_data_end+0xff00174c>
 1001760:	0005883a 	mov	r2,zero
 1001764:	f800283a 	ret
 1001768:	2005883a 	mov	r2,r4
 100176c:	f800283a 	ret
 1001770:	28c03fcc 	andi	r3,r5,255
 1001774:	1812923a 	slli	r9,r3,8
 1001778:	02ffbff4 	movhi	r11,65279
 100177c:	02a02074 	movhi	r10,32897
 1001780:	48d2b03a 	or	r9,r9,r3
 1001784:	4806943a 	slli	r3,r9,16
 1001788:	5affbfc4 	addi	r11,r11,-257
 100178c:	52a02004 	addi	r10,r10,-32640
 1001790:	48d2b03a 	or	r9,r9,r3
 1001794:	20c00017 	ldw	r3,0(r4)
 1001798:	48c6f03a 	xor	r3,r9,r3
 100179c:	1acd883a 	add	r6,r3,r11
 10017a0:	00c6303a 	nor	r3,zero,r3
 10017a4:	30c6703a 	and	r3,r6,r3
 10017a8:	1a86703a 	and	r3,r3,r10
 10017ac:	183fe01e 	bne	r3,zero,1001730 <__alt_data_end+0xff001730>
 10017b0:	10bfff04 	addi	r2,r2,-4
 10017b4:	21000104 	addi	r4,r4,4
 10017b8:	40bff636 	bltu	r8,r2,1001794 <__alt_data_end+0xff001794>
 10017bc:	003fdb06 	br	100172c <__alt_data_end+0xff00172c>
 10017c0:	3005883a 	mov	r2,r6
 10017c4:	003fd706 	br	1001724 <__alt_data_end+0xff001724>

010017c8 <memcpy>:
 10017c8:	defffd04 	addi	sp,sp,-12
 10017cc:	dfc00215 	stw	ra,8(sp)
 10017d0:	dc400115 	stw	r17,4(sp)
 10017d4:	dc000015 	stw	r16,0(sp)
 10017d8:	00c003c4 	movi	r3,15
 10017dc:	2005883a 	mov	r2,r4
 10017e0:	1980452e 	bgeu	r3,r6,10018f8 <memcpy+0x130>
 10017e4:	2906b03a 	or	r3,r5,r4
 10017e8:	18c000cc 	andi	r3,r3,3
 10017ec:	1800441e 	bne	r3,zero,1001900 <memcpy+0x138>
 10017f0:	347ffc04 	addi	r17,r6,-16
 10017f4:	8822d13a 	srli	r17,r17,4
 10017f8:	28c00104 	addi	r3,r5,4
 10017fc:	23400104 	addi	r13,r4,4
 1001800:	8820913a 	slli	r16,r17,4
 1001804:	2b000204 	addi	r12,r5,8
 1001808:	22c00204 	addi	r11,r4,8
 100180c:	84000504 	addi	r16,r16,20
 1001810:	2a800304 	addi	r10,r5,12
 1001814:	22400304 	addi	r9,r4,12
 1001818:	2c21883a 	add	r16,r5,r16
 100181c:	2811883a 	mov	r8,r5
 1001820:	200f883a 	mov	r7,r4
 1001824:	41000017 	ldw	r4,0(r8)
 1001828:	1fc00017 	ldw	ra,0(r3)
 100182c:	63c00017 	ldw	r15,0(r12)
 1001830:	39000015 	stw	r4,0(r7)
 1001834:	53800017 	ldw	r14,0(r10)
 1001838:	6fc00015 	stw	ra,0(r13)
 100183c:	5bc00015 	stw	r15,0(r11)
 1001840:	4b800015 	stw	r14,0(r9)
 1001844:	18c00404 	addi	r3,r3,16
 1001848:	39c00404 	addi	r7,r7,16
 100184c:	42000404 	addi	r8,r8,16
 1001850:	6b400404 	addi	r13,r13,16
 1001854:	63000404 	addi	r12,r12,16
 1001858:	5ac00404 	addi	r11,r11,16
 100185c:	52800404 	addi	r10,r10,16
 1001860:	4a400404 	addi	r9,r9,16
 1001864:	1c3fef1e 	bne	r3,r16,1001824 <__alt_data_end+0xff001824>
 1001868:	89c00044 	addi	r7,r17,1
 100186c:	380e913a 	slli	r7,r7,4
 1001870:	310003cc 	andi	r4,r6,15
 1001874:	02c000c4 	movi	r11,3
 1001878:	11c7883a 	add	r3,r2,r7
 100187c:	29cb883a 	add	r5,r5,r7
 1001880:	5900212e 	bgeu	r11,r4,1001908 <memcpy+0x140>
 1001884:	1813883a 	mov	r9,r3
 1001888:	2811883a 	mov	r8,r5
 100188c:	200f883a 	mov	r7,r4
 1001890:	42800017 	ldw	r10,0(r8)
 1001894:	4a400104 	addi	r9,r9,4
 1001898:	39ffff04 	addi	r7,r7,-4
 100189c:	4abfff15 	stw	r10,-4(r9)
 10018a0:	42000104 	addi	r8,r8,4
 10018a4:	59fffa36 	bltu	r11,r7,1001890 <__alt_data_end+0xff001890>
 10018a8:	213fff04 	addi	r4,r4,-4
 10018ac:	2008d0ba 	srli	r4,r4,2
 10018b0:	318000cc 	andi	r6,r6,3
 10018b4:	21000044 	addi	r4,r4,1
 10018b8:	2109883a 	add	r4,r4,r4
 10018bc:	2109883a 	add	r4,r4,r4
 10018c0:	1907883a 	add	r3,r3,r4
 10018c4:	290b883a 	add	r5,r5,r4
 10018c8:	30000626 	beq	r6,zero,10018e4 <memcpy+0x11c>
 10018cc:	198d883a 	add	r6,r3,r6
 10018d0:	29c00003 	ldbu	r7,0(r5)
 10018d4:	18c00044 	addi	r3,r3,1
 10018d8:	29400044 	addi	r5,r5,1
 10018dc:	19ffffc5 	stb	r7,-1(r3)
 10018e0:	19bffb1e 	bne	r3,r6,10018d0 <__alt_data_end+0xff0018d0>
 10018e4:	dfc00217 	ldw	ra,8(sp)
 10018e8:	dc400117 	ldw	r17,4(sp)
 10018ec:	dc000017 	ldw	r16,0(sp)
 10018f0:	dec00304 	addi	sp,sp,12
 10018f4:	f800283a 	ret
 10018f8:	2007883a 	mov	r3,r4
 10018fc:	003ff206 	br	10018c8 <__alt_data_end+0xff0018c8>
 1001900:	2007883a 	mov	r3,r4
 1001904:	003ff106 	br	10018cc <__alt_data_end+0xff0018cc>
 1001908:	200d883a 	mov	r6,r4
 100190c:	003fee06 	br	10018c8 <__alt_data_end+0xff0018c8>

01001910 <memmove>:
 1001910:	2005883a 	mov	r2,r4
 1001914:	29000b2e 	bgeu	r5,r4,1001944 <memmove+0x34>
 1001918:	298f883a 	add	r7,r5,r6
 100191c:	21c0092e 	bgeu	r4,r7,1001944 <memmove+0x34>
 1001920:	2187883a 	add	r3,r4,r6
 1001924:	198bc83a 	sub	r5,r3,r6
 1001928:	30004826 	beq	r6,zero,1001a4c <memmove+0x13c>
 100192c:	39ffffc4 	addi	r7,r7,-1
 1001930:	39000003 	ldbu	r4,0(r7)
 1001934:	18ffffc4 	addi	r3,r3,-1
 1001938:	19000005 	stb	r4,0(r3)
 100193c:	28fffb1e 	bne	r5,r3,100192c <__alt_data_end+0xff00192c>
 1001940:	f800283a 	ret
 1001944:	00c003c4 	movi	r3,15
 1001948:	1980412e 	bgeu	r3,r6,1001a50 <memmove+0x140>
 100194c:	2886b03a 	or	r3,r5,r2
 1001950:	18c000cc 	andi	r3,r3,3
 1001954:	1800401e 	bne	r3,zero,1001a58 <memmove+0x148>
 1001958:	33fffc04 	addi	r15,r6,-16
 100195c:	781ed13a 	srli	r15,r15,4
 1001960:	28c00104 	addi	r3,r5,4
 1001964:	13400104 	addi	r13,r2,4
 1001968:	781c913a 	slli	r14,r15,4
 100196c:	2b000204 	addi	r12,r5,8
 1001970:	12c00204 	addi	r11,r2,8
 1001974:	73800504 	addi	r14,r14,20
 1001978:	2a800304 	addi	r10,r5,12
 100197c:	12400304 	addi	r9,r2,12
 1001980:	2b9d883a 	add	r14,r5,r14
 1001984:	2811883a 	mov	r8,r5
 1001988:	100f883a 	mov	r7,r2
 100198c:	41000017 	ldw	r4,0(r8)
 1001990:	39c00404 	addi	r7,r7,16
 1001994:	18c00404 	addi	r3,r3,16
 1001998:	393ffc15 	stw	r4,-16(r7)
 100199c:	193ffc17 	ldw	r4,-16(r3)
 10019a0:	6b400404 	addi	r13,r13,16
 10019a4:	5ac00404 	addi	r11,r11,16
 10019a8:	693ffc15 	stw	r4,-16(r13)
 10019ac:	61000017 	ldw	r4,0(r12)
 10019b0:	4a400404 	addi	r9,r9,16
 10019b4:	42000404 	addi	r8,r8,16
 10019b8:	593ffc15 	stw	r4,-16(r11)
 10019bc:	51000017 	ldw	r4,0(r10)
 10019c0:	63000404 	addi	r12,r12,16
 10019c4:	52800404 	addi	r10,r10,16
 10019c8:	493ffc15 	stw	r4,-16(r9)
 10019cc:	1bbfef1e 	bne	r3,r14,100198c <__alt_data_end+0xff00198c>
 10019d0:	79000044 	addi	r4,r15,1
 10019d4:	2008913a 	slli	r4,r4,4
 10019d8:	328003cc 	andi	r10,r6,15
 10019dc:	02c000c4 	movi	r11,3
 10019e0:	1107883a 	add	r3,r2,r4
 10019e4:	290b883a 	add	r5,r5,r4
 10019e8:	5a801e2e 	bgeu	r11,r10,1001a64 <memmove+0x154>
 10019ec:	1813883a 	mov	r9,r3
 10019f0:	2811883a 	mov	r8,r5
 10019f4:	500f883a 	mov	r7,r10
 10019f8:	41000017 	ldw	r4,0(r8)
 10019fc:	4a400104 	addi	r9,r9,4
 1001a00:	39ffff04 	addi	r7,r7,-4
 1001a04:	493fff15 	stw	r4,-4(r9)
 1001a08:	42000104 	addi	r8,r8,4
 1001a0c:	59fffa36 	bltu	r11,r7,10019f8 <__alt_data_end+0xff0019f8>
 1001a10:	513fff04 	addi	r4,r10,-4
 1001a14:	2008d0ba 	srli	r4,r4,2
 1001a18:	318000cc 	andi	r6,r6,3
 1001a1c:	21000044 	addi	r4,r4,1
 1001a20:	2109883a 	add	r4,r4,r4
 1001a24:	2109883a 	add	r4,r4,r4
 1001a28:	1907883a 	add	r3,r3,r4
 1001a2c:	290b883a 	add	r5,r5,r4
 1001a30:	30000b26 	beq	r6,zero,1001a60 <memmove+0x150>
 1001a34:	198d883a 	add	r6,r3,r6
 1001a38:	29c00003 	ldbu	r7,0(r5)
 1001a3c:	18c00044 	addi	r3,r3,1
 1001a40:	29400044 	addi	r5,r5,1
 1001a44:	19ffffc5 	stb	r7,-1(r3)
 1001a48:	19bffb1e 	bne	r3,r6,1001a38 <__alt_data_end+0xff001a38>
 1001a4c:	f800283a 	ret
 1001a50:	1007883a 	mov	r3,r2
 1001a54:	003ff606 	br	1001a30 <__alt_data_end+0xff001a30>
 1001a58:	1007883a 	mov	r3,r2
 1001a5c:	003ff506 	br	1001a34 <__alt_data_end+0xff001a34>
 1001a60:	f800283a 	ret
 1001a64:	500d883a 	mov	r6,r10
 1001a68:	003ff106 	br	1001a30 <__alt_data_end+0xff001a30>

01001a6c <memset>:
 1001a6c:	20c000cc 	andi	r3,r4,3
 1001a70:	2005883a 	mov	r2,r4
 1001a74:	18004426 	beq	r3,zero,1001b88 <memset+0x11c>
 1001a78:	31ffffc4 	addi	r7,r6,-1
 1001a7c:	30004026 	beq	r6,zero,1001b80 <memset+0x114>
 1001a80:	2813883a 	mov	r9,r5
 1001a84:	200d883a 	mov	r6,r4
 1001a88:	2007883a 	mov	r3,r4
 1001a8c:	00000406 	br	1001aa0 <memset+0x34>
 1001a90:	3a3fffc4 	addi	r8,r7,-1
 1001a94:	31800044 	addi	r6,r6,1
 1001a98:	38003926 	beq	r7,zero,1001b80 <memset+0x114>
 1001a9c:	400f883a 	mov	r7,r8
 1001aa0:	18c00044 	addi	r3,r3,1
 1001aa4:	32400005 	stb	r9,0(r6)
 1001aa8:	1a0000cc 	andi	r8,r3,3
 1001aac:	403ff81e 	bne	r8,zero,1001a90 <__alt_data_end+0xff001a90>
 1001ab0:	010000c4 	movi	r4,3
 1001ab4:	21c02d2e 	bgeu	r4,r7,1001b6c <memset+0x100>
 1001ab8:	29003fcc 	andi	r4,r5,255
 1001abc:	200c923a 	slli	r6,r4,8
 1001ac0:	3108b03a 	or	r4,r6,r4
 1001ac4:	200c943a 	slli	r6,r4,16
 1001ac8:	218cb03a 	or	r6,r4,r6
 1001acc:	010003c4 	movi	r4,15
 1001ad0:	21c0182e 	bgeu	r4,r7,1001b34 <memset+0xc8>
 1001ad4:	3b3ffc04 	addi	r12,r7,-16
 1001ad8:	6018d13a 	srli	r12,r12,4
 1001adc:	1a000104 	addi	r8,r3,4
 1001ae0:	1ac00204 	addi	r11,r3,8
 1001ae4:	6008913a 	slli	r4,r12,4
 1001ae8:	1a800304 	addi	r10,r3,12
 1001aec:	1813883a 	mov	r9,r3
 1001af0:	21000504 	addi	r4,r4,20
 1001af4:	1909883a 	add	r4,r3,r4
 1001af8:	49800015 	stw	r6,0(r9)
 1001afc:	41800015 	stw	r6,0(r8)
 1001b00:	59800015 	stw	r6,0(r11)
 1001b04:	51800015 	stw	r6,0(r10)
 1001b08:	42000404 	addi	r8,r8,16
 1001b0c:	4a400404 	addi	r9,r9,16
 1001b10:	5ac00404 	addi	r11,r11,16
 1001b14:	52800404 	addi	r10,r10,16
 1001b18:	413ff71e 	bne	r8,r4,1001af8 <__alt_data_end+0xff001af8>
 1001b1c:	63000044 	addi	r12,r12,1
 1001b20:	6018913a 	slli	r12,r12,4
 1001b24:	39c003cc 	andi	r7,r7,15
 1001b28:	010000c4 	movi	r4,3
 1001b2c:	1b07883a 	add	r3,r3,r12
 1001b30:	21c00e2e 	bgeu	r4,r7,1001b6c <memset+0x100>
 1001b34:	1813883a 	mov	r9,r3
 1001b38:	3811883a 	mov	r8,r7
 1001b3c:	010000c4 	movi	r4,3
 1001b40:	49800015 	stw	r6,0(r9)
 1001b44:	423fff04 	addi	r8,r8,-4
 1001b48:	4a400104 	addi	r9,r9,4
 1001b4c:	223ffc36 	bltu	r4,r8,1001b40 <__alt_data_end+0xff001b40>
 1001b50:	393fff04 	addi	r4,r7,-4
 1001b54:	2008d0ba 	srli	r4,r4,2
 1001b58:	39c000cc 	andi	r7,r7,3
 1001b5c:	21000044 	addi	r4,r4,1
 1001b60:	2109883a 	add	r4,r4,r4
 1001b64:	2109883a 	add	r4,r4,r4
 1001b68:	1907883a 	add	r3,r3,r4
 1001b6c:	38000526 	beq	r7,zero,1001b84 <memset+0x118>
 1001b70:	19cf883a 	add	r7,r3,r7
 1001b74:	19400005 	stb	r5,0(r3)
 1001b78:	18c00044 	addi	r3,r3,1
 1001b7c:	38fffd1e 	bne	r7,r3,1001b74 <__alt_data_end+0xff001b74>
 1001b80:	f800283a 	ret
 1001b84:	f800283a 	ret
 1001b88:	2007883a 	mov	r3,r4
 1001b8c:	300f883a 	mov	r7,r6
 1001b90:	003fc706 	br	1001ab0 <__alt_data_end+0xff001ab0>

01001b94 <_realloc_r>:
 1001b94:	defff604 	addi	sp,sp,-40
 1001b98:	dc800215 	stw	r18,8(sp)
 1001b9c:	dfc00915 	stw	ra,36(sp)
 1001ba0:	df000815 	stw	fp,32(sp)
 1001ba4:	ddc00715 	stw	r23,28(sp)
 1001ba8:	dd800615 	stw	r22,24(sp)
 1001bac:	dd400515 	stw	r21,20(sp)
 1001bb0:	dd000415 	stw	r20,16(sp)
 1001bb4:	dcc00315 	stw	r19,12(sp)
 1001bb8:	dc400115 	stw	r17,4(sp)
 1001bbc:	dc000015 	stw	r16,0(sp)
 1001bc0:	3025883a 	mov	r18,r6
 1001bc4:	2800b726 	beq	r5,zero,1001ea4 <_realloc_r+0x310>
 1001bc8:	282b883a 	mov	r21,r5
 1001bcc:	2029883a 	mov	r20,r4
 1001bd0:	100396c0 	call	100396c <__malloc_lock>
 1001bd4:	a8bfff17 	ldw	r2,-4(r21)
 1001bd8:	043fff04 	movi	r16,-4
 1001bdc:	90c002c4 	addi	r3,r18,11
 1001be0:	01000584 	movi	r4,22
 1001be4:	acfffe04 	addi	r19,r21,-8
 1001be8:	1420703a 	and	r16,r2,r16
 1001bec:	20c0332e 	bgeu	r4,r3,1001cbc <_realloc_r+0x128>
 1001bf0:	047ffe04 	movi	r17,-8
 1001bf4:	1c62703a 	and	r17,r3,r17
 1001bf8:	8807883a 	mov	r3,r17
 1001bfc:	88005816 	blt	r17,zero,1001d60 <_realloc_r+0x1cc>
 1001c00:	8c805736 	bltu	r17,r18,1001d60 <_realloc_r+0x1cc>
 1001c04:	80c0300e 	bge	r16,r3,1001cc8 <_realloc_r+0x134>
 1001c08:	07004034 	movhi	fp,256
 1001c0c:	e7175c04 	addi	fp,fp,23920
 1001c10:	e1c00217 	ldw	r7,8(fp)
 1001c14:	9c09883a 	add	r4,r19,r16
 1001c18:	22000117 	ldw	r8,4(r4)
 1001c1c:	21c06326 	beq	r4,r7,1001dac <_realloc_r+0x218>
 1001c20:	017fff84 	movi	r5,-2
 1001c24:	414a703a 	and	r5,r8,r5
 1001c28:	214b883a 	add	r5,r4,r5
 1001c2c:	29800117 	ldw	r6,4(r5)
 1001c30:	3180004c 	andi	r6,r6,1
 1001c34:	30003f26 	beq	r6,zero,1001d34 <_realloc_r+0x1a0>
 1001c38:	1080004c 	andi	r2,r2,1
 1001c3c:	10008326 	beq	r2,zero,1001e4c <_realloc_r+0x2b8>
 1001c40:	900b883a 	mov	r5,r18
 1001c44:	a009883a 	mov	r4,r20
 1001c48:	1000ed80 	call	1000ed8 <_malloc_r>
 1001c4c:	1025883a 	mov	r18,r2
 1001c50:	10011e26 	beq	r2,zero,10020cc <_realloc_r+0x538>
 1001c54:	a93fff17 	ldw	r4,-4(r21)
 1001c58:	10fffe04 	addi	r3,r2,-8
 1001c5c:	00bfff84 	movi	r2,-2
 1001c60:	2084703a 	and	r2,r4,r2
 1001c64:	9885883a 	add	r2,r19,r2
 1001c68:	1880ee26 	beq	r3,r2,1002024 <_realloc_r+0x490>
 1001c6c:	81bfff04 	addi	r6,r16,-4
 1001c70:	00800904 	movi	r2,36
 1001c74:	1180b836 	bltu	r2,r6,1001f58 <_realloc_r+0x3c4>
 1001c78:	00c004c4 	movi	r3,19
 1001c7c:	19809636 	bltu	r3,r6,1001ed8 <_realloc_r+0x344>
 1001c80:	9005883a 	mov	r2,r18
 1001c84:	a807883a 	mov	r3,r21
 1001c88:	19000017 	ldw	r4,0(r3)
 1001c8c:	11000015 	stw	r4,0(r2)
 1001c90:	19000117 	ldw	r4,4(r3)
 1001c94:	11000115 	stw	r4,4(r2)
 1001c98:	18c00217 	ldw	r3,8(r3)
 1001c9c:	10c00215 	stw	r3,8(r2)
 1001ca0:	a80b883a 	mov	r5,r21
 1001ca4:	a009883a 	mov	r4,r20
 1001ca8:	10029600 	call	1002960 <_free_r>
 1001cac:	a009883a 	mov	r4,r20
 1001cb0:	10039900 	call	1003990 <__malloc_unlock>
 1001cb4:	9005883a 	mov	r2,r18
 1001cb8:	00001206 	br	1001d04 <_realloc_r+0x170>
 1001cbc:	00c00404 	movi	r3,16
 1001cc0:	1823883a 	mov	r17,r3
 1001cc4:	003fce06 	br	1001c00 <__alt_data_end+0xff001c00>
 1001cc8:	a825883a 	mov	r18,r21
 1001ccc:	8445c83a 	sub	r2,r16,r17
 1001cd0:	00c003c4 	movi	r3,15
 1001cd4:	18802636 	bltu	r3,r2,1001d70 <_realloc_r+0x1dc>
 1001cd8:	99800117 	ldw	r6,4(r19)
 1001cdc:	9c07883a 	add	r3,r19,r16
 1001ce0:	3180004c 	andi	r6,r6,1
 1001ce4:	3420b03a 	or	r16,r6,r16
 1001ce8:	9c000115 	stw	r16,4(r19)
 1001cec:	18800117 	ldw	r2,4(r3)
 1001cf0:	10800054 	ori	r2,r2,1
 1001cf4:	18800115 	stw	r2,4(r3)
 1001cf8:	a009883a 	mov	r4,r20
 1001cfc:	10039900 	call	1003990 <__malloc_unlock>
 1001d00:	9005883a 	mov	r2,r18
 1001d04:	dfc00917 	ldw	ra,36(sp)
 1001d08:	df000817 	ldw	fp,32(sp)
 1001d0c:	ddc00717 	ldw	r23,28(sp)
 1001d10:	dd800617 	ldw	r22,24(sp)
 1001d14:	dd400517 	ldw	r21,20(sp)
 1001d18:	dd000417 	ldw	r20,16(sp)
 1001d1c:	dcc00317 	ldw	r19,12(sp)
 1001d20:	dc800217 	ldw	r18,8(sp)
 1001d24:	dc400117 	ldw	r17,4(sp)
 1001d28:	dc000017 	ldw	r16,0(sp)
 1001d2c:	dec00a04 	addi	sp,sp,40
 1001d30:	f800283a 	ret
 1001d34:	017fff04 	movi	r5,-4
 1001d38:	414a703a 	and	r5,r8,r5
 1001d3c:	814d883a 	add	r6,r16,r5
 1001d40:	30c01f16 	blt	r6,r3,1001dc0 <_realloc_r+0x22c>
 1001d44:	20800317 	ldw	r2,12(r4)
 1001d48:	20c00217 	ldw	r3,8(r4)
 1001d4c:	a825883a 	mov	r18,r21
 1001d50:	3021883a 	mov	r16,r6
 1001d54:	18800315 	stw	r2,12(r3)
 1001d58:	10c00215 	stw	r3,8(r2)
 1001d5c:	003fdb06 	br	1001ccc <__alt_data_end+0xff001ccc>
 1001d60:	00800304 	movi	r2,12
 1001d64:	a0800015 	stw	r2,0(r20)
 1001d68:	0005883a 	mov	r2,zero
 1001d6c:	003fe506 	br	1001d04 <__alt_data_end+0xff001d04>
 1001d70:	98c00117 	ldw	r3,4(r19)
 1001d74:	9c4b883a 	add	r5,r19,r17
 1001d78:	11000054 	ori	r4,r2,1
 1001d7c:	18c0004c 	andi	r3,r3,1
 1001d80:	1c62b03a 	or	r17,r3,r17
 1001d84:	9c400115 	stw	r17,4(r19)
 1001d88:	29000115 	stw	r4,4(r5)
 1001d8c:	2885883a 	add	r2,r5,r2
 1001d90:	10c00117 	ldw	r3,4(r2)
 1001d94:	29400204 	addi	r5,r5,8
 1001d98:	a009883a 	mov	r4,r20
 1001d9c:	18c00054 	ori	r3,r3,1
 1001da0:	10c00115 	stw	r3,4(r2)
 1001da4:	10029600 	call	1002960 <_free_r>
 1001da8:	003fd306 	br	1001cf8 <__alt_data_end+0xff001cf8>
 1001dac:	017fff04 	movi	r5,-4
 1001db0:	414a703a 	and	r5,r8,r5
 1001db4:	89800404 	addi	r6,r17,16
 1001db8:	8151883a 	add	r8,r16,r5
 1001dbc:	4180590e 	bge	r8,r6,1001f24 <_realloc_r+0x390>
 1001dc0:	1080004c 	andi	r2,r2,1
 1001dc4:	103f9e1e 	bne	r2,zero,1001c40 <__alt_data_end+0xff001c40>
 1001dc8:	adbffe17 	ldw	r22,-8(r21)
 1001dcc:	00bfff04 	movi	r2,-4
 1001dd0:	9dadc83a 	sub	r22,r19,r22
 1001dd4:	b1800117 	ldw	r6,4(r22)
 1001dd8:	3084703a 	and	r2,r6,r2
 1001ddc:	20002026 	beq	r4,zero,1001e60 <_realloc_r+0x2cc>
 1001de0:	80af883a 	add	r23,r16,r2
 1001de4:	b96f883a 	add	r23,r23,r5
 1001de8:	21c05f26 	beq	r4,r7,1001f68 <_realloc_r+0x3d4>
 1001dec:	b8c01c16 	blt	r23,r3,1001e60 <_realloc_r+0x2cc>
 1001df0:	20800317 	ldw	r2,12(r4)
 1001df4:	20c00217 	ldw	r3,8(r4)
 1001df8:	81bfff04 	addi	r6,r16,-4
 1001dfc:	01000904 	movi	r4,36
 1001e00:	18800315 	stw	r2,12(r3)
 1001e04:	10c00215 	stw	r3,8(r2)
 1001e08:	b0c00217 	ldw	r3,8(r22)
 1001e0c:	b0800317 	ldw	r2,12(r22)
 1001e10:	b4800204 	addi	r18,r22,8
 1001e14:	18800315 	stw	r2,12(r3)
 1001e18:	10c00215 	stw	r3,8(r2)
 1001e1c:	21801b36 	bltu	r4,r6,1001e8c <_realloc_r+0x2f8>
 1001e20:	008004c4 	movi	r2,19
 1001e24:	1180352e 	bgeu	r2,r6,1001efc <_realloc_r+0x368>
 1001e28:	a8800017 	ldw	r2,0(r21)
 1001e2c:	b0800215 	stw	r2,8(r22)
 1001e30:	a8800117 	ldw	r2,4(r21)
 1001e34:	b0800315 	stw	r2,12(r22)
 1001e38:	008006c4 	movi	r2,27
 1001e3c:	11807f36 	bltu	r2,r6,100203c <_realloc_r+0x4a8>
 1001e40:	b0800404 	addi	r2,r22,16
 1001e44:	ad400204 	addi	r21,r21,8
 1001e48:	00002d06 	br	1001f00 <_realloc_r+0x36c>
 1001e4c:	adbffe17 	ldw	r22,-8(r21)
 1001e50:	00bfff04 	movi	r2,-4
 1001e54:	9dadc83a 	sub	r22,r19,r22
 1001e58:	b1000117 	ldw	r4,4(r22)
 1001e5c:	2084703a 	and	r2,r4,r2
 1001e60:	b03f7726 	beq	r22,zero,1001c40 <__alt_data_end+0xff001c40>
 1001e64:	80af883a 	add	r23,r16,r2
 1001e68:	b8ff7516 	blt	r23,r3,1001c40 <__alt_data_end+0xff001c40>
 1001e6c:	b0800317 	ldw	r2,12(r22)
 1001e70:	b0c00217 	ldw	r3,8(r22)
 1001e74:	81bfff04 	addi	r6,r16,-4
 1001e78:	01000904 	movi	r4,36
 1001e7c:	18800315 	stw	r2,12(r3)
 1001e80:	10c00215 	stw	r3,8(r2)
 1001e84:	b4800204 	addi	r18,r22,8
 1001e88:	21bfe52e 	bgeu	r4,r6,1001e20 <__alt_data_end+0xff001e20>
 1001e8c:	a80b883a 	mov	r5,r21
 1001e90:	9009883a 	mov	r4,r18
 1001e94:	10019100 	call	1001910 <memmove>
 1001e98:	b821883a 	mov	r16,r23
 1001e9c:	b027883a 	mov	r19,r22
 1001ea0:	003f8a06 	br	1001ccc <__alt_data_end+0xff001ccc>
 1001ea4:	300b883a 	mov	r5,r6
 1001ea8:	dfc00917 	ldw	ra,36(sp)
 1001eac:	df000817 	ldw	fp,32(sp)
 1001eb0:	ddc00717 	ldw	r23,28(sp)
 1001eb4:	dd800617 	ldw	r22,24(sp)
 1001eb8:	dd400517 	ldw	r21,20(sp)
 1001ebc:	dd000417 	ldw	r20,16(sp)
 1001ec0:	dcc00317 	ldw	r19,12(sp)
 1001ec4:	dc800217 	ldw	r18,8(sp)
 1001ec8:	dc400117 	ldw	r17,4(sp)
 1001ecc:	dc000017 	ldw	r16,0(sp)
 1001ed0:	dec00a04 	addi	sp,sp,40
 1001ed4:	1000ed81 	jmpi	1000ed8 <_malloc_r>
 1001ed8:	a8c00017 	ldw	r3,0(r21)
 1001edc:	90c00015 	stw	r3,0(r18)
 1001ee0:	a8c00117 	ldw	r3,4(r21)
 1001ee4:	90c00115 	stw	r3,4(r18)
 1001ee8:	00c006c4 	movi	r3,27
 1001eec:	19804536 	bltu	r3,r6,1002004 <_realloc_r+0x470>
 1001ef0:	90800204 	addi	r2,r18,8
 1001ef4:	a8c00204 	addi	r3,r21,8
 1001ef8:	003f6306 	br	1001c88 <__alt_data_end+0xff001c88>
 1001efc:	9005883a 	mov	r2,r18
 1001f00:	a8c00017 	ldw	r3,0(r21)
 1001f04:	b821883a 	mov	r16,r23
 1001f08:	b027883a 	mov	r19,r22
 1001f0c:	10c00015 	stw	r3,0(r2)
 1001f10:	a8c00117 	ldw	r3,4(r21)
 1001f14:	10c00115 	stw	r3,4(r2)
 1001f18:	a8c00217 	ldw	r3,8(r21)
 1001f1c:	10c00215 	stw	r3,8(r2)
 1001f20:	003f6a06 	br	1001ccc <__alt_data_end+0xff001ccc>
 1001f24:	9c67883a 	add	r19,r19,r17
 1001f28:	4445c83a 	sub	r2,r8,r17
 1001f2c:	e4c00215 	stw	r19,8(fp)
 1001f30:	10800054 	ori	r2,r2,1
 1001f34:	98800115 	stw	r2,4(r19)
 1001f38:	a8bfff17 	ldw	r2,-4(r21)
 1001f3c:	a009883a 	mov	r4,r20
 1001f40:	1080004c 	andi	r2,r2,1
 1001f44:	1462b03a 	or	r17,r2,r17
 1001f48:	ac7fff15 	stw	r17,-4(r21)
 1001f4c:	10039900 	call	1003990 <__malloc_unlock>
 1001f50:	a805883a 	mov	r2,r21
 1001f54:	003f6b06 	br	1001d04 <__alt_data_end+0xff001d04>
 1001f58:	a80b883a 	mov	r5,r21
 1001f5c:	9009883a 	mov	r4,r18
 1001f60:	10019100 	call	1001910 <memmove>
 1001f64:	003f4e06 	br	1001ca0 <__alt_data_end+0xff001ca0>
 1001f68:	89000404 	addi	r4,r17,16
 1001f6c:	b93fbc16 	blt	r23,r4,1001e60 <__alt_data_end+0xff001e60>
 1001f70:	b0800317 	ldw	r2,12(r22)
 1001f74:	b0c00217 	ldw	r3,8(r22)
 1001f78:	81bfff04 	addi	r6,r16,-4
 1001f7c:	01000904 	movi	r4,36
 1001f80:	18800315 	stw	r2,12(r3)
 1001f84:	10c00215 	stw	r3,8(r2)
 1001f88:	b4800204 	addi	r18,r22,8
 1001f8c:	21804336 	bltu	r4,r6,100209c <_realloc_r+0x508>
 1001f90:	008004c4 	movi	r2,19
 1001f94:	11803f2e 	bgeu	r2,r6,1002094 <_realloc_r+0x500>
 1001f98:	a8800017 	ldw	r2,0(r21)
 1001f9c:	b0800215 	stw	r2,8(r22)
 1001fa0:	a8800117 	ldw	r2,4(r21)
 1001fa4:	b0800315 	stw	r2,12(r22)
 1001fa8:	008006c4 	movi	r2,27
 1001fac:	11803f36 	bltu	r2,r6,10020ac <_realloc_r+0x518>
 1001fb0:	b0800404 	addi	r2,r22,16
 1001fb4:	ad400204 	addi	r21,r21,8
 1001fb8:	a8c00017 	ldw	r3,0(r21)
 1001fbc:	10c00015 	stw	r3,0(r2)
 1001fc0:	a8c00117 	ldw	r3,4(r21)
 1001fc4:	10c00115 	stw	r3,4(r2)
 1001fc8:	a8c00217 	ldw	r3,8(r21)
 1001fcc:	10c00215 	stw	r3,8(r2)
 1001fd0:	b447883a 	add	r3,r22,r17
 1001fd4:	bc45c83a 	sub	r2,r23,r17
 1001fd8:	e0c00215 	stw	r3,8(fp)
 1001fdc:	10800054 	ori	r2,r2,1
 1001fe0:	18800115 	stw	r2,4(r3)
 1001fe4:	b0800117 	ldw	r2,4(r22)
 1001fe8:	a009883a 	mov	r4,r20
 1001fec:	1080004c 	andi	r2,r2,1
 1001ff0:	1462b03a 	or	r17,r2,r17
 1001ff4:	b4400115 	stw	r17,4(r22)
 1001ff8:	10039900 	call	1003990 <__malloc_unlock>
 1001ffc:	9005883a 	mov	r2,r18
 1002000:	003f4006 	br	1001d04 <__alt_data_end+0xff001d04>
 1002004:	a8c00217 	ldw	r3,8(r21)
 1002008:	90c00215 	stw	r3,8(r18)
 100200c:	a8c00317 	ldw	r3,12(r21)
 1002010:	90c00315 	stw	r3,12(r18)
 1002014:	30801126 	beq	r6,r2,100205c <_realloc_r+0x4c8>
 1002018:	90800404 	addi	r2,r18,16
 100201c:	a8c00404 	addi	r3,r21,16
 1002020:	003f1906 	br	1001c88 <__alt_data_end+0xff001c88>
 1002024:	90ffff17 	ldw	r3,-4(r18)
 1002028:	00bfff04 	movi	r2,-4
 100202c:	a825883a 	mov	r18,r21
 1002030:	1884703a 	and	r2,r3,r2
 1002034:	80a1883a 	add	r16,r16,r2
 1002038:	003f2406 	br	1001ccc <__alt_data_end+0xff001ccc>
 100203c:	a8800217 	ldw	r2,8(r21)
 1002040:	b0800415 	stw	r2,16(r22)
 1002044:	a8800317 	ldw	r2,12(r21)
 1002048:	b0800515 	stw	r2,20(r22)
 100204c:	31000a26 	beq	r6,r4,1002078 <_realloc_r+0x4e4>
 1002050:	b0800604 	addi	r2,r22,24
 1002054:	ad400404 	addi	r21,r21,16
 1002058:	003fa906 	br	1001f00 <__alt_data_end+0xff001f00>
 100205c:	a9000417 	ldw	r4,16(r21)
 1002060:	90800604 	addi	r2,r18,24
 1002064:	a8c00604 	addi	r3,r21,24
 1002068:	91000415 	stw	r4,16(r18)
 100206c:	a9000517 	ldw	r4,20(r21)
 1002070:	91000515 	stw	r4,20(r18)
 1002074:	003f0406 	br	1001c88 <__alt_data_end+0xff001c88>
 1002078:	a8c00417 	ldw	r3,16(r21)
 100207c:	ad400604 	addi	r21,r21,24
 1002080:	b0800804 	addi	r2,r22,32
 1002084:	b0c00615 	stw	r3,24(r22)
 1002088:	a8ffff17 	ldw	r3,-4(r21)
 100208c:	b0c00715 	stw	r3,28(r22)
 1002090:	003f9b06 	br	1001f00 <__alt_data_end+0xff001f00>
 1002094:	9005883a 	mov	r2,r18
 1002098:	003fc706 	br	1001fb8 <__alt_data_end+0xff001fb8>
 100209c:	a80b883a 	mov	r5,r21
 10020a0:	9009883a 	mov	r4,r18
 10020a4:	10019100 	call	1001910 <memmove>
 10020a8:	003fc906 	br	1001fd0 <__alt_data_end+0xff001fd0>
 10020ac:	a8800217 	ldw	r2,8(r21)
 10020b0:	b0800415 	stw	r2,16(r22)
 10020b4:	a8800317 	ldw	r2,12(r21)
 10020b8:	b0800515 	stw	r2,20(r22)
 10020bc:	31000726 	beq	r6,r4,10020dc <_realloc_r+0x548>
 10020c0:	b0800604 	addi	r2,r22,24
 10020c4:	ad400404 	addi	r21,r21,16
 10020c8:	003fbb06 	br	1001fb8 <__alt_data_end+0xff001fb8>
 10020cc:	a009883a 	mov	r4,r20
 10020d0:	10039900 	call	1003990 <__malloc_unlock>
 10020d4:	0005883a 	mov	r2,zero
 10020d8:	003f0a06 	br	1001d04 <__alt_data_end+0xff001d04>
 10020dc:	a8c00417 	ldw	r3,16(r21)
 10020e0:	ad400604 	addi	r21,r21,24
 10020e4:	b0800804 	addi	r2,r22,32
 10020e8:	b0c00615 	stw	r3,24(r22)
 10020ec:	a8ffff17 	ldw	r3,-4(r21)
 10020f0:	b0c00715 	stw	r3,28(r22)
 10020f4:	003fb006 	br	1001fb8 <__alt_data_end+0xff001fb8>

010020f8 <_sbrk_r>:
 10020f8:	defffd04 	addi	sp,sp,-12
 10020fc:	dc000015 	stw	r16,0(sp)
 1002100:	04004074 	movhi	r16,257
 1002104:	dc400115 	stw	r17,4(sp)
 1002108:	84238d04 	addi	r16,r16,-29132
 100210c:	2023883a 	mov	r17,r4
 1002110:	2809883a 	mov	r4,r5
 1002114:	dfc00215 	stw	ra,8(sp)
 1002118:	80000015 	stw	zero,0(r16)
 100211c:	1003b500 	call	1003b50 <sbrk>
 1002120:	00ffffc4 	movi	r3,-1
 1002124:	10c00526 	beq	r2,r3,100213c <_sbrk_r+0x44>
 1002128:	dfc00217 	ldw	ra,8(sp)
 100212c:	dc400117 	ldw	r17,4(sp)
 1002130:	dc000017 	ldw	r16,0(sp)
 1002134:	dec00304 	addi	sp,sp,12
 1002138:	f800283a 	ret
 100213c:	80c00017 	ldw	r3,0(r16)
 1002140:	183ff926 	beq	r3,zero,1002128 <__alt_data_end+0xff002128>
 1002144:	88c00015 	stw	r3,0(r17)
 1002148:	003ff706 	br	1002128 <__alt_data_end+0xff002128>

0100214c <__sread>:
 100214c:	defffe04 	addi	sp,sp,-8
 1002150:	dc000015 	stw	r16,0(sp)
 1002154:	2821883a 	mov	r16,r5
 1002158:	2940038f 	ldh	r5,14(r5)
 100215c:	dfc00115 	stw	ra,4(sp)
 1002160:	1002e8c0 	call	1002e8c <_read_r>
 1002164:	10000716 	blt	r2,zero,1002184 <__sread+0x38>
 1002168:	80c01417 	ldw	r3,80(r16)
 100216c:	1887883a 	add	r3,r3,r2
 1002170:	80c01415 	stw	r3,80(r16)
 1002174:	dfc00117 	ldw	ra,4(sp)
 1002178:	dc000017 	ldw	r16,0(sp)
 100217c:	dec00204 	addi	sp,sp,8
 1002180:	f800283a 	ret
 1002184:	80c0030b 	ldhu	r3,12(r16)
 1002188:	18fbffcc 	andi	r3,r3,61439
 100218c:	80c0030d 	sth	r3,12(r16)
 1002190:	dfc00117 	ldw	ra,4(sp)
 1002194:	dc000017 	ldw	r16,0(sp)
 1002198:	dec00204 	addi	sp,sp,8
 100219c:	f800283a 	ret

010021a0 <__seofread>:
 10021a0:	0005883a 	mov	r2,zero
 10021a4:	f800283a 	ret

010021a8 <__swrite>:
 10021a8:	2880030b 	ldhu	r2,12(r5)
 10021ac:	defffb04 	addi	sp,sp,-20
 10021b0:	dcc00315 	stw	r19,12(sp)
 10021b4:	dc800215 	stw	r18,8(sp)
 10021b8:	dc400115 	stw	r17,4(sp)
 10021bc:	dc000015 	stw	r16,0(sp)
 10021c0:	dfc00415 	stw	ra,16(sp)
 10021c4:	10c0400c 	andi	r3,r2,256
 10021c8:	2821883a 	mov	r16,r5
 10021cc:	2023883a 	mov	r17,r4
 10021d0:	3025883a 	mov	r18,r6
 10021d4:	3827883a 	mov	r19,r7
 10021d8:	18000526 	beq	r3,zero,10021f0 <__swrite+0x48>
 10021dc:	2940038f 	ldh	r5,14(r5)
 10021e0:	01c00084 	movi	r7,2
 10021e4:	000d883a 	mov	r6,zero
 10021e8:	1002c700 	call	1002c70 <_lseek_r>
 10021ec:	8080030b 	ldhu	r2,12(r16)
 10021f0:	8140038f 	ldh	r5,14(r16)
 10021f4:	10bbffcc 	andi	r2,r2,61439
 10021f8:	980f883a 	mov	r7,r19
 10021fc:	900d883a 	mov	r6,r18
 1002200:	8809883a 	mov	r4,r17
 1002204:	8080030d 	sth	r2,12(r16)
 1002208:	dfc00417 	ldw	ra,16(sp)
 100220c:	dcc00317 	ldw	r19,12(sp)
 1002210:	dc800217 	ldw	r18,8(sp)
 1002214:	dc400117 	ldw	r17,4(sp)
 1002218:	dc000017 	ldw	r16,0(sp)
 100221c:	dec00504 	addi	sp,sp,20
 1002220:	10022881 	jmpi	1002288 <_write_r>

01002224 <__sseek>:
 1002224:	defffe04 	addi	sp,sp,-8
 1002228:	dc000015 	stw	r16,0(sp)
 100222c:	2821883a 	mov	r16,r5
 1002230:	2940038f 	ldh	r5,14(r5)
 1002234:	dfc00115 	stw	ra,4(sp)
 1002238:	1002c700 	call	1002c70 <_lseek_r>
 100223c:	00ffffc4 	movi	r3,-1
 1002240:	10c00826 	beq	r2,r3,1002264 <__sseek+0x40>
 1002244:	80c0030b 	ldhu	r3,12(r16)
 1002248:	80801415 	stw	r2,80(r16)
 100224c:	18c40014 	ori	r3,r3,4096
 1002250:	80c0030d 	sth	r3,12(r16)
 1002254:	dfc00117 	ldw	ra,4(sp)
 1002258:	dc000017 	ldw	r16,0(sp)
 100225c:	dec00204 	addi	sp,sp,8
 1002260:	f800283a 	ret
 1002264:	80c0030b 	ldhu	r3,12(r16)
 1002268:	18fbffcc 	andi	r3,r3,61439
 100226c:	80c0030d 	sth	r3,12(r16)
 1002270:	dfc00117 	ldw	ra,4(sp)
 1002274:	dc000017 	ldw	r16,0(sp)
 1002278:	dec00204 	addi	sp,sp,8
 100227c:	f800283a 	ret

01002280 <__sclose>:
 1002280:	2940038f 	ldh	r5,14(r5)
 1002284:	100243c1 	jmpi	100243c <_close_r>

01002288 <_write_r>:
 1002288:	defffd04 	addi	sp,sp,-12
 100228c:	2805883a 	mov	r2,r5
 1002290:	dc000015 	stw	r16,0(sp)
 1002294:	04004074 	movhi	r16,257
 1002298:	dc400115 	stw	r17,4(sp)
 100229c:	300b883a 	mov	r5,r6
 10022a0:	84238d04 	addi	r16,r16,-29132
 10022a4:	2023883a 	mov	r17,r4
 10022a8:	380d883a 	mov	r6,r7
 10022ac:	1009883a 	mov	r4,r2
 10022b0:	dfc00215 	stw	ra,8(sp)
 10022b4:	80000015 	stw	zero,0(r16)
 10022b8:	1003c3c0 	call	1003c3c <write>
 10022bc:	00ffffc4 	movi	r3,-1
 10022c0:	10c00526 	beq	r2,r3,10022d8 <_write_r+0x50>
 10022c4:	dfc00217 	ldw	ra,8(sp)
 10022c8:	dc400117 	ldw	r17,4(sp)
 10022cc:	dc000017 	ldw	r16,0(sp)
 10022d0:	dec00304 	addi	sp,sp,12
 10022d4:	f800283a 	ret
 10022d8:	80c00017 	ldw	r3,0(r16)
 10022dc:	183ff926 	beq	r3,zero,10022c4 <__alt_data_end+0xff0022c4>
 10022e0:	88c00015 	stw	r3,0(r17)
 10022e4:	003ff706 	br	10022c4 <__alt_data_end+0xff0022c4>

010022e8 <__swsetup_r>:
 10022e8:	00804034 	movhi	r2,256
 10022ec:	defffd04 	addi	sp,sp,-12
 10022f0:	109ce104 	addi	r2,r2,29572
 10022f4:	dc400115 	stw	r17,4(sp)
 10022f8:	2023883a 	mov	r17,r4
 10022fc:	11000017 	ldw	r4,0(r2)
 1002300:	dc000015 	stw	r16,0(sp)
 1002304:	dfc00215 	stw	ra,8(sp)
 1002308:	2821883a 	mov	r16,r5
 100230c:	20000226 	beq	r4,zero,1002318 <__swsetup_r+0x30>
 1002310:	20800e17 	ldw	r2,56(r4)
 1002314:	10003126 	beq	r2,zero,10023dc <__swsetup_r+0xf4>
 1002318:	8080030b 	ldhu	r2,12(r16)
 100231c:	10c0020c 	andi	r3,r2,8
 1002320:	1009883a 	mov	r4,r2
 1002324:	18000f26 	beq	r3,zero,1002364 <__swsetup_r+0x7c>
 1002328:	80c00417 	ldw	r3,16(r16)
 100232c:	18001526 	beq	r3,zero,1002384 <__swsetup_r+0x9c>
 1002330:	1100004c 	andi	r4,r2,1
 1002334:	20001c1e 	bne	r4,zero,10023a8 <__swsetup_r+0xc0>
 1002338:	1080008c 	andi	r2,r2,2
 100233c:	1000291e 	bne	r2,zero,10023e4 <__swsetup_r+0xfc>
 1002340:	80800517 	ldw	r2,20(r16)
 1002344:	80800215 	stw	r2,8(r16)
 1002348:	18001c26 	beq	r3,zero,10023bc <__swsetup_r+0xd4>
 100234c:	0005883a 	mov	r2,zero
 1002350:	dfc00217 	ldw	ra,8(sp)
 1002354:	dc400117 	ldw	r17,4(sp)
 1002358:	dc000017 	ldw	r16,0(sp)
 100235c:	dec00304 	addi	sp,sp,12
 1002360:	f800283a 	ret
 1002364:	2080040c 	andi	r2,r4,16
 1002368:	10002e26 	beq	r2,zero,1002424 <__swsetup_r+0x13c>
 100236c:	2080010c 	andi	r2,r4,4
 1002370:	10001e1e 	bne	r2,zero,10023ec <__swsetup_r+0x104>
 1002374:	80c00417 	ldw	r3,16(r16)
 1002378:	20800214 	ori	r2,r4,8
 100237c:	8080030d 	sth	r2,12(r16)
 1002380:	183feb1e 	bne	r3,zero,1002330 <__alt_data_end+0xff002330>
 1002384:	1100a00c 	andi	r4,r2,640
 1002388:	01408004 	movi	r5,512
 100238c:	217fe826 	beq	r4,r5,1002330 <__alt_data_end+0xff002330>
 1002390:	800b883a 	mov	r5,r16
 1002394:	8809883a 	mov	r4,r17
 1002398:	1002cd00 	call	1002cd0 <__smakebuf_r>
 100239c:	8080030b 	ldhu	r2,12(r16)
 10023a0:	80c00417 	ldw	r3,16(r16)
 10023a4:	003fe206 	br	1002330 <__alt_data_end+0xff002330>
 10023a8:	80800517 	ldw	r2,20(r16)
 10023ac:	80000215 	stw	zero,8(r16)
 10023b0:	0085c83a 	sub	r2,zero,r2
 10023b4:	80800615 	stw	r2,24(r16)
 10023b8:	183fe41e 	bne	r3,zero,100234c <__alt_data_end+0xff00234c>
 10023bc:	80c0030b 	ldhu	r3,12(r16)
 10023c0:	0005883a 	mov	r2,zero
 10023c4:	1900200c 	andi	r4,r3,128
 10023c8:	203fe126 	beq	r4,zero,1002350 <__alt_data_end+0xff002350>
 10023cc:	18c01014 	ori	r3,r3,64
 10023d0:	80c0030d 	sth	r3,12(r16)
 10023d4:	00bfffc4 	movi	r2,-1
 10023d8:	003fdd06 	br	1002350 <__alt_data_end+0xff002350>
 10023dc:	10008440 	call	1000844 <__sinit>
 10023e0:	003fcd06 	br	1002318 <__alt_data_end+0xff002318>
 10023e4:	0005883a 	mov	r2,zero
 10023e8:	003fd606 	br	1002344 <__alt_data_end+0xff002344>
 10023ec:	81400c17 	ldw	r5,48(r16)
 10023f0:	28000626 	beq	r5,zero,100240c <__swsetup_r+0x124>
 10023f4:	80801004 	addi	r2,r16,64
 10023f8:	28800326 	beq	r5,r2,1002408 <__swsetup_r+0x120>
 10023fc:	8809883a 	mov	r4,r17
 1002400:	10029600 	call	1002960 <_free_r>
 1002404:	8100030b 	ldhu	r4,12(r16)
 1002408:	80000c15 	stw	zero,48(r16)
 100240c:	80c00417 	ldw	r3,16(r16)
 1002410:	00bff6c4 	movi	r2,-37
 1002414:	1108703a 	and	r4,r2,r4
 1002418:	80000115 	stw	zero,4(r16)
 100241c:	80c00015 	stw	r3,0(r16)
 1002420:	003fd506 	br	1002378 <__alt_data_end+0xff002378>
 1002424:	00800244 	movi	r2,9
 1002428:	88800015 	stw	r2,0(r17)
 100242c:	20801014 	ori	r2,r4,64
 1002430:	8080030d 	sth	r2,12(r16)
 1002434:	00bfffc4 	movi	r2,-1
 1002438:	003fc506 	br	1002350 <__alt_data_end+0xff002350>

0100243c <_close_r>:
 100243c:	defffd04 	addi	sp,sp,-12
 1002440:	dc000015 	stw	r16,0(sp)
 1002444:	04004074 	movhi	r16,257
 1002448:	dc400115 	stw	r17,4(sp)
 100244c:	84238d04 	addi	r16,r16,-29132
 1002450:	2023883a 	mov	r17,r4
 1002454:	2809883a 	mov	r4,r5
 1002458:	dfc00215 	stw	ra,8(sp)
 100245c:	80000015 	stw	zero,0(r16)
 1002460:	100318c0 	call	100318c <close>
 1002464:	00ffffc4 	movi	r3,-1
 1002468:	10c00526 	beq	r2,r3,1002480 <_close_r+0x44>
 100246c:	dfc00217 	ldw	ra,8(sp)
 1002470:	dc400117 	ldw	r17,4(sp)
 1002474:	dc000017 	ldw	r16,0(sp)
 1002478:	dec00304 	addi	sp,sp,12
 100247c:	f800283a 	ret
 1002480:	80c00017 	ldw	r3,0(r16)
 1002484:	183ff926 	beq	r3,zero,100246c <__alt_data_end+0xff00246c>
 1002488:	88c00015 	stw	r3,0(r17)
 100248c:	003ff706 	br	100246c <__alt_data_end+0xff00246c>

01002490 <_fclose_r>:
 1002490:	28003926 	beq	r5,zero,1002578 <_fclose_r+0xe8>
 1002494:	defffc04 	addi	sp,sp,-16
 1002498:	dc400115 	stw	r17,4(sp)
 100249c:	dc000015 	stw	r16,0(sp)
 10024a0:	dfc00315 	stw	ra,12(sp)
 10024a4:	dc800215 	stw	r18,8(sp)
 10024a8:	2023883a 	mov	r17,r4
 10024ac:	2821883a 	mov	r16,r5
 10024b0:	20000226 	beq	r4,zero,10024bc <_fclose_r+0x2c>
 10024b4:	20800e17 	ldw	r2,56(r4)
 10024b8:	10002726 	beq	r2,zero,1002558 <_fclose_r+0xc8>
 10024bc:	8080030f 	ldh	r2,12(r16)
 10024c0:	1000071e 	bne	r2,zero,10024e0 <_fclose_r+0x50>
 10024c4:	0005883a 	mov	r2,zero
 10024c8:	dfc00317 	ldw	ra,12(sp)
 10024cc:	dc800217 	ldw	r18,8(sp)
 10024d0:	dc400117 	ldw	r17,4(sp)
 10024d4:	dc000017 	ldw	r16,0(sp)
 10024d8:	dec00404 	addi	sp,sp,16
 10024dc:	f800283a 	ret
 10024e0:	800b883a 	mov	r5,r16
 10024e4:	8809883a 	mov	r4,r17
 10024e8:	10025940 	call	1002594 <__sflush_r>
 10024ec:	1025883a 	mov	r18,r2
 10024f0:	80800b17 	ldw	r2,44(r16)
 10024f4:	10000426 	beq	r2,zero,1002508 <_fclose_r+0x78>
 10024f8:	81400717 	ldw	r5,28(r16)
 10024fc:	8809883a 	mov	r4,r17
 1002500:	103ee83a 	callr	r2
 1002504:	10001616 	blt	r2,zero,1002560 <_fclose_r+0xd0>
 1002508:	8080030b 	ldhu	r2,12(r16)
 100250c:	1080200c 	andi	r2,r2,128
 1002510:	1000151e 	bne	r2,zero,1002568 <_fclose_r+0xd8>
 1002514:	81400c17 	ldw	r5,48(r16)
 1002518:	28000526 	beq	r5,zero,1002530 <_fclose_r+0xa0>
 100251c:	80801004 	addi	r2,r16,64
 1002520:	28800226 	beq	r5,r2,100252c <_fclose_r+0x9c>
 1002524:	8809883a 	mov	r4,r17
 1002528:	10029600 	call	1002960 <_free_r>
 100252c:	80000c15 	stw	zero,48(r16)
 1002530:	81401117 	ldw	r5,68(r16)
 1002534:	28000326 	beq	r5,zero,1002544 <_fclose_r+0xb4>
 1002538:	8809883a 	mov	r4,r17
 100253c:	10029600 	call	1002960 <_free_r>
 1002540:	80001115 	stw	zero,68(r16)
 1002544:	10008540 	call	1000854 <__sfp_lock_acquire>
 1002548:	8000030d 	sth	zero,12(r16)
 100254c:	10008580 	call	1000858 <__sfp_lock_release>
 1002550:	9005883a 	mov	r2,r18
 1002554:	003fdc06 	br	10024c8 <__alt_data_end+0xff0024c8>
 1002558:	10008440 	call	1000844 <__sinit>
 100255c:	003fd706 	br	10024bc <__alt_data_end+0xff0024bc>
 1002560:	04bfffc4 	movi	r18,-1
 1002564:	003fe806 	br	1002508 <__alt_data_end+0xff002508>
 1002568:	81400417 	ldw	r5,16(r16)
 100256c:	8809883a 	mov	r4,r17
 1002570:	10029600 	call	1002960 <_free_r>
 1002574:	003fe706 	br	1002514 <__alt_data_end+0xff002514>
 1002578:	0005883a 	mov	r2,zero
 100257c:	f800283a 	ret

01002580 <fclose>:
 1002580:	00804034 	movhi	r2,256
 1002584:	109ce104 	addi	r2,r2,29572
 1002588:	200b883a 	mov	r5,r4
 100258c:	11000017 	ldw	r4,0(r2)
 1002590:	10024901 	jmpi	1002490 <_fclose_r>

01002594 <__sflush_r>:
 1002594:	2880030b 	ldhu	r2,12(r5)
 1002598:	defffb04 	addi	sp,sp,-20
 100259c:	dcc00315 	stw	r19,12(sp)
 10025a0:	dc400115 	stw	r17,4(sp)
 10025a4:	dfc00415 	stw	ra,16(sp)
 10025a8:	dc800215 	stw	r18,8(sp)
 10025ac:	dc000015 	stw	r16,0(sp)
 10025b0:	10c0020c 	andi	r3,r2,8
 10025b4:	2823883a 	mov	r17,r5
 10025b8:	2027883a 	mov	r19,r4
 10025bc:	1800311e 	bne	r3,zero,1002684 <__sflush_r+0xf0>
 10025c0:	28c00117 	ldw	r3,4(r5)
 10025c4:	10820014 	ori	r2,r2,2048
 10025c8:	2880030d 	sth	r2,12(r5)
 10025cc:	00c04b0e 	bge	zero,r3,10026fc <__sflush_r+0x168>
 10025d0:	8a000a17 	ldw	r8,40(r17)
 10025d4:	40002326 	beq	r8,zero,1002664 <__sflush_r+0xd0>
 10025d8:	9c000017 	ldw	r16,0(r19)
 10025dc:	10c4000c 	andi	r3,r2,4096
 10025e0:	98000015 	stw	zero,0(r19)
 10025e4:	18004826 	beq	r3,zero,1002708 <__sflush_r+0x174>
 10025e8:	89801417 	ldw	r6,80(r17)
 10025ec:	10c0010c 	andi	r3,r2,4
 10025f0:	18000626 	beq	r3,zero,100260c <__sflush_r+0x78>
 10025f4:	88c00117 	ldw	r3,4(r17)
 10025f8:	88800c17 	ldw	r2,48(r17)
 10025fc:	30cdc83a 	sub	r6,r6,r3
 1002600:	10000226 	beq	r2,zero,100260c <__sflush_r+0x78>
 1002604:	88800f17 	ldw	r2,60(r17)
 1002608:	308dc83a 	sub	r6,r6,r2
 100260c:	89400717 	ldw	r5,28(r17)
 1002610:	000f883a 	mov	r7,zero
 1002614:	9809883a 	mov	r4,r19
 1002618:	403ee83a 	callr	r8
 100261c:	00ffffc4 	movi	r3,-1
 1002620:	10c04426 	beq	r2,r3,1002734 <__sflush_r+0x1a0>
 1002624:	88c0030b 	ldhu	r3,12(r17)
 1002628:	89000417 	ldw	r4,16(r17)
 100262c:	88000115 	stw	zero,4(r17)
 1002630:	197dffcc 	andi	r5,r3,63487
 1002634:	8940030d 	sth	r5,12(r17)
 1002638:	89000015 	stw	r4,0(r17)
 100263c:	18c4000c 	andi	r3,r3,4096
 1002640:	18002c1e 	bne	r3,zero,10026f4 <__sflush_r+0x160>
 1002644:	89400c17 	ldw	r5,48(r17)
 1002648:	9c000015 	stw	r16,0(r19)
 100264c:	28000526 	beq	r5,zero,1002664 <__sflush_r+0xd0>
 1002650:	88801004 	addi	r2,r17,64
 1002654:	28800226 	beq	r5,r2,1002660 <__sflush_r+0xcc>
 1002658:	9809883a 	mov	r4,r19
 100265c:	10029600 	call	1002960 <_free_r>
 1002660:	88000c15 	stw	zero,48(r17)
 1002664:	0005883a 	mov	r2,zero
 1002668:	dfc00417 	ldw	ra,16(sp)
 100266c:	dcc00317 	ldw	r19,12(sp)
 1002670:	dc800217 	ldw	r18,8(sp)
 1002674:	dc400117 	ldw	r17,4(sp)
 1002678:	dc000017 	ldw	r16,0(sp)
 100267c:	dec00504 	addi	sp,sp,20
 1002680:	f800283a 	ret
 1002684:	2c800417 	ldw	r18,16(r5)
 1002688:	903ff626 	beq	r18,zero,1002664 <__alt_data_end+0xff002664>
 100268c:	2c000017 	ldw	r16,0(r5)
 1002690:	108000cc 	andi	r2,r2,3
 1002694:	2c800015 	stw	r18,0(r5)
 1002698:	84a1c83a 	sub	r16,r16,r18
 100269c:	1000131e 	bne	r2,zero,10026ec <__sflush_r+0x158>
 10026a0:	28800517 	ldw	r2,20(r5)
 10026a4:	88800215 	stw	r2,8(r17)
 10026a8:	04000316 	blt	zero,r16,10026b8 <__sflush_r+0x124>
 10026ac:	003fed06 	br	1002664 <__alt_data_end+0xff002664>
 10026b0:	90a5883a 	add	r18,r18,r2
 10026b4:	043feb0e 	bge	zero,r16,1002664 <__alt_data_end+0xff002664>
 10026b8:	88800917 	ldw	r2,36(r17)
 10026bc:	89400717 	ldw	r5,28(r17)
 10026c0:	800f883a 	mov	r7,r16
 10026c4:	900d883a 	mov	r6,r18
 10026c8:	9809883a 	mov	r4,r19
 10026cc:	103ee83a 	callr	r2
 10026d0:	80a1c83a 	sub	r16,r16,r2
 10026d4:	00bff616 	blt	zero,r2,10026b0 <__alt_data_end+0xff0026b0>
 10026d8:	88c0030b 	ldhu	r3,12(r17)
 10026dc:	00bfffc4 	movi	r2,-1
 10026e0:	18c01014 	ori	r3,r3,64
 10026e4:	88c0030d 	sth	r3,12(r17)
 10026e8:	003fdf06 	br	1002668 <__alt_data_end+0xff002668>
 10026ec:	0005883a 	mov	r2,zero
 10026f0:	003fec06 	br	10026a4 <__alt_data_end+0xff0026a4>
 10026f4:	88801415 	stw	r2,80(r17)
 10026f8:	003fd206 	br	1002644 <__alt_data_end+0xff002644>
 10026fc:	28c00f17 	ldw	r3,60(r5)
 1002700:	00ffb316 	blt	zero,r3,10025d0 <__alt_data_end+0xff0025d0>
 1002704:	003fd706 	br	1002664 <__alt_data_end+0xff002664>
 1002708:	89400717 	ldw	r5,28(r17)
 100270c:	000d883a 	mov	r6,zero
 1002710:	01c00044 	movi	r7,1
 1002714:	9809883a 	mov	r4,r19
 1002718:	403ee83a 	callr	r8
 100271c:	100d883a 	mov	r6,r2
 1002720:	00bfffc4 	movi	r2,-1
 1002724:	30801426 	beq	r6,r2,1002778 <__sflush_r+0x1e4>
 1002728:	8880030b 	ldhu	r2,12(r17)
 100272c:	8a000a17 	ldw	r8,40(r17)
 1002730:	003fae06 	br	10025ec <__alt_data_end+0xff0025ec>
 1002734:	98c00017 	ldw	r3,0(r19)
 1002738:	183fba26 	beq	r3,zero,1002624 <__alt_data_end+0xff002624>
 100273c:	01000744 	movi	r4,29
 1002740:	19000626 	beq	r3,r4,100275c <__sflush_r+0x1c8>
 1002744:	01000584 	movi	r4,22
 1002748:	19000426 	beq	r3,r4,100275c <__sflush_r+0x1c8>
 100274c:	88c0030b 	ldhu	r3,12(r17)
 1002750:	18c01014 	ori	r3,r3,64
 1002754:	88c0030d 	sth	r3,12(r17)
 1002758:	003fc306 	br	1002668 <__alt_data_end+0xff002668>
 100275c:	8880030b 	ldhu	r2,12(r17)
 1002760:	88c00417 	ldw	r3,16(r17)
 1002764:	88000115 	stw	zero,4(r17)
 1002768:	10bdffcc 	andi	r2,r2,63487
 100276c:	8880030d 	sth	r2,12(r17)
 1002770:	88c00015 	stw	r3,0(r17)
 1002774:	003fb306 	br	1002644 <__alt_data_end+0xff002644>
 1002778:	98800017 	ldw	r2,0(r19)
 100277c:	103fea26 	beq	r2,zero,1002728 <__alt_data_end+0xff002728>
 1002780:	00c00744 	movi	r3,29
 1002784:	10c00226 	beq	r2,r3,1002790 <__sflush_r+0x1fc>
 1002788:	00c00584 	movi	r3,22
 100278c:	10c0031e 	bne	r2,r3,100279c <__sflush_r+0x208>
 1002790:	9c000015 	stw	r16,0(r19)
 1002794:	0005883a 	mov	r2,zero
 1002798:	003fb306 	br	1002668 <__alt_data_end+0xff002668>
 100279c:	88c0030b 	ldhu	r3,12(r17)
 10027a0:	3005883a 	mov	r2,r6
 10027a4:	18c01014 	ori	r3,r3,64
 10027a8:	88c0030d 	sth	r3,12(r17)
 10027ac:	003fae06 	br	1002668 <__alt_data_end+0xff002668>

010027b0 <_fflush_r>:
 10027b0:	defffd04 	addi	sp,sp,-12
 10027b4:	dc000115 	stw	r16,4(sp)
 10027b8:	dfc00215 	stw	ra,8(sp)
 10027bc:	2021883a 	mov	r16,r4
 10027c0:	20000226 	beq	r4,zero,10027cc <_fflush_r+0x1c>
 10027c4:	20800e17 	ldw	r2,56(r4)
 10027c8:	10000c26 	beq	r2,zero,10027fc <_fflush_r+0x4c>
 10027cc:	2880030f 	ldh	r2,12(r5)
 10027d0:	1000051e 	bne	r2,zero,10027e8 <_fflush_r+0x38>
 10027d4:	0005883a 	mov	r2,zero
 10027d8:	dfc00217 	ldw	ra,8(sp)
 10027dc:	dc000117 	ldw	r16,4(sp)
 10027e0:	dec00304 	addi	sp,sp,12
 10027e4:	f800283a 	ret
 10027e8:	8009883a 	mov	r4,r16
 10027ec:	dfc00217 	ldw	ra,8(sp)
 10027f0:	dc000117 	ldw	r16,4(sp)
 10027f4:	dec00304 	addi	sp,sp,12
 10027f8:	10025941 	jmpi	1002594 <__sflush_r>
 10027fc:	d9400015 	stw	r5,0(sp)
 1002800:	10008440 	call	1000844 <__sinit>
 1002804:	d9400017 	ldw	r5,0(sp)
 1002808:	003ff006 	br	10027cc <__alt_data_end+0xff0027cc>

0100280c <fflush>:
 100280c:	20000526 	beq	r4,zero,1002824 <fflush+0x18>
 1002810:	00804034 	movhi	r2,256
 1002814:	109ce104 	addi	r2,r2,29572
 1002818:	200b883a 	mov	r5,r4
 100281c:	11000017 	ldw	r4,0(r2)
 1002820:	10027b01 	jmpi	10027b0 <_fflush_r>
 1002824:	00804034 	movhi	r2,256
 1002828:	109ce004 	addi	r2,r2,29568
 100282c:	11000017 	ldw	r4,0(r2)
 1002830:	01404034 	movhi	r5,256
 1002834:	2949ec04 	addi	r5,r5,10160
 1002838:	1000e141 	jmpi	1000e14 <_fwalk_reent>

0100283c <_malloc_trim_r>:
 100283c:	defffb04 	addi	sp,sp,-20
 1002840:	dcc00315 	stw	r19,12(sp)
 1002844:	04c04034 	movhi	r19,256
 1002848:	dc800215 	stw	r18,8(sp)
 100284c:	dc400115 	stw	r17,4(sp)
 1002850:	dc000015 	stw	r16,0(sp)
 1002854:	dfc00415 	stw	ra,16(sp)
 1002858:	2821883a 	mov	r16,r5
 100285c:	9cd75c04 	addi	r19,r19,23920
 1002860:	2025883a 	mov	r18,r4
 1002864:	100396c0 	call	100396c <__malloc_lock>
 1002868:	98800217 	ldw	r2,8(r19)
 100286c:	14400117 	ldw	r17,4(r2)
 1002870:	00bfff04 	movi	r2,-4
 1002874:	88a2703a 	and	r17,r17,r2
 1002878:	8c21c83a 	sub	r16,r17,r16
 100287c:	8403fbc4 	addi	r16,r16,4079
 1002880:	8020d33a 	srli	r16,r16,12
 1002884:	0083ffc4 	movi	r2,4095
 1002888:	843fffc4 	addi	r16,r16,-1
 100288c:	8020933a 	slli	r16,r16,12
 1002890:	1400060e 	bge	r2,r16,10028ac <_malloc_trim_r+0x70>
 1002894:	000b883a 	mov	r5,zero
 1002898:	9009883a 	mov	r4,r18
 100289c:	10020f80 	call	10020f8 <_sbrk_r>
 10028a0:	98c00217 	ldw	r3,8(r19)
 10028a4:	1c47883a 	add	r3,r3,r17
 10028a8:	10c00a26 	beq	r2,r3,10028d4 <_malloc_trim_r+0x98>
 10028ac:	9009883a 	mov	r4,r18
 10028b0:	10039900 	call	1003990 <__malloc_unlock>
 10028b4:	0005883a 	mov	r2,zero
 10028b8:	dfc00417 	ldw	ra,16(sp)
 10028bc:	dcc00317 	ldw	r19,12(sp)
 10028c0:	dc800217 	ldw	r18,8(sp)
 10028c4:	dc400117 	ldw	r17,4(sp)
 10028c8:	dc000017 	ldw	r16,0(sp)
 10028cc:	dec00504 	addi	sp,sp,20
 10028d0:	f800283a 	ret
 10028d4:	040bc83a 	sub	r5,zero,r16
 10028d8:	9009883a 	mov	r4,r18
 10028dc:	10020f80 	call	10020f8 <_sbrk_r>
 10028e0:	00ffffc4 	movi	r3,-1
 10028e4:	10c00d26 	beq	r2,r3,100291c <_malloc_trim_r+0xe0>
 10028e8:	00c04074 	movhi	r3,257
 10028ec:	18e39504 	addi	r3,r3,-29100
 10028f0:	18800017 	ldw	r2,0(r3)
 10028f4:	99000217 	ldw	r4,8(r19)
 10028f8:	8c23c83a 	sub	r17,r17,r16
 10028fc:	8c400054 	ori	r17,r17,1
 1002900:	1421c83a 	sub	r16,r2,r16
 1002904:	24400115 	stw	r17,4(r4)
 1002908:	9009883a 	mov	r4,r18
 100290c:	1c000015 	stw	r16,0(r3)
 1002910:	10039900 	call	1003990 <__malloc_unlock>
 1002914:	00800044 	movi	r2,1
 1002918:	003fe706 	br	10028b8 <__alt_data_end+0xff0028b8>
 100291c:	000b883a 	mov	r5,zero
 1002920:	9009883a 	mov	r4,r18
 1002924:	10020f80 	call	10020f8 <_sbrk_r>
 1002928:	99000217 	ldw	r4,8(r19)
 100292c:	014003c4 	movi	r5,15
 1002930:	1107c83a 	sub	r3,r2,r4
 1002934:	28ffdd0e 	bge	r5,r3,10028ac <__alt_data_end+0xff0028ac>
 1002938:	01404034 	movhi	r5,256
 100293c:	295ce204 	addi	r5,r5,29576
 1002940:	29400017 	ldw	r5,0(r5)
 1002944:	18c00054 	ori	r3,r3,1
 1002948:	20c00115 	stw	r3,4(r4)
 100294c:	00c04074 	movhi	r3,257
 1002950:	1145c83a 	sub	r2,r2,r5
 1002954:	18e39504 	addi	r3,r3,-29100
 1002958:	18800015 	stw	r2,0(r3)
 100295c:	003fd306 	br	10028ac <__alt_data_end+0xff0028ac>

01002960 <_free_r>:
 1002960:	28004126 	beq	r5,zero,1002a68 <_free_r+0x108>
 1002964:	defffd04 	addi	sp,sp,-12
 1002968:	dc400115 	stw	r17,4(sp)
 100296c:	dc000015 	stw	r16,0(sp)
 1002970:	2023883a 	mov	r17,r4
 1002974:	2821883a 	mov	r16,r5
 1002978:	dfc00215 	stw	ra,8(sp)
 100297c:	100396c0 	call	100396c <__malloc_lock>
 1002980:	81ffff17 	ldw	r7,-4(r16)
 1002984:	00bfff84 	movi	r2,-2
 1002988:	01004034 	movhi	r4,256
 100298c:	81bffe04 	addi	r6,r16,-8
 1002990:	3884703a 	and	r2,r7,r2
 1002994:	21175c04 	addi	r4,r4,23920
 1002998:	308b883a 	add	r5,r6,r2
 100299c:	2a400117 	ldw	r9,4(r5)
 10029a0:	22000217 	ldw	r8,8(r4)
 10029a4:	00ffff04 	movi	r3,-4
 10029a8:	48c6703a 	and	r3,r9,r3
 10029ac:	2a005726 	beq	r5,r8,1002b0c <_free_r+0x1ac>
 10029b0:	28c00115 	stw	r3,4(r5)
 10029b4:	39c0004c 	andi	r7,r7,1
 10029b8:	3800091e 	bne	r7,zero,10029e0 <_free_r+0x80>
 10029bc:	823ffe17 	ldw	r8,-8(r16)
 10029c0:	22400204 	addi	r9,r4,8
 10029c4:	320dc83a 	sub	r6,r6,r8
 10029c8:	31c00217 	ldw	r7,8(r6)
 10029cc:	1205883a 	add	r2,r2,r8
 10029d0:	3a406526 	beq	r7,r9,1002b68 <_free_r+0x208>
 10029d4:	32000317 	ldw	r8,12(r6)
 10029d8:	3a000315 	stw	r8,12(r7)
 10029dc:	41c00215 	stw	r7,8(r8)
 10029e0:	28cf883a 	add	r7,r5,r3
 10029e4:	39c00117 	ldw	r7,4(r7)
 10029e8:	39c0004c 	andi	r7,r7,1
 10029ec:	38003a26 	beq	r7,zero,1002ad8 <_free_r+0x178>
 10029f0:	10c00054 	ori	r3,r2,1
 10029f4:	30c00115 	stw	r3,4(r6)
 10029f8:	3087883a 	add	r3,r6,r2
 10029fc:	18800015 	stw	r2,0(r3)
 1002a00:	00c07fc4 	movi	r3,511
 1002a04:	18801936 	bltu	r3,r2,1002a6c <_free_r+0x10c>
 1002a08:	1004d0fa 	srli	r2,r2,3
 1002a0c:	01c00044 	movi	r7,1
 1002a10:	21400117 	ldw	r5,4(r4)
 1002a14:	10c00044 	addi	r3,r2,1
 1002a18:	18c7883a 	add	r3,r3,r3
 1002a1c:	1005d0ba 	srai	r2,r2,2
 1002a20:	18c7883a 	add	r3,r3,r3
 1002a24:	18c7883a 	add	r3,r3,r3
 1002a28:	1907883a 	add	r3,r3,r4
 1002a2c:	3884983a 	sll	r2,r7,r2
 1002a30:	19c00017 	ldw	r7,0(r3)
 1002a34:	1a3ffe04 	addi	r8,r3,-8
 1002a38:	1144b03a 	or	r2,r2,r5
 1002a3c:	32000315 	stw	r8,12(r6)
 1002a40:	31c00215 	stw	r7,8(r6)
 1002a44:	20800115 	stw	r2,4(r4)
 1002a48:	19800015 	stw	r6,0(r3)
 1002a4c:	39800315 	stw	r6,12(r7)
 1002a50:	8809883a 	mov	r4,r17
 1002a54:	dfc00217 	ldw	ra,8(sp)
 1002a58:	dc400117 	ldw	r17,4(sp)
 1002a5c:	dc000017 	ldw	r16,0(sp)
 1002a60:	dec00304 	addi	sp,sp,12
 1002a64:	10039901 	jmpi	1003990 <__malloc_unlock>
 1002a68:	f800283a 	ret
 1002a6c:	100ad27a 	srli	r5,r2,9
 1002a70:	00c00104 	movi	r3,4
 1002a74:	19404a36 	bltu	r3,r5,1002ba0 <_free_r+0x240>
 1002a78:	100ad1ba 	srli	r5,r2,6
 1002a7c:	28c00e44 	addi	r3,r5,57
 1002a80:	18c7883a 	add	r3,r3,r3
 1002a84:	29400e04 	addi	r5,r5,56
 1002a88:	18c7883a 	add	r3,r3,r3
 1002a8c:	18c7883a 	add	r3,r3,r3
 1002a90:	1909883a 	add	r4,r3,r4
 1002a94:	20c00017 	ldw	r3,0(r4)
 1002a98:	01c04034 	movhi	r7,256
 1002a9c:	213ffe04 	addi	r4,r4,-8
 1002aa0:	39d75c04 	addi	r7,r7,23920
 1002aa4:	20c04426 	beq	r4,r3,1002bb8 <_free_r+0x258>
 1002aa8:	01ffff04 	movi	r7,-4
 1002aac:	19400117 	ldw	r5,4(r3)
 1002ab0:	29ca703a 	and	r5,r5,r7
 1002ab4:	1140022e 	bgeu	r2,r5,1002ac0 <_free_r+0x160>
 1002ab8:	18c00217 	ldw	r3,8(r3)
 1002abc:	20fffb1e 	bne	r4,r3,1002aac <__alt_data_end+0xff002aac>
 1002ac0:	19000317 	ldw	r4,12(r3)
 1002ac4:	31000315 	stw	r4,12(r6)
 1002ac8:	30c00215 	stw	r3,8(r6)
 1002acc:	21800215 	stw	r6,8(r4)
 1002ad0:	19800315 	stw	r6,12(r3)
 1002ad4:	003fde06 	br	1002a50 <__alt_data_end+0xff002a50>
 1002ad8:	29c00217 	ldw	r7,8(r5)
 1002adc:	10c5883a 	add	r2,r2,r3
 1002ae0:	00c04034 	movhi	r3,256
 1002ae4:	18d75e04 	addi	r3,r3,23928
 1002ae8:	38c03b26 	beq	r7,r3,1002bd8 <_free_r+0x278>
 1002aec:	2a000317 	ldw	r8,12(r5)
 1002af0:	11400054 	ori	r5,r2,1
 1002af4:	3087883a 	add	r3,r6,r2
 1002af8:	3a000315 	stw	r8,12(r7)
 1002afc:	41c00215 	stw	r7,8(r8)
 1002b00:	31400115 	stw	r5,4(r6)
 1002b04:	18800015 	stw	r2,0(r3)
 1002b08:	003fbd06 	br	1002a00 <__alt_data_end+0xff002a00>
 1002b0c:	39c0004c 	andi	r7,r7,1
 1002b10:	10c5883a 	add	r2,r2,r3
 1002b14:	3800071e 	bne	r7,zero,1002b34 <_free_r+0x1d4>
 1002b18:	81fffe17 	ldw	r7,-8(r16)
 1002b1c:	31cdc83a 	sub	r6,r6,r7
 1002b20:	30c00317 	ldw	r3,12(r6)
 1002b24:	31400217 	ldw	r5,8(r6)
 1002b28:	11c5883a 	add	r2,r2,r7
 1002b2c:	28c00315 	stw	r3,12(r5)
 1002b30:	19400215 	stw	r5,8(r3)
 1002b34:	10c00054 	ori	r3,r2,1
 1002b38:	30c00115 	stw	r3,4(r6)
 1002b3c:	00c04034 	movhi	r3,256
 1002b40:	18dce304 	addi	r3,r3,29580
 1002b44:	18c00017 	ldw	r3,0(r3)
 1002b48:	21800215 	stw	r6,8(r4)
 1002b4c:	10ffc036 	bltu	r2,r3,1002a50 <__alt_data_end+0xff002a50>
 1002b50:	00804074 	movhi	r2,257
 1002b54:	10a38c04 	addi	r2,r2,-29136
 1002b58:	11400017 	ldw	r5,0(r2)
 1002b5c:	8809883a 	mov	r4,r17
 1002b60:	100283c0 	call	100283c <_malloc_trim_r>
 1002b64:	003fba06 	br	1002a50 <__alt_data_end+0xff002a50>
 1002b68:	28c9883a 	add	r4,r5,r3
 1002b6c:	21000117 	ldw	r4,4(r4)
 1002b70:	2100004c 	andi	r4,r4,1
 1002b74:	2000391e 	bne	r4,zero,1002c5c <_free_r+0x2fc>
 1002b78:	29c00217 	ldw	r7,8(r5)
 1002b7c:	29000317 	ldw	r4,12(r5)
 1002b80:	1885883a 	add	r2,r3,r2
 1002b84:	10c00054 	ori	r3,r2,1
 1002b88:	39000315 	stw	r4,12(r7)
 1002b8c:	21c00215 	stw	r7,8(r4)
 1002b90:	30c00115 	stw	r3,4(r6)
 1002b94:	308d883a 	add	r6,r6,r2
 1002b98:	30800015 	stw	r2,0(r6)
 1002b9c:	003fac06 	br	1002a50 <__alt_data_end+0xff002a50>
 1002ba0:	00c00504 	movi	r3,20
 1002ba4:	19401536 	bltu	r3,r5,1002bfc <_free_r+0x29c>
 1002ba8:	28c01704 	addi	r3,r5,92
 1002bac:	18c7883a 	add	r3,r3,r3
 1002bb0:	294016c4 	addi	r5,r5,91
 1002bb4:	003fb406 	br	1002a88 <__alt_data_end+0xff002a88>
 1002bb8:	280bd0ba 	srai	r5,r5,2
 1002bbc:	00c00044 	movi	r3,1
 1002bc0:	38800117 	ldw	r2,4(r7)
 1002bc4:	194a983a 	sll	r5,r3,r5
 1002bc8:	2007883a 	mov	r3,r4
 1002bcc:	2884b03a 	or	r2,r5,r2
 1002bd0:	38800115 	stw	r2,4(r7)
 1002bd4:	003fbb06 	br	1002ac4 <__alt_data_end+0xff002ac4>
 1002bd8:	21800515 	stw	r6,20(r4)
 1002bdc:	21800415 	stw	r6,16(r4)
 1002be0:	10c00054 	ori	r3,r2,1
 1002be4:	31c00315 	stw	r7,12(r6)
 1002be8:	31c00215 	stw	r7,8(r6)
 1002bec:	30c00115 	stw	r3,4(r6)
 1002bf0:	308d883a 	add	r6,r6,r2
 1002bf4:	30800015 	stw	r2,0(r6)
 1002bf8:	003f9506 	br	1002a50 <__alt_data_end+0xff002a50>
 1002bfc:	00c01504 	movi	r3,84
 1002c00:	19400536 	bltu	r3,r5,1002c18 <_free_r+0x2b8>
 1002c04:	100ad33a 	srli	r5,r2,12
 1002c08:	28c01bc4 	addi	r3,r5,111
 1002c0c:	18c7883a 	add	r3,r3,r3
 1002c10:	29401b84 	addi	r5,r5,110
 1002c14:	003f9c06 	br	1002a88 <__alt_data_end+0xff002a88>
 1002c18:	00c05504 	movi	r3,340
 1002c1c:	19400536 	bltu	r3,r5,1002c34 <_free_r+0x2d4>
 1002c20:	100ad3fa 	srli	r5,r2,15
 1002c24:	28c01e04 	addi	r3,r5,120
 1002c28:	18c7883a 	add	r3,r3,r3
 1002c2c:	29401dc4 	addi	r5,r5,119
 1002c30:	003f9506 	br	1002a88 <__alt_data_end+0xff002a88>
 1002c34:	00c15504 	movi	r3,1364
 1002c38:	19400536 	bltu	r3,r5,1002c50 <_free_r+0x2f0>
 1002c3c:	100ad4ba 	srli	r5,r2,18
 1002c40:	28c01f44 	addi	r3,r5,125
 1002c44:	18c7883a 	add	r3,r3,r3
 1002c48:	29401f04 	addi	r5,r5,124
 1002c4c:	003f8e06 	br	1002a88 <__alt_data_end+0xff002a88>
 1002c50:	00c03f84 	movi	r3,254
 1002c54:	01401f84 	movi	r5,126
 1002c58:	003f8b06 	br	1002a88 <__alt_data_end+0xff002a88>
 1002c5c:	10c00054 	ori	r3,r2,1
 1002c60:	30c00115 	stw	r3,4(r6)
 1002c64:	308d883a 	add	r6,r6,r2
 1002c68:	30800015 	stw	r2,0(r6)
 1002c6c:	003f7806 	br	1002a50 <__alt_data_end+0xff002a50>

01002c70 <_lseek_r>:
 1002c70:	defffd04 	addi	sp,sp,-12
 1002c74:	2805883a 	mov	r2,r5
 1002c78:	dc000015 	stw	r16,0(sp)
 1002c7c:	04004074 	movhi	r16,257
 1002c80:	dc400115 	stw	r17,4(sp)
 1002c84:	300b883a 	mov	r5,r6
 1002c88:	84238d04 	addi	r16,r16,-29132
 1002c8c:	2023883a 	mov	r17,r4
 1002c90:	380d883a 	mov	r6,r7
 1002c94:	1009883a 	mov	r4,r2
 1002c98:	dfc00215 	stw	ra,8(sp)
 1002c9c:	80000015 	stw	zero,0(r16)
 1002ca0:	100381c0 	call	100381c <lseek>
 1002ca4:	00ffffc4 	movi	r3,-1
 1002ca8:	10c00526 	beq	r2,r3,1002cc0 <_lseek_r+0x50>
 1002cac:	dfc00217 	ldw	ra,8(sp)
 1002cb0:	dc400117 	ldw	r17,4(sp)
 1002cb4:	dc000017 	ldw	r16,0(sp)
 1002cb8:	dec00304 	addi	sp,sp,12
 1002cbc:	f800283a 	ret
 1002cc0:	80c00017 	ldw	r3,0(r16)
 1002cc4:	183ff926 	beq	r3,zero,1002cac <__alt_data_end+0xff002cac>
 1002cc8:	88c00015 	stw	r3,0(r17)
 1002ccc:	003ff706 	br	1002cac <__alt_data_end+0xff002cac>

01002cd0 <__smakebuf_r>:
 1002cd0:	2880030b 	ldhu	r2,12(r5)
 1002cd4:	10c0008c 	andi	r3,r2,2
 1002cd8:	1800411e 	bne	r3,zero,1002de0 <__smakebuf_r+0x110>
 1002cdc:	deffec04 	addi	sp,sp,-80
 1002ce0:	dc000f15 	stw	r16,60(sp)
 1002ce4:	2821883a 	mov	r16,r5
 1002ce8:	2940038f 	ldh	r5,14(r5)
 1002cec:	dc401015 	stw	r17,64(sp)
 1002cf0:	dfc01315 	stw	ra,76(sp)
 1002cf4:	dcc01215 	stw	r19,72(sp)
 1002cf8:	dc801115 	stw	r18,68(sp)
 1002cfc:	2023883a 	mov	r17,r4
 1002d00:	28001c16 	blt	r5,zero,1002d74 <__smakebuf_r+0xa4>
 1002d04:	d80d883a 	mov	r6,sp
 1002d08:	1002eec0 	call	1002eec <_fstat_r>
 1002d0c:	10001816 	blt	r2,zero,1002d70 <__smakebuf_r+0xa0>
 1002d10:	d8800117 	ldw	r2,4(sp)
 1002d14:	00e00014 	movui	r3,32768
 1002d18:	10bc000c 	andi	r2,r2,61440
 1002d1c:	14c80020 	cmpeqi	r19,r2,8192
 1002d20:	10c03726 	beq	r2,r3,1002e00 <__smakebuf_r+0x130>
 1002d24:	80c0030b 	ldhu	r3,12(r16)
 1002d28:	18c20014 	ori	r3,r3,2048
 1002d2c:	80c0030d 	sth	r3,12(r16)
 1002d30:	00c80004 	movi	r3,8192
 1002d34:	10c0521e 	bne	r2,r3,1002e80 <__smakebuf_r+0x1b0>
 1002d38:	8140038f 	ldh	r5,14(r16)
 1002d3c:	8809883a 	mov	r4,r17
 1002d40:	1002f480 	call	1002f48 <_isatty_r>
 1002d44:	10004c26 	beq	r2,zero,1002e78 <__smakebuf_r+0x1a8>
 1002d48:	8080030b 	ldhu	r2,12(r16)
 1002d4c:	80c010c4 	addi	r3,r16,67
 1002d50:	80c00015 	stw	r3,0(r16)
 1002d54:	10800054 	ori	r2,r2,1
 1002d58:	8080030d 	sth	r2,12(r16)
 1002d5c:	00800044 	movi	r2,1
 1002d60:	80c00415 	stw	r3,16(r16)
 1002d64:	80800515 	stw	r2,20(r16)
 1002d68:	04810004 	movi	r18,1024
 1002d6c:	00000706 	br	1002d8c <__smakebuf_r+0xbc>
 1002d70:	8080030b 	ldhu	r2,12(r16)
 1002d74:	10c0200c 	andi	r3,r2,128
 1002d78:	18001f1e 	bne	r3,zero,1002df8 <__smakebuf_r+0x128>
 1002d7c:	04810004 	movi	r18,1024
 1002d80:	10820014 	ori	r2,r2,2048
 1002d84:	8080030d 	sth	r2,12(r16)
 1002d88:	0027883a 	mov	r19,zero
 1002d8c:	900b883a 	mov	r5,r18
 1002d90:	8809883a 	mov	r4,r17
 1002d94:	1000ed80 	call	1000ed8 <_malloc_r>
 1002d98:	10002c26 	beq	r2,zero,1002e4c <__smakebuf_r+0x17c>
 1002d9c:	80c0030b 	ldhu	r3,12(r16)
 1002da0:	01004034 	movhi	r4,256
 1002da4:	21013f04 	addi	r4,r4,1276
 1002da8:	89000f15 	stw	r4,60(r17)
 1002dac:	18c02014 	ori	r3,r3,128
 1002db0:	80c0030d 	sth	r3,12(r16)
 1002db4:	80800015 	stw	r2,0(r16)
 1002db8:	80800415 	stw	r2,16(r16)
 1002dbc:	84800515 	stw	r18,20(r16)
 1002dc0:	98001a1e 	bne	r19,zero,1002e2c <__smakebuf_r+0x15c>
 1002dc4:	dfc01317 	ldw	ra,76(sp)
 1002dc8:	dcc01217 	ldw	r19,72(sp)
 1002dcc:	dc801117 	ldw	r18,68(sp)
 1002dd0:	dc401017 	ldw	r17,64(sp)
 1002dd4:	dc000f17 	ldw	r16,60(sp)
 1002dd8:	dec01404 	addi	sp,sp,80
 1002ddc:	f800283a 	ret
 1002de0:	288010c4 	addi	r2,r5,67
 1002de4:	28800015 	stw	r2,0(r5)
 1002de8:	28800415 	stw	r2,16(r5)
 1002dec:	00800044 	movi	r2,1
 1002df0:	28800515 	stw	r2,20(r5)
 1002df4:	f800283a 	ret
 1002df8:	04801004 	movi	r18,64
 1002dfc:	003fe006 	br	1002d80 <__alt_data_end+0xff002d80>
 1002e00:	81000a17 	ldw	r4,40(r16)
 1002e04:	00c04034 	movhi	r3,256
 1002e08:	18c88904 	addi	r3,r3,8740
 1002e0c:	20ffc51e 	bne	r4,r3,1002d24 <__alt_data_end+0xff002d24>
 1002e10:	8080030b 	ldhu	r2,12(r16)
 1002e14:	04810004 	movi	r18,1024
 1002e18:	84801315 	stw	r18,76(r16)
 1002e1c:	1484b03a 	or	r2,r2,r18
 1002e20:	8080030d 	sth	r2,12(r16)
 1002e24:	0027883a 	mov	r19,zero
 1002e28:	003fd806 	br	1002d8c <__alt_data_end+0xff002d8c>
 1002e2c:	8140038f 	ldh	r5,14(r16)
 1002e30:	8809883a 	mov	r4,r17
 1002e34:	1002f480 	call	1002f48 <_isatty_r>
 1002e38:	103fe226 	beq	r2,zero,1002dc4 <__alt_data_end+0xff002dc4>
 1002e3c:	8080030b 	ldhu	r2,12(r16)
 1002e40:	10800054 	ori	r2,r2,1
 1002e44:	8080030d 	sth	r2,12(r16)
 1002e48:	003fde06 	br	1002dc4 <__alt_data_end+0xff002dc4>
 1002e4c:	8080030b 	ldhu	r2,12(r16)
 1002e50:	10c0800c 	andi	r3,r2,512
 1002e54:	183fdb1e 	bne	r3,zero,1002dc4 <__alt_data_end+0xff002dc4>
 1002e58:	10800094 	ori	r2,r2,2
 1002e5c:	80c010c4 	addi	r3,r16,67
 1002e60:	8080030d 	sth	r2,12(r16)
 1002e64:	00800044 	movi	r2,1
 1002e68:	80c00015 	stw	r3,0(r16)
 1002e6c:	80c00415 	stw	r3,16(r16)
 1002e70:	80800515 	stw	r2,20(r16)
 1002e74:	003fd306 	br	1002dc4 <__alt_data_end+0xff002dc4>
 1002e78:	04810004 	movi	r18,1024
 1002e7c:	003fc306 	br	1002d8c <__alt_data_end+0xff002d8c>
 1002e80:	0027883a 	mov	r19,zero
 1002e84:	04810004 	movi	r18,1024
 1002e88:	003fc006 	br	1002d8c <__alt_data_end+0xff002d8c>

01002e8c <_read_r>:
 1002e8c:	defffd04 	addi	sp,sp,-12
 1002e90:	2805883a 	mov	r2,r5
 1002e94:	dc000015 	stw	r16,0(sp)
 1002e98:	04004074 	movhi	r16,257
 1002e9c:	dc400115 	stw	r17,4(sp)
 1002ea0:	300b883a 	mov	r5,r6
 1002ea4:	84238d04 	addi	r16,r16,-29132
 1002ea8:	2023883a 	mov	r17,r4
 1002eac:	380d883a 	mov	r6,r7
 1002eb0:	1009883a 	mov	r4,r2
 1002eb4:	dfc00215 	stw	ra,8(sp)
 1002eb8:	80000015 	stw	zero,0(r16)
 1002ebc:	10039f00 	call	10039f0 <read>
 1002ec0:	00ffffc4 	movi	r3,-1
 1002ec4:	10c00526 	beq	r2,r3,1002edc <_read_r+0x50>
 1002ec8:	dfc00217 	ldw	ra,8(sp)
 1002ecc:	dc400117 	ldw	r17,4(sp)
 1002ed0:	dc000017 	ldw	r16,0(sp)
 1002ed4:	dec00304 	addi	sp,sp,12
 1002ed8:	f800283a 	ret
 1002edc:	80c00017 	ldw	r3,0(r16)
 1002ee0:	183ff926 	beq	r3,zero,1002ec8 <__alt_data_end+0xff002ec8>
 1002ee4:	88c00015 	stw	r3,0(r17)
 1002ee8:	003ff706 	br	1002ec8 <__alt_data_end+0xff002ec8>

01002eec <_fstat_r>:
 1002eec:	defffd04 	addi	sp,sp,-12
 1002ef0:	2805883a 	mov	r2,r5
 1002ef4:	dc000015 	stw	r16,0(sp)
 1002ef8:	04004074 	movhi	r16,257
 1002efc:	dc400115 	stw	r17,4(sp)
 1002f00:	84238d04 	addi	r16,r16,-29132
 1002f04:	2023883a 	mov	r17,r4
 1002f08:	300b883a 	mov	r5,r6
 1002f0c:	1009883a 	mov	r4,r2
 1002f10:	dfc00215 	stw	ra,8(sp)
 1002f14:	80000015 	stw	zero,0(r16)
 1002f18:	10032c40 	call	10032c4 <fstat>
 1002f1c:	00ffffc4 	movi	r3,-1
 1002f20:	10c00526 	beq	r2,r3,1002f38 <_fstat_r+0x4c>
 1002f24:	dfc00217 	ldw	ra,8(sp)
 1002f28:	dc400117 	ldw	r17,4(sp)
 1002f2c:	dc000017 	ldw	r16,0(sp)
 1002f30:	dec00304 	addi	sp,sp,12
 1002f34:	f800283a 	ret
 1002f38:	80c00017 	ldw	r3,0(r16)
 1002f3c:	183ff926 	beq	r3,zero,1002f24 <__alt_data_end+0xff002f24>
 1002f40:	88c00015 	stw	r3,0(r17)
 1002f44:	003ff706 	br	1002f24 <__alt_data_end+0xff002f24>

01002f48 <_isatty_r>:
 1002f48:	defffd04 	addi	sp,sp,-12
 1002f4c:	dc000015 	stw	r16,0(sp)
 1002f50:	04004074 	movhi	r16,257
 1002f54:	dc400115 	stw	r17,4(sp)
 1002f58:	84238d04 	addi	r16,r16,-29132
 1002f5c:	2023883a 	mov	r17,r4
 1002f60:	2809883a 	mov	r4,r5
 1002f64:	dfc00215 	stw	ra,8(sp)
 1002f68:	80000015 	stw	zero,0(r16)
 1002f6c:	10036500 	call	1003650 <isatty>
 1002f70:	00ffffc4 	movi	r3,-1
 1002f74:	10c00526 	beq	r2,r3,1002f8c <_isatty_r+0x44>
 1002f78:	dfc00217 	ldw	ra,8(sp)
 1002f7c:	dc400117 	ldw	r17,4(sp)
 1002f80:	dc000017 	ldw	r16,0(sp)
 1002f84:	dec00304 	addi	sp,sp,12
 1002f88:	f800283a 	ret
 1002f8c:	80c00017 	ldw	r3,0(r16)
 1002f90:	183ff926 	beq	r3,zero,1002f78 <__alt_data_end+0xff002f78>
 1002f94:	88c00015 	stw	r3,0(r17)
 1002f98:	003ff706 	br	1002f78 <__alt_data_end+0xff002f78>

01002f9c <__divsi3>:
 1002f9c:	20001b16 	blt	r4,zero,100300c <__divsi3+0x70>
 1002fa0:	000f883a 	mov	r7,zero
 1002fa4:	28001616 	blt	r5,zero,1003000 <__divsi3+0x64>
 1002fa8:	200d883a 	mov	r6,r4
 1002fac:	29001a2e 	bgeu	r5,r4,1003018 <__divsi3+0x7c>
 1002fb0:	00800804 	movi	r2,32
 1002fb4:	00c00044 	movi	r3,1
 1002fb8:	00000106 	br	1002fc0 <__divsi3+0x24>
 1002fbc:	10000d26 	beq	r2,zero,1002ff4 <__divsi3+0x58>
 1002fc0:	294b883a 	add	r5,r5,r5
 1002fc4:	10bfffc4 	addi	r2,r2,-1
 1002fc8:	18c7883a 	add	r3,r3,r3
 1002fcc:	293ffb36 	bltu	r5,r4,1002fbc <__alt_data_end+0xff002fbc>
 1002fd0:	0005883a 	mov	r2,zero
 1002fd4:	18000726 	beq	r3,zero,1002ff4 <__divsi3+0x58>
 1002fd8:	0005883a 	mov	r2,zero
 1002fdc:	31400236 	bltu	r6,r5,1002fe8 <__divsi3+0x4c>
 1002fe0:	314dc83a 	sub	r6,r6,r5
 1002fe4:	10c4b03a 	or	r2,r2,r3
 1002fe8:	1806d07a 	srli	r3,r3,1
 1002fec:	280ad07a 	srli	r5,r5,1
 1002ff0:	183ffa1e 	bne	r3,zero,1002fdc <__alt_data_end+0xff002fdc>
 1002ff4:	38000126 	beq	r7,zero,1002ffc <__divsi3+0x60>
 1002ff8:	0085c83a 	sub	r2,zero,r2
 1002ffc:	f800283a 	ret
 1003000:	014bc83a 	sub	r5,zero,r5
 1003004:	39c0005c 	xori	r7,r7,1
 1003008:	003fe706 	br	1002fa8 <__alt_data_end+0xff002fa8>
 100300c:	0109c83a 	sub	r4,zero,r4
 1003010:	01c00044 	movi	r7,1
 1003014:	003fe306 	br	1002fa4 <__alt_data_end+0xff002fa4>
 1003018:	00c00044 	movi	r3,1
 100301c:	003fee06 	br	1002fd8 <__alt_data_end+0xff002fd8>

01003020 <__modsi3>:
 1003020:	20001716 	blt	r4,zero,1003080 <__modsi3+0x60>
 1003024:	000f883a 	mov	r7,zero
 1003028:	2005883a 	mov	r2,r4
 100302c:	28001216 	blt	r5,zero,1003078 <__modsi3+0x58>
 1003030:	2900162e 	bgeu	r5,r4,100308c <__modsi3+0x6c>
 1003034:	01800804 	movi	r6,32
 1003038:	00c00044 	movi	r3,1
 100303c:	00000106 	br	1003044 <__modsi3+0x24>
 1003040:	30000a26 	beq	r6,zero,100306c <__modsi3+0x4c>
 1003044:	294b883a 	add	r5,r5,r5
 1003048:	31bfffc4 	addi	r6,r6,-1
 100304c:	18c7883a 	add	r3,r3,r3
 1003050:	293ffb36 	bltu	r5,r4,1003040 <__alt_data_end+0xff003040>
 1003054:	18000526 	beq	r3,zero,100306c <__modsi3+0x4c>
 1003058:	1806d07a 	srli	r3,r3,1
 100305c:	11400136 	bltu	r2,r5,1003064 <__modsi3+0x44>
 1003060:	1145c83a 	sub	r2,r2,r5
 1003064:	280ad07a 	srli	r5,r5,1
 1003068:	183ffb1e 	bne	r3,zero,1003058 <__alt_data_end+0xff003058>
 100306c:	38000126 	beq	r7,zero,1003074 <__modsi3+0x54>
 1003070:	0085c83a 	sub	r2,zero,r2
 1003074:	f800283a 	ret
 1003078:	014bc83a 	sub	r5,zero,r5
 100307c:	003fec06 	br	1003030 <__alt_data_end+0xff003030>
 1003080:	0109c83a 	sub	r4,zero,r4
 1003084:	01c00044 	movi	r7,1
 1003088:	003fe706 	br	1003028 <__alt_data_end+0xff003028>
 100308c:	00c00044 	movi	r3,1
 1003090:	003ff106 	br	1003058 <__alt_data_end+0xff003058>

01003094 <__udivsi3>:
 1003094:	200d883a 	mov	r6,r4
 1003098:	2900152e 	bgeu	r5,r4,10030f0 <__udivsi3+0x5c>
 100309c:	28001416 	blt	r5,zero,10030f0 <__udivsi3+0x5c>
 10030a0:	00800804 	movi	r2,32
 10030a4:	00c00044 	movi	r3,1
 10030a8:	00000206 	br	10030b4 <__udivsi3+0x20>
 10030ac:	10000e26 	beq	r2,zero,10030e8 <__udivsi3+0x54>
 10030b0:	28000516 	blt	r5,zero,10030c8 <__udivsi3+0x34>
 10030b4:	294b883a 	add	r5,r5,r5
 10030b8:	10bfffc4 	addi	r2,r2,-1
 10030bc:	18c7883a 	add	r3,r3,r3
 10030c0:	293ffa36 	bltu	r5,r4,10030ac <__alt_data_end+0xff0030ac>
 10030c4:	18000826 	beq	r3,zero,10030e8 <__udivsi3+0x54>
 10030c8:	0005883a 	mov	r2,zero
 10030cc:	31400236 	bltu	r6,r5,10030d8 <__udivsi3+0x44>
 10030d0:	314dc83a 	sub	r6,r6,r5
 10030d4:	10c4b03a 	or	r2,r2,r3
 10030d8:	1806d07a 	srli	r3,r3,1
 10030dc:	280ad07a 	srli	r5,r5,1
 10030e0:	183ffa1e 	bne	r3,zero,10030cc <__alt_data_end+0xff0030cc>
 10030e4:	f800283a 	ret
 10030e8:	0005883a 	mov	r2,zero
 10030ec:	f800283a 	ret
 10030f0:	00c00044 	movi	r3,1
 10030f4:	003ff406 	br	10030c8 <__alt_data_end+0xff0030c8>

010030f8 <__umodsi3>:
 10030f8:	2005883a 	mov	r2,r4
 10030fc:	2900122e 	bgeu	r5,r4,1003148 <__umodsi3+0x50>
 1003100:	28001116 	blt	r5,zero,1003148 <__umodsi3+0x50>
 1003104:	01800804 	movi	r6,32
 1003108:	00c00044 	movi	r3,1
 100310c:	00000206 	br	1003118 <__umodsi3+0x20>
 1003110:	30000c26 	beq	r6,zero,1003144 <__umodsi3+0x4c>
 1003114:	28000516 	blt	r5,zero,100312c <__umodsi3+0x34>
 1003118:	294b883a 	add	r5,r5,r5
 100311c:	31bfffc4 	addi	r6,r6,-1
 1003120:	18c7883a 	add	r3,r3,r3
 1003124:	293ffa36 	bltu	r5,r4,1003110 <__alt_data_end+0xff003110>
 1003128:	18000626 	beq	r3,zero,1003144 <__umodsi3+0x4c>
 100312c:	1806d07a 	srli	r3,r3,1
 1003130:	11400136 	bltu	r2,r5,1003138 <__umodsi3+0x40>
 1003134:	1145c83a 	sub	r2,r2,r5
 1003138:	280ad07a 	srli	r5,r5,1
 100313c:	183ffb1e 	bne	r3,zero,100312c <__alt_data_end+0xff00312c>
 1003140:	f800283a 	ret
 1003144:	f800283a 	ret
 1003148:	00c00044 	movi	r3,1
 100314c:	003ff706 	br	100312c <__alt_data_end+0xff00312c>

01003150 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1003150:	defffe04 	addi	sp,sp,-8
 1003154:	dfc00115 	stw	ra,4(sp)
 1003158:	df000015 	stw	fp,0(sp)
 100315c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1003160:	d0a00917 	ldw	r2,-32732(gp)
 1003164:	10000326 	beq	r2,zero,1003174 <alt_get_errno+0x24>
 1003168:	d0a00917 	ldw	r2,-32732(gp)
 100316c:	103ee83a 	callr	r2
 1003170:	00000106 	br	1003178 <alt_get_errno+0x28>
 1003174:	d0a6ad04 	addi	r2,gp,-25932
}
 1003178:	e037883a 	mov	sp,fp
 100317c:	dfc00117 	ldw	ra,4(sp)
 1003180:	df000017 	ldw	fp,0(sp)
 1003184:	dec00204 	addi	sp,sp,8
 1003188:	f800283a 	ret

0100318c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 100318c:	defffb04 	addi	sp,sp,-20
 1003190:	dfc00415 	stw	ra,16(sp)
 1003194:	df000315 	stw	fp,12(sp)
 1003198:	df000304 	addi	fp,sp,12
 100319c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 10031a0:	e0bfff17 	ldw	r2,-4(fp)
 10031a4:	10000616 	blt	r2,zero,10031c0 <close+0x34>
 10031a8:	e0bfff17 	ldw	r2,-4(fp)
 10031ac:	10c00324 	muli	r3,r2,12
 10031b0:	00804034 	movhi	r2,256
 10031b4:	10986804 	addi	r2,r2,24992
 10031b8:	1885883a 	add	r2,r3,r2
 10031bc:	00000106 	br	10031c4 <close+0x38>
 10031c0:	0005883a 	mov	r2,zero
 10031c4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 10031c8:	e0bffd17 	ldw	r2,-12(fp)
 10031cc:	10001926 	beq	r2,zero,1003234 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 10031d0:	e0bffd17 	ldw	r2,-12(fp)
 10031d4:	10800017 	ldw	r2,0(r2)
 10031d8:	10800417 	ldw	r2,16(r2)
 10031dc:	10000626 	beq	r2,zero,10031f8 <close+0x6c>
 10031e0:	e0bffd17 	ldw	r2,-12(fp)
 10031e4:	10800017 	ldw	r2,0(r2)
 10031e8:	10800417 	ldw	r2,16(r2)
 10031ec:	e13ffd17 	ldw	r4,-12(fp)
 10031f0:	103ee83a 	callr	r2
 10031f4:	00000106 	br	10031fc <close+0x70>
 10031f8:	0005883a 	mov	r2,zero
 10031fc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 1003200:	e13fff17 	ldw	r4,-4(fp)
 1003204:	1003aec0 	call	1003aec <alt_release_fd>
    if (rval < 0)
 1003208:	e0bffe17 	ldw	r2,-8(fp)
 100320c:	1000070e 	bge	r2,zero,100322c <close+0xa0>
    {
      ALT_ERRNO = -rval;
 1003210:	10031500 	call	1003150 <alt_get_errno>
 1003214:	1007883a 	mov	r3,r2
 1003218:	e0bffe17 	ldw	r2,-8(fp)
 100321c:	0085c83a 	sub	r2,zero,r2
 1003220:	18800015 	stw	r2,0(r3)
      return -1;
 1003224:	00bfffc4 	movi	r2,-1
 1003228:	00000706 	br	1003248 <close+0xbc>
    }
    return 0;
 100322c:	0005883a 	mov	r2,zero
 1003230:	00000506 	br	1003248 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1003234:	10031500 	call	1003150 <alt_get_errno>
 1003238:	1007883a 	mov	r3,r2
 100323c:	00801444 	movi	r2,81
 1003240:	18800015 	stw	r2,0(r3)
    return -1;
 1003244:	00bfffc4 	movi	r2,-1
  }
}
 1003248:	e037883a 	mov	sp,fp
 100324c:	dfc00117 	ldw	ra,4(sp)
 1003250:	df000017 	ldw	fp,0(sp)
 1003254:	dec00204 	addi	sp,sp,8
 1003258:	f800283a 	ret

0100325c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 100325c:	defffc04 	addi	sp,sp,-16
 1003260:	df000315 	stw	fp,12(sp)
 1003264:	df000304 	addi	fp,sp,12
 1003268:	e13ffd15 	stw	r4,-12(fp)
 100326c:	e17ffe15 	stw	r5,-8(fp)
 1003270:	e1bfff15 	stw	r6,-4(fp)
  return len;
 1003274:	e0bfff17 	ldw	r2,-4(fp)
}
 1003278:	e037883a 	mov	sp,fp
 100327c:	df000017 	ldw	fp,0(sp)
 1003280:	dec00104 	addi	sp,sp,4
 1003284:	f800283a 	ret

01003288 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1003288:	defffe04 	addi	sp,sp,-8
 100328c:	dfc00115 	stw	ra,4(sp)
 1003290:	df000015 	stw	fp,0(sp)
 1003294:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1003298:	d0a00917 	ldw	r2,-32732(gp)
 100329c:	10000326 	beq	r2,zero,10032ac <alt_get_errno+0x24>
 10032a0:	d0a00917 	ldw	r2,-32732(gp)
 10032a4:	103ee83a 	callr	r2
 10032a8:	00000106 	br	10032b0 <alt_get_errno+0x28>
 10032ac:	d0a6ad04 	addi	r2,gp,-25932
}
 10032b0:	e037883a 	mov	sp,fp
 10032b4:	dfc00117 	ldw	ra,4(sp)
 10032b8:	df000017 	ldw	fp,0(sp)
 10032bc:	dec00204 	addi	sp,sp,8
 10032c0:	f800283a 	ret

010032c4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 10032c4:	defffb04 	addi	sp,sp,-20
 10032c8:	dfc00415 	stw	ra,16(sp)
 10032cc:	df000315 	stw	fp,12(sp)
 10032d0:	df000304 	addi	fp,sp,12
 10032d4:	e13ffe15 	stw	r4,-8(fp)
 10032d8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 10032dc:	e0bffe17 	ldw	r2,-8(fp)
 10032e0:	10000616 	blt	r2,zero,10032fc <fstat+0x38>
 10032e4:	e0bffe17 	ldw	r2,-8(fp)
 10032e8:	10c00324 	muli	r3,r2,12
 10032ec:	00804034 	movhi	r2,256
 10032f0:	10986804 	addi	r2,r2,24992
 10032f4:	1885883a 	add	r2,r3,r2
 10032f8:	00000106 	br	1003300 <fstat+0x3c>
 10032fc:	0005883a 	mov	r2,zero
 1003300:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 1003304:	e0bffd17 	ldw	r2,-12(fp)
 1003308:	10001026 	beq	r2,zero,100334c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 100330c:	e0bffd17 	ldw	r2,-12(fp)
 1003310:	10800017 	ldw	r2,0(r2)
 1003314:	10800817 	ldw	r2,32(r2)
 1003318:	10000726 	beq	r2,zero,1003338 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 100331c:	e0bffd17 	ldw	r2,-12(fp)
 1003320:	10800017 	ldw	r2,0(r2)
 1003324:	10800817 	ldw	r2,32(r2)
 1003328:	e17fff17 	ldw	r5,-4(fp)
 100332c:	e13ffd17 	ldw	r4,-12(fp)
 1003330:	103ee83a 	callr	r2
 1003334:	00000a06 	br	1003360 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 1003338:	e0bfff17 	ldw	r2,-4(fp)
 100333c:	00c80004 	movi	r3,8192
 1003340:	10c00115 	stw	r3,4(r2)
      return 0;
 1003344:	0005883a 	mov	r2,zero
 1003348:	00000506 	br	1003360 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100334c:	10032880 	call	1003288 <alt_get_errno>
 1003350:	1007883a 	mov	r3,r2
 1003354:	00801444 	movi	r2,81
 1003358:	18800015 	stw	r2,0(r3)
    return -1;
 100335c:	00bfffc4 	movi	r2,-1
  }
}
 1003360:	e037883a 	mov	sp,fp
 1003364:	dfc00117 	ldw	ra,4(sp)
 1003368:	df000017 	ldw	fp,0(sp)
 100336c:	dec00204 	addi	sp,sp,8
 1003370:	f800283a 	ret

01003374 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 1003374:	defff904 	addi	sp,sp,-28
 1003378:	dfc00615 	stw	ra,24(sp)
 100337c:	df000515 	stw	fp,20(sp)
 1003380:	df000504 	addi	fp,sp,20
 1003384:	e13ffc15 	stw	r4,-16(fp)
 1003388:	e17ffd15 	stw	r5,-12(fp)
 100338c:	e1bffe15 	stw	r6,-8(fp)
 1003390:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 1003394:	e0800217 	ldw	r2,8(fp)
 1003398:	d8800015 	stw	r2,0(sp)
 100339c:	e1ffff17 	ldw	r7,-4(fp)
 10033a0:	e1bffe17 	ldw	r6,-8(fp)
 10033a4:	e17ffd17 	ldw	r5,-12(fp)
 10033a8:	e13ffc17 	ldw	r4,-16(fp)
 10033ac:	10035240 	call	1003524 <alt_iic_isr_register>
}  
 10033b0:	e037883a 	mov	sp,fp
 10033b4:	dfc00117 	ldw	ra,4(sp)
 10033b8:	df000017 	ldw	fp,0(sp)
 10033bc:	dec00204 	addi	sp,sp,8
 10033c0:	f800283a 	ret

010033c4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 10033c4:	defff904 	addi	sp,sp,-28
 10033c8:	df000615 	stw	fp,24(sp)
 10033cc:	df000604 	addi	fp,sp,24
 10033d0:	e13ffe15 	stw	r4,-8(fp)
 10033d4:	e17fff15 	stw	r5,-4(fp)
 10033d8:	e0bfff17 	ldw	r2,-4(fp)
 10033dc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10033e0:	0005303a 	rdctl	r2,status
 10033e4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10033e8:	e0fffb17 	ldw	r3,-20(fp)
 10033ec:	00bfff84 	movi	r2,-2
 10033f0:	1884703a 	and	r2,r3,r2
 10033f4:	1001703a 	wrctl	status,r2
  
  return context;
 10033f8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 10033fc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 1003400:	00c00044 	movi	r3,1
 1003404:	e0bffa17 	ldw	r2,-24(fp)
 1003408:	1884983a 	sll	r2,r3,r2
 100340c:	1007883a 	mov	r3,r2
 1003410:	d0a6ae17 	ldw	r2,-25928(gp)
 1003414:	1884b03a 	or	r2,r3,r2
 1003418:	d0a6ae15 	stw	r2,-25928(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 100341c:	d0a6ae17 	ldw	r2,-25928(gp)
 1003420:	100170fa 	wrctl	ienable,r2
 1003424:	e0bffc17 	ldw	r2,-16(fp)
 1003428:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100342c:	e0bffd17 	ldw	r2,-12(fp)
 1003430:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1003434:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 1003438:	0001883a 	nop
}
 100343c:	e037883a 	mov	sp,fp
 1003440:	df000017 	ldw	fp,0(sp)
 1003444:	dec00104 	addi	sp,sp,4
 1003448:	f800283a 	ret

0100344c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 100344c:	defff904 	addi	sp,sp,-28
 1003450:	df000615 	stw	fp,24(sp)
 1003454:	df000604 	addi	fp,sp,24
 1003458:	e13ffe15 	stw	r4,-8(fp)
 100345c:	e17fff15 	stw	r5,-4(fp)
 1003460:	e0bfff17 	ldw	r2,-4(fp)
 1003464:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1003468:	0005303a 	rdctl	r2,status
 100346c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1003470:	e0fffb17 	ldw	r3,-20(fp)
 1003474:	00bfff84 	movi	r2,-2
 1003478:	1884703a 	and	r2,r3,r2
 100347c:	1001703a 	wrctl	status,r2
  
  return context;
 1003480:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1003484:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 1003488:	00c00044 	movi	r3,1
 100348c:	e0bffa17 	ldw	r2,-24(fp)
 1003490:	1884983a 	sll	r2,r3,r2
 1003494:	0084303a 	nor	r2,zero,r2
 1003498:	1007883a 	mov	r3,r2
 100349c:	d0a6ae17 	ldw	r2,-25928(gp)
 10034a0:	1884703a 	and	r2,r3,r2
 10034a4:	d0a6ae15 	stw	r2,-25928(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 10034a8:	d0a6ae17 	ldw	r2,-25928(gp)
 10034ac:	100170fa 	wrctl	ienable,r2
 10034b0:	e0bffc17 	ldw	r2,-16(fp)
 10034b4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10034b8:	e0bffd17 	ldw	r2,-12(fp)
 10034bc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 10034c0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 10034c4:	0001883a 	nop
}
 10034c8:	e037883a 	mov	sp,fp
 10034cc:	df000017 	ldw	fp,0(sp)
 10034d0:	dec00104 	addi	sp,sp,4
 10034d4:	f800283a 	ret

010034d8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 10034d8:	defffc04 	addi	sp,sp,-16
 10034dc:	df000315 	stw	fp,12(sp)
 10034e0:	df000304 	addi	fp,sp,12
 10034e4:	e13ffe15 	stw	r4,-8(fp)
 10034e8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 10034ec:	000530fa 	rdctl	r2,ienable
 10034f0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 10034f4:	00c00044 	movi	r3,1
 10034f8:	e0bfff17 	ldw	r2,-4(fp)
 10034fc:	1884983a 	sll	r2,r3,r2
 1003500:	1007883a 	mov	r3,r2
 1003504:	e0bffd17 	ldw	r2,-12(fp)
 1003508:	1884703a 	and	r2,r3,r2
 100350c:	1004c03a 	cmpne	r2,r2,zero
 1003510:	10803fcc 	andi	r2,r2,255
}
 1003514:	e037883a 	mov	sp,fp
 1003518:	df000017 	ldw	fp,0(sp)
 100351c:	dec00104 	addi	sp,sp,4
 1003520:	f800283a 	ret

01003524 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 1003524:	defff504 	addi	sp,sp,-44
 1003528:	dfc00a15 	stw	ra,40(sp)
 100352c:	df000915 	stw	fp,36(sp)
 1003530:	df000904 	addi	fp,sp,36
 1003534:	e13ffc15 	stw	r4,-16(fp)
 1003538:	e17ffd15 	stw	r5,-12(fp)
 100353c:	e1bffe15 	stw	r6,-8(fp)
 1003540:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 1003544:	00bffa84 	movi	r2,-22
 1003548:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 100354c:	e0bffd17 	ldw	r2,-12(fp)
 1003550:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 1003554:	e0bff817 	ldw	r2,-32(fp)
 1003558:	10800808 	cmpgei	r2,r2,32
 100355c:	1000271e 	bne	r2,zero,10035fc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1003560:	0005303a 	rdctl	r2,status
 1003564:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1003568:	e0fffb17 	ldw	r3,-20(fp)
 100356c:	00bfff84 	movi	r2,-2
 1003570:	1884703a 	and	r2,r3,r2
 1003574:	1001703a 	wrctl	status,r2
  
  return context;
 1003578:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 100357c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 1003580:	00804074 	movhi	r2,257
 1003584:	10a39f04 	addi	r2,r2,-29060
 1003588:	e0fff817 	ldw	r3,-32(fp)
 100358c:	180690fa 	slli	r3,r3,3
 1003590:	10c5883a 	add	r2,r2,r3
 1003594:	e0fffe17 	ldw	r3,-8(fp)
 1003598:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 100359c:	00804074 	movhi	r2,257
 10035a0:	10a39f04 	addi	r2,r2,-29060
 10035a4:	e0fff817 	ldw	r3,-32(fp)
 10035a8:	180690fa 	slli	r3,r3,3
 10035ac:	10c5883a 	add	r2,r2,r3
 10035b0:	10800104 	addi	r2,r2,4
 10035b4:	e0ffff17 	ldw	r3,-4(fp)
 10035b8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 10035bc:	e0bffe17 	ldw	r2,-8(fp)
 10035c0:	10000526 	beq	r2,zero,10035d8 <alt_iic_isr_register+0xb4>
 10035c4:	e0bff817 	ldw	r2,-32(fp)
 10035c8:	100b883a 	mov	r5,r2
 10035cc:	e13ffc17 	ldw	r4,-16(fp)
 10035d0:	10033c40 	call	10033c4 <alt_ic_irq_enable>
 10035d4:	00000406 	br	10035e8 <alt_iic_isr_register+0xc4>
 10035d8:	e0bff817 	ldw	r2,-32(fp)
 10035dc:	100b883a 	mov	r5,r2
 10035e0:	e13ffc17 	ldw	r4,-16(fp)
 10035e4:	100344c0 	call	100344c <alt_ic_irq_disable>
 10035e8:	e0bff715 	stw	r2,-36(fp)
 10035ec:	e0bffa17 	ldw	r2,-24(fp)
 10035f0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10035f4:	e0bff917 	ldw	r2,-28(fp)
 10035f8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 10035fc:	e0bff717 	ldw	r2,-36(fp)
}
 1003600:	e037883a 	mov	sp,fp
 1003604:	dfc00117 	ldw	ra,4(sp)
 1003608:	df000017 	ldw	fp,0(sp)
 100360c:	dec00204 	addi	sp,sp,8
 1003610:	f800283a 	ret

01003614 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1003614:	defffe04 	addi	sp,sp,-8
 1003618:	dfc00115 	stw	ra,4(sp)
 100361c:	df000015 	stw	fp,0(sp)
 1003620:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1003624:	d0a00917 	ldw	r2,-32732(gp)
 1003628:	10000326 	beq	r2,zero,1003638 <alt_get_errno+0x24>
 100362c:	d0a00917 	ldw	r2,-32732(gp)
 1003630:	103ee83a 	callr	r2
 1003634:	00000106 	br	100363c <alt_get_errno+0x28>
 1003638:	d0a6ad04 	addi	r2,gp,-25932
}
 100363c:	e037883a 	mov	sp,fp
 1003640:	dfc00117 	ldw	ra,4(sp)
 1003644:	df000017 	ldw	fp,0(sp)
 1003648:	dec00204 	addi	sp,sp,8
 100364c:	f800283a 	ret

01003650 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 1003650:	deffed04 	addi	sp,sp,-76
 1003654:	dfc01215 	stw	ra,72(sp)
 1003658:	df001115 	stw	fp,68(sp)
 100365c:	df001104 	addi	fp,sp,68
 1003660:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1003664:	e0bfff17 	ldw	r2,-4(fp)
 1003668:	10000616 	blt	r2,zero,1003684 <isatty+0x34>
 100366c:	e0bfff17 	ldw	r2,-4(fp)
 1003670:	10c00324 	muli	r3,r2,12
 1003674:	00804034 	movhi	r2,256
 1003678:	10986804 	addi	r2,r2,24992
 100367c:	1885883a 	add	r2,r3,r2
 1003680:	00000106 	br	1003688 <isatty+0x38>
 1003684:	0005883a 	mov	r2,zero
 1003688:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 100368c:	e0bfef17 	ldw	r2,-68(fp)
 1003690:	10000e26 	beq	r2,zero,10036cc <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 1003694:	e0bfef17 	ldw	r2,-68(fp)
 1003698:	10800017 	ldw	r2,0(r2)
 100369c:	10800817 	ldw	r2,32(r2)
 10036a0:	1000021e 	bne	r2,zero,10036ac <isatty+0x5c>
    {
      return 1;
 10036a4:	00800044 	movi	r2,1
 10036a8:	00000d06 	br	10036e0 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 10036ac:	e0bff004 	addi	r2,fp,-64
 10036b0:	100b883a 	mov	r5,r2
 10036b4:	e13fff17 	ldw	r4,-4(fp)
 10036b8:	10032c40 	call	10032c4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 10036bc:	e0bff117 	ldw	r2,-60(fp)
 10036c0:	10880020 	cmpeqi	r2,r2,8192
 10036c4:	10803fcc 	andi	r2,r2,255
 10036c8:	00000506 	br	10036e0 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 10036cc:	10036140 	call	1003614 <alt_get_errno>
 10036d0:	1007883a 	mov	r3,r2
 10036d4:	00801444 	movi	r2,81
 10036d8:	18800015 	stw	r2,0(r3)
    return 0;
 10036dc:	0005883a 	mov	r2,zero
  }
}
 10036e0:	e037883a 	mov	sp,fp
 10036e4:	dfc00117 	ldw	ra,4(sp)
 10036e8:	df000017 	ldw	fp,0(sp)
 10036ec:	dec00204 	addi	sp,sp,8
 10036f0:	f800283a 	ret

010036f4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 10036f4:	defffc04 	addi	sp,sp,-16
 10036f8:	df000315 	stw	fp,12(sp)
 10036fc:	df000304 	addi	fp,sp,12
 1003700:	e13ffd15 	stw	r4,-12(fp)
 1003704:	e17ffe15 	stw	r5,-8(fp)
 1003708:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 100370c:	e0fffe17 	ldw	r3,-8(fp)
 1003710:	e0bffd17 	ldw	r2,-12(fp)
 1003714:	18800c26 	beq	r3,r2,1003748 <alt_load_section+0x54>
  {
    while( to != end )
 1003718:	00000806 	br	100373c <alt_load_section+0x48>
    {
      *to++ = *from++;
 100371c:	e0bffe17 	ldw	r2,-8(fp)
 1003720:	10c00104 	addi	r3,r2,4
 1003724:	e0fffe15 	stw	r3,-8(fp)
 1003728:	e0fffd17 	ldw	r3,-12(fp)
 100372c:	19000104 	addi	r4,r3,4
 1003730:	e13ffd15 	stw	r4,-12(fp)
 1003734:	18c00017 	ldw	r3,0(r3)
 1003738:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 100373c:	e0fffe17 	ldw	r3,-8(fp)
 1003740:	e0bfff17 	ldw	r2,-4(fp)
 1003744:	18bff51e 	bne	r3,r2,100371c <__alt_data_end+0xff00371c>
    {
      *to++ = *from++;
    }
  }
}
 1003748:	0001883a 	nop
 100374c:	e037883a 	mov	sp,fp
 1003750:	df000017 	ldw	fp,0(sp)
 1003754:	dec00104 	addi	sp,sp,4
 1003758:	f800283a 	ret

0100375c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 100375c:	defffe04 	addi	sp,sp,-8
 1003760:	dfc00115 	stw	ra,4(sp)
 1003764:	df000015 	stw	fp,0(sp)
 1003768:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 100376c:	01804034 	movhi	r6,256
 1003770:	319cee04 	addi	r6,r6,29624
 1003774:	01404034 	movhi	r5,256
 1003778:	29565304 	addi	r5,r5,22860
 100377c:	01004034 	movhi	r4,256
 1003780:	211cee04 	addi	r4,r4,29624
 1003784:	10036f40 	call	10036f4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 1003788:	01804034 	movhi	r6,256
 100378c:	31809104 	addi	r6,r6,580
 1003790:	01404034 	movhi	r5,256
 1003794:	29400804 	addi	r5,r5,32
 1003798:	01004034 	movhi	r4,256
 100379c:	21000804 	addi	r4,r4,32
 10037a0:	10036f40 	call	10036f4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 10037a4:	01804034 	movhi	r6,256
 10037a8:	31965304 	addi	r6,r6,22860
 10037ac:	01404034 	movhi	r5,256
 10037b0:	29564004 	addi	r5,r5,22784
 10037b4:	01004034 	movhi	r4,256
 10037b8:	21164004 	addi	r4,r4,22784
 10037bc:	10036f40 	call	10036f4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 10037c0:	1004a8c0 	call	1004a8c <alt_dcache_flush_all>
  alt_icache_flush_all();
 10037c4:	1004c740 	call	1004c74 <alt_icache_flush_all>
}
 10037c8:	0001883a 	nop
 10037cc:	e037883a 	mov	sp,fp
 10037d0:	dfc00117 	ldw	ra,4(sp)
 10037d4:	df000017 	ldw	fp,0(sp)
 10037d8:	dec00204 	addi	sp,sp,8
 10037dc:	f800283a 	ret

010037e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10037e0:	defffe04 	addi	sp,sp,-8
 10037e4:	dfc00115 	stw	ra,4(sp)
 10037e8:	df000015 	stw	fp,0(sp)
 10037ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 10037f0:	d0a00917 	ldw	r2,-32732(gp)
 10037f4:	10000326 	beq	r2,zero,1003804 <alt_get_errno+0x24>
 10037f8:	d0a00917 	ldw	r2,-32732(gp)
 10037fc:	103ee83a 	callr	r2
 1003800:	00000106 	br	1003808 <alt_get_errno+0x28>
 1003804:	d0a6ad04 	addi	r2,gp,-25932
}
 1003808:	e037883a 	mov	sp,fp
 100380c:	dfc00117 	ldw	ra,4(sp)
 1003810:	df000017 	ldw	fp,0(sp)
 1003814:	dec00204 	addi	sp,sp,8
 1003818:	f800283a 	ret

0100381c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 100381c:	defff904 	addi	sp,sp,-28
 1003820:	dfc00615 	stw	ra,24(sp)
 1003824:	df000515 	stw	fp,20(sp)
 1003828:	df000504 	addi	fp,sp,20
 100382c:	e13ffd15 	stw	r4,-12(fp)
 1003830:	e17ffe15 	stw	r5,-8(fp)
 1003834:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 1003838:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100383c:	e0bffd17 	ldw	r2,-12(fp)
 1003840:	10000616 	blt	r2,zero,100385c <lseek+0x40>
 1003844:	e0bffd17 	ldw	r2,-12(fp)
 1003848:	10c00324 	muli	r3,r2,12
 100384c:	00804034 	movhi	r2,256
 1003850:	10986804 	addi	r2,r2,24992
 1003854:	1885883a 	add	r2,r3,r2
 1003858:	00000106 	br	1003860 <lseek+0x44>
 100385c:	0005883a 	mov	r2,zero
 1003860:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 1003864:	e0bffc17 	ldw	r2,-16(fp)
 1003868:	10001026 	beq	r2,zero,10038ac <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 100386c:	e0bffc17 	ldw	r2,-16(fp)
 1003870:	10800017 	ldw	r2,0(r2)
 1003874:	10800717 	ldw	r2,28(r2)
 1003878:	10000926 	beq	r2,zero,10038a0 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 100387c:	e0bffc17 	ldw	r2,-16(fp)
 1003880:	10800017 	ldw	r2,0(r2)
 1003884:	10800717 	ldw	r2,28(r2)
 1003888:	e1bfff17 	ldw	r6,-4(fp)
 100388c:	e17ffe17 	ldw	r5,-8(fp)
 1003890:	e13ffc17 	ldw	r4,-16(fp)
 1003894:	103ee83a 	callr	r2
 1003898:	e0bffb15 	stw	r2,-20(fp)
 100389c:	00000506 	br	10038b4 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 10038a0:	00bfde84 	movi	r2,-134
 10038a4:	e0bffb15 	stw	r2,-20(fp)
 10038a8:	00000206 	br	10038b4 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 10038ac:	00bfebc4 	movi	r2,-81
 10038b0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 10038b4:	e0bffb17 	ldw	r2,-20(fp)
 10038b8:	1000070e 	bge	r2,zero,10038d8 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 10038bc:	10037e00 	call	10037e0 <alt_get_errno>
 10038c0:	1007883a 	mov	r3,r2
 10038c4:	e0bffb17 	ldw	r2,-20(fp)
 10038c8:	0085c83a 	sub	r2,zero,r2
 10038cc:	18800015 	stw	r2,0(r3)
    rc = -1;
 10038d0:	00bfffc4 	movi	r2,-1
 10038d4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 10038d8:	e0bffb17 	ldw	r2,-20(fp)
}
 10038dc:	e037883a 	mov	sp,fp
 10038e0:	dfc00117 	ldw	ra,4(sp)
 10038e4:	df000017 	ldw	fp,0(sp)
 10038e8:	dec00204 	addi	sp,sp,8
 10038ec:	f800283a 	ret

010038f0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 10038f0:	defffd04 	addi	sp,sp,-12
 10038f4:	dfc00215 	stw	ra,8(sp)
 10038f8:	df000115 	stw	fp,4(sp)
 10038fc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 1003900:	0009883a 	mov	r4,zero
 1003904:	1003d680 	call	1003d68 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 1003908:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 100390c:	1003da00 	call	1003da0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 1003910:	01804034 	movhi	r6,256
 1003914:	31964b04 	addi	r6,r6,22828
 1003918:	01404034 	movhi	r5,256
 100391c:	29564b04 	addi	r5,r5,22828
 1003920:	01004034 	movhi	r4,256
 1003924:	21164b04 	addi	r4,r4,22828
 1003928:	1004e080 	call	1004e08 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 100392c:	1004bb40 	call	1004bb4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 1003930:	01004034 	movhi	r4,256
 1003934:	21130504 	addi	r4,r4,19476
 1003938:	100556c0 	call	100556c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 100393c:	d0a6af17 	ldw	r2,-25924(gp)
 1003940:	d0e6b017 	ldw	r3,-25920(gp)
 1003944:	d126b117 	ldw	r4,-25916(gp)
 1003948:	200d883a 	mov	r6,r4
 100394c:	180b883a 	mov	r5,r3
 1003950:	1009883a 	mov	r4,r2
 1003954:	10002e80 	call	10002e8 <main>
 1003958:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 100395c:	01000044 	movi	r4,1
 1003960:	100318c0 	call	100318c <close>
  exit (result);
 1003964:	e13fff17 	ldw	r4,-4(fp)
 1003968:	10055800 	call	1005580 <exit>

0100396c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 100396c:	defffe04 	addi	sp,sp,-8
 1003970:	df000115 	stw	fp,4(sp)
 1003974:	df000104 	addi	fp,sp,4
 1003978:	e13fff15 	stw	r4,-4(fp)
}
 100397c:	0001883a 	nop
 1003980:	e037883a 	mov	sp,fp
 1003984:	df000017 	ldw	fp,0(sp)
 1003988:	dec00104 	addi	sp,sp,4
 100398c:	f800283a 	ret

01003990 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 1003990:	defffe04 	addi	sp,sp,-8
 1003994:	df000115 	stw	fp,4(sp)
 1003998:	df000104 	addi	fp,sp,4
 100399c:	e13fff15 	stw	r4,-4(fp)
}
 10039a0:	0001883a 	nop
 10039a4:	e037883a 	mov	sp,fp
 10039a8:	df000017 	ldw	fp,0(sp)
 10039ac:	dec00104 	addi	sp,sp,4
 10039b0:	f800283a 	ret

010039b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10039b4:	defffe04 	addi	sp,sp,-8
 10039b8:	dfc00115 	stw	ra,4(sp)
 10039bc:	df000015 	stw	fp,0(sp)
 10039c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 10039c4:	d0a00917 	ldw	r2,-32732(gp)
 10039c8:	10000326 	beq	r2,zero,10039d8 <alt_get_errno+0x24>
 10039cc:	d0a00917 	ldw	r2,-32732(gp)
 10039d0:	103ee83a 	callr	r2
 10039d4:	00000106 	br	10039dc <alt_get_errno+0x28>
 10039d8:	d0a6ad04 	addi	r2,gp,-25932
}
 10039dc:	e037883a 	mov	sp,fp
 10039e0:	dfc00117 	ldw	ra,4(sp)
 10039e4:	df000017 	ldw	fp,0(sp)
 10039e8:	dec00204 	addi	sp,sp,8
 10039ec:	f800283a 	ret

010039f0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 10039f0:	defff904 	addi	sp,sp,-28
 10039f4:	dfc00615 	stw	ra,24(sp)
 10039f8:	df000515 	stw	fp,20(sp)
 10039fc:	df000504 	addi	fp,sp,20
 1003a00:	e13ffd15 	stw	r4,-12(fp)
 1003a04:	e17ffe15 	stw	r5,-8(fp)
 1003a08:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1003a0c:	e0bffd17 	ldw	r2,-12(fp)
 1003a10:	10000616 	blt	r2,zero,1003a2c <read+0x3c>
 1003a14:	e0bffd17 	ldw	r2,-12(fp)
 1003a18:	10c00324 	muli	r3,r2,12
 1003a1c:	00804034 	movhi	r2,256
 1003a20:	10986804 	addi	r2,r2,24992
 1003a24:	1885883a 	add	r2,r3,r2
 1003a28:	00000106 	br	1003a30 <read+0x40>
 1003a2c:	0005883a 	mov	r2,zero
 1003a30:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 1003a34:	e0bffb17 	ldw	r2,-20(fp)
 1003a38:	10002226 	beq	r2,zero,1003ac4 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 1003a3c:	e0bffb17 	ldw	r2,-20(fp)
 1003a40:	10800217 	ldw	r2,8(r2)
 1003a44:	108000cc 	andi	r2,r2,3
 1003a48:	10800060 	cmpeqi	r2,r2,1
 1003a4c:	1000181e 	bne	r2,zero,1003ab0 <read+0xc0>
        (fd->dev->read))
 1003a50:	e0bffb17 	ldw	r2,-20(fp)
 1003a54:	10800017 	ldw	r2,0(r2)
 1003a58:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 1003a5c:	10001426 	beq	r2,zero,1003ab0 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 1003a60:	e0bffb17 	ldw	r2,-20(fp)
 1003a64:	10800017 	ldw	r2,0(r2)
 1003a68:	10800517 	ldw	r2,20(r2)
 1003a6c:	e0ffff17 	ldw	r3,-4(fp)
 1003a70:	180d883a 	mov	r6,r3
 1003a74:	e17ffe17 	ldw	r5,-8(fp)
 1003a78:	e13ffb17 	ldw	r4,-20(fp)
 1003a7c:	103ee83a 	callr	r2
 1003a80:	e0bffc15 	stw	r2,-16(fp)
 1003a84:	e0bffc17 	ldw	r2,-16(fp)
 1003a88:	1000070e 	bge	r2,zero,1003aa8 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 1003a8c:	10039b40 	call	10039b4 <alt_get_errno>
 1003a90:	1007883a 	mov	r3,r2
 1003a94:	e0bffc17 	ldw	r2,-16(fp)
 1003a98:	0085c83a 	sub	r2,zero,r2
 1003a9c:	18800015 	stw	r2,0(r3)
          return -1;
 1003aa0:	00bfffc4 	movi	r2,-1
 1003aa4:	00000c06 	br	1003ad8 <read+0xe8>
        }
        return rval;
 1003aa8:	e0bffc17 	ldw	r2,-16(fp)
 1003aac:	00000a06 	br	1003ad8 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 1003ab0:	10039b40 	call	10039b4 <alt_get_errno>
 1003ab4:	1007883a 	mov	r3,r2
 1003ab8:	00800344 	movi	r2,13
 1003abc:	18800015 	stw	r2,0(r3)
 1003ac0:	00000406 	br	1003ad4 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 1003ac4:	10039b40 	call	10039b4 <alt_get_errno>
 1003ac8:	1007883a 	mov	r3,r2
 1003acc:	00801444 	movi	r2,81
 1003ad0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 1003ad4:	00bfffc4 	movi	r2,-1
}
 1003ad8:	e037883a 	mov	sp,fp
 1003adc:	dfc00117 	ldw	ra,4(sp)
 1003ae0:	df000017 	ldw	fp,0(sp)
 1003ae4:	dec00204 	addi	sp,sp,8
 1003ae8:	f800283a 	ret

01003aec <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 1003aec:	defffe04 	addi	sp,sp,-8
 1003af0:	df000115 	stw	fp,4(sp)
 1003af4:	df000104 	addi	fp,sp,4
 1003af8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 1003afc:	e0bfff17 	ldw	r2,-4(fp)
 1003b00:	108000d0 	cmplti	r2,r2,3
 1003b04:	10000d1e 	bne	r2,zero,1003b3c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 1003b08:	00804034 	movhi	r2,256
 1003b0c:	10986804 	addi	r2,r2,24992
 1003b10:	e0ffff17 	ldw	r3,-4(fp)
 1003b14:	18c00324 	muli	r3,r3,12
 1003b18:	10c5883a 	add	r2,r2,r3
 1003b1c:	10800204 	addi	r2,r2,8
 1003b20:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 1003b24:	00804034 	movhi	r2,256
 1003b28:	10986804 	addi	r2,r2,24992
 1003b2c:	e0ffff17 	ldw	r3,-4(fp)
 1003b30:	18c00324 	muli	r3,r3,12
 1003b34:	10c5883a 	add	r2,r2,r3
 1003b38:	10000015 	stw	zero,0(r2)
  }
}
 1003b3c:	0001883a 	nop
 1003b40:	e037883a 	mov	sp,fp
 1003b44:	df000017 	ldw	fp,0(sp)
 1003b48:	dec00104 	addi	sp,sp,4
 1003b4c:	f800283a 	ret

01003b50 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 1003b50:	defff904 	addi	sp,sp,-28
 1003b54:	df000615 	stw	fp,24(sp)
 1003b58:	df000604 	addi	fp,sp,24
 1003b5c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1003b60:	0005303a 	rdctl	r2,status
 1003b64:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1003b68:	e0fffe17 	ldw	r3,-8(fp)
 1003b6c:	00bfff84 	movi	r2,-2
 1003b70:	1884703a 	and	r2,r3,r2
 1003b74:	1001703a 	wrctl	status,r2
  
  return context;
 1003b78:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 1003b7c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 1003b80:	d0a00b17 	ldw	r2,-32724(gp)
 1003b84:	10c000c4 	addi	r3,r2,3
 1003b88:	00bfff04 	movi	r2,-4
 1003b8c:	1884703a 	and	r2,r3,r2
 1003b90:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 1003b94:	d0e00b17 	ldw	r3,-32724(gp)
 1003b98:	e0bfff17 	ldw	r2,-4(fp)
 1003b9c:	1887883a 	add	r3,r3,r2
 1003ba0:	00808034 	movhi	r2,512
 1003ba4:	10800004 	addi	r2,r2,0
 1003ba8:	10c0062e 	bgeu	r2,r3,1003bc4 <sbrk+0x74>
 1003bac:	e0bffb17 	ldw	r2,-20(fp)
 1003bb0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1003bb4:	e0bffa17 	ldw	r2,-24(fp)
 1003bb8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 1003bbc:	00bfffc4 	movi	r2,-1
 1003bc0:	00000b06 	br	1003bf0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 1003bc4:	d0a00b17 	ldw	r2,-32724(gp)
 1003bc8:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 1003bcc:	d0e00b17 	ldw	r3,-32724(gp)
 1003bd0:	e0bfff17 	ldw	r2,-4(fp)
 1003bd4:	1885883a 	add	r2,r3,r2
 1003bd8:	d0a00b15 	stw	r2,-32724(gp)
 1003bdc:	e0bffb17 	ldw	r2,-20(fp)
 1003be0:	e0bffc15 	stw	r2,-16(fp)
 1003be4:	e0bffc17 	ldw	r2,-16(fp)
 1003be8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 1003bec:	e0bffd17 	ldw	r2,-12(fp)
} 
 1003bf0:	e037883a 	mov	sp,fp
 1003bf4:	df000017 	ldw	fp,0(sp)
 1003bf8:	dec00104 	addi	sp,sp,4
 1003bfc:	f800283a 	ret

01003c00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1003c00:	defffe04 	addi	sp,sp,-8
 1003c04:	dfc00115 	stw	ra,4(sp)
 1003c08:	df000015 	stw	fp,0(sp)
 1003c0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1003c10:	d0a00917 	ldw	r2,-32732(gp)
 1003c14:	10000326 	beq	r2,zero,1003c24 <alt_get_errno+0x24>
 1003c18:	d0a00917 	ldw	r2,-32732(gp)
 1003c1c:	103ee83a 	callr	r2
 1003c20:	00000106 	br	1003c28 <alt_get_errno+0x28>
 1003c24:	d0a6ad04 	addi	r2,gp,-25932
}
 1003c28:	e037883a 	mov	sp,fp
 1003c2c:	dfc00117 	ldw	ra,4(sp)
 1003c30:	df000017 	ldw	fp,0(sp)
 1003c34:	dec00204 	addi	sp,sp,8
 1003c38:	f800283a 	ret

01003c3c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 1003c3c:	defff904 	addi	sp,sp,-28
 1003c40:	dfc00615 	stw	ra,24(sp)
 1003c44:	df000515 	stw	fp,20(sp)
 1003c48:	df000504 	addi	fp,sp,20
 1003c4c:	e13ffd15 	stw	r4,-12(fp)
 1003c50:	e17ffe15 	stw	r5,-8(fp)
 1003c54:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1003c58:	e0bffd17 	ldw	r2,-12(fp)
 1003c5c:	10000616 	blt	r2,zero,1003c78 <write+0x3c>
 1003c60:	e0bffd17 	ldw	r2,-12(fp)
 1003c64:	10c00324 	muli	r3,r2,12
 1003c68:	00804034 	movhi	r2,256
 1003c6c:	10986804 	addi	r2,r2,24992
 1003c70:	1885883a 	add	r2,r3,r2
 1003c74:	00000106 	br	1003c7c <write+0x40>
 1003c78:	0005883a 	mov	r2,zero
 1003c7c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 1003c80:	e0bffb17 	ldw	r2,-20(fp)
 1003c84:	10002126 	beq	r2,zero,1003d0c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 1003c88:	e0bffb17 	ldw	r2,-20(fp)
 1003c8c:	10800217 	ldw	r2,8(r2)
 1003c90:	108000cc 	andi	r2,r2,3
 1003c94:	10001826 	beq	r2,zero,1003cf8 <write+0xbc>
 1003c98:	e0bffb17 	ldw	r2,-20(fp)
 1003c9c:	10800017 	ldw	r2,0(r2)
 1003ca0:	10800617 	ldw	r2,24(r2)
 1003ca4:	10001426 	beq	r2,zero,1003cf8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 1003ca8:	e0bffb17 	ldw	r2,-20(fp)
 1003cac:	10800017 	ldw	r2,0(r2)
 1003cb0:	10800617 	ldw	r2,24(r2)
 1003cb4:	e0ffff17 	ldw	r3,-4(fp)
 1003cb8:	180d883a 	mov	r6,r3
 1003cbc:	e17ffe17 	ldw	r5,-8(fp)
 1003cc0:	e13ffb17 	ldw	r4,-20(fp)
 1003cc4:	103ee83a 	callr	r2
 1003cc8:	e0bffc15 	stw	r2,-16(fp)
 1003ccc:	e0bffc17 	ldw	r2,-16(fp)
 1003cd0:	1000070e 	bge	r2,zero,1003cf0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 1003cd4:	1003c000 	call	1003c00 <alt_get_errno>
 1003cd8:	1007883a 	mov	r3,r2
 1003cdc:	e0bffc17 	ldw	r2,-16(fp)
 1003ce0:	0085c83a 	sub	r2,zero,r2
 1003ce4:	18800015 	stw	r2,0(r3)
        return -1;
 1003ce8:	00bfffc4 	movi	r2,-1
 1003cec:	00000c06 	br	1003d20 <write+0xe4>
      }
      return rval;
 1003cf0:	e0bffc17 	ldw	r2,-16(fp)
 1003cf4:	00000a06 	br	1003d20 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 1003cf8:	1003c000 	call	1003c00 <alt_get_errno>
 1003cfc:	1007883a 	mov	r3,r2
 1003d00:	00800344 	movi	r2,13
 1003d04:	18800015 	stw	r2,0(r3)
 1003d08:	00000406 	br	1003d1c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 1003d0c:	1003c000 	call	1003c00 <alt_get_errno>
 1003d10:	1007883a 	mov	r3,r2
 1003d14:	00801444 	movi	r2,81
 1003d18:	18800015 	stw	r2,0(r3)
  }
  return -1;
 1003d1c:	00bfffc4 	movi	r2,-1
}
 1003d20:	e037883a 	mov	sp,fp
 1003d24:	dfc00117 	ldw	ra,4(sp)
 1003d28:	df000017 	ldw	fp,0(sp)
 1003d2c:	dec00204 	addi	sp,sp,8
 1003d30:	f800283a 	ret

01003d34 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 1003d34:	defffd04 	addi	sp,sp,-12
 1003d38:	dfc00215 	stw	ra,8(sp)
 1003d3c:	df000115 	stw	fp,4(sp)
 1003d40:	df000104 	addi	fp,sp,4
 1003d44:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 1003d48:	d1600604 	addi	r5,gp,-32744
 1003d4c:	e13fff17 	ldw	r4,-4(fp)
 1003d50:	1004b100 	call	1004b10 <alt_dev_llist_insert>
}
 1003d54:	e037883a 	mov	sp,fp
 1003d58:	dfc00117 	ldw	ra,4(sp)
 1003d5c:	df000017 	ldw	fp,0(sp)
 1003d60:	dec00204 	addi	sp,sp,8
 1003d64:	f800283a 	ret

01003d68 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 1003d68:	defffd04 	addi	sp,sp,-12
 1003d6c:	dfc00215 	stw	ra,8(sp)
 1003d70:	df000115 	stw	fp,4(sp)
 1003d74:	df000104 	addi	fp,sp,4
 1003d78:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, CPU);
 1003d7c:	100527c0 	call	100527c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 1003d80:	00800044 	movi	r2,1
 1003d84:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 1003d88:	0001883a 	nop
 1003d8c:	e037883a 	mov	sp,fp
 1003d90:	dfc00117 	ldw	ra,4(sp)
 1003d94:	df000017 	ldw	fp,0(sp)
 1003d98:	dec00204 	addi	sp,sp,8
 1003d9c:	f800283a 	ret

01003da0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 1003da0:	defffe04 	addi	sp,sp,-8
 1003da4:	dfc00115 	stw	ra,4(sp)
 1003da8:	df000015 	stw	fp,0(sp)
 1003dac:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 1003db0:	01c01904 	movi	r7,100
 1003db4:	01800044 	movi	r6,1
 1003db8:	000b883a 	mov	r5,zero
 1003dbc:	01008034 	movhi	r4,512
 1003dc0:	21040004 	addi	r4,r4,4096
 1003dc4:	10048e40 	call	10048e4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 1003dc8:	000d883a 	mov	r6,zero
 1003dcc:	000b883a 	mov	r5,zero
 1003dd0:	01004034 	movhi	r4,256
 1003dd4:	2118d204 	addi	r4,r4,25416
 1003dd8:	1003f680 	call	1003f68 <altera_avalon_jtag_uart_init>
 1003ddc:	01004034 	movhi	r4,256
 1003de0:	2118c804 	addi	r4,r4,25376
 1003de4:	1003d340 	call	1003d34 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 1003de8:	0001883a 	nop
}
 1003dec:	0001883a 	nop
 1003df0:	e037883a 	mov	sp,fp
 1003df4:	dfc00117 	ldw	ra,4(sp)
 1003df8:	df000017 	ldw	fp,0(sp)
 1003dfc:	dec00204 	addi	sp,sp,8
 1003e00:	f800283a 	ret

01003e04 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 1003e04:	defffa04 	addi	sp,sp,-24
 1003e08:	dfc00515 	stw	ra,20(sp)
 1003e0c:	df000415 	stw	fp,16(sp)
 1003e10:	df000404 	addi	fp,sp,16
 1003e14:	e13ffd15 	stw	r4,-12(fp)
 1003e18:	e17ffe15 	stw	r5,-8(fp)
 1003e1c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1003e20:	e0bffd17 	ldw	r2,-12(fp)
 1003e24:	10800017 	ldw	r2,0(r2)
 1003e28:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 1003e2c:	e0bffc17 	ldw	r2,-16(fp)
 1003e30:	10c00a04 	addi	r3,r2,40
 1003e34:	e0bffd17 	ldw	r2,-12(fp)
 1003e38:	10800217 	ldw	r2,8(r2)
 1003e3c:	100f883a 	mov	r7,r2
 1003e40:	e1bfff17 	ldw	r6,-4(fp)
 1003e44:	e17ffe17 	ldw	r5,-8(fp)
 1003e48:	1809883a 	mov	r4,r3
 1003e4c:	100442c0 	call	100442c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 1003e50:	e037883a 	mov	sp,fp
 1003e54:	dfc00117 	ldw	ra,4(sp)
 1003e58:	df000017 	ldw	fp,0(sp)
 1003e5c:	dec00204 	addi	sp,sp,8
 1003e60:	f800283a 	ret

01003e64 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 1003e64:	defffa04 	addi	sp,sp,-24
 1003e68:	dfc00515 	stw	ra,20(sp)
 1003e6c:	df000415 	stw	fp,16(sp)
 1003e70:	df000404 	addi	fp,sp,16
 1003e74:	e13ffd15 	stw	r4,-12(fp)
 1003e78:	e17ffe15 	stw	r5,-8(fp)
 1003e7c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1003e80:	e0bffd17 	ldw	r2,-12(fp)
 1003e84:	10800017 	ldw	r2,0(r2)
 1003e88:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 1003e8c:	e0bffc17 	ldw	r2,-16(fp)
 1003e90:	10c00a04 	addi	r3,r2,40
 1003e94:	e0bffd17 	ldw	r2,-12(fp)
 1003e98:	10800217 	ldw	r2,8(r2)
 1003e9c:	100f883a 	mov	r7,r2
 1003ea0:	e1bfff17 	ldw	r6,-4(fp)
 1003ea4:	e17ffe17 	ldw	r5,-8(fp)
 1003ea8:	1809883a 	mov	r4,r3
 1003eac:	10046480 	call	1004648 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 1003eb0:	e037883a 	mov	sp,fp
 1003eb4:	dfc00117 	ldw	ra,4(sp)
 1003eb8:	df000017 	ldw	fp,0(sp)
 1003ebc:	dec00204 	addi	sp,sp,8
 1003ec0:	f800283a 	ret

01003ec4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 1003ec4:	defffc04 	addi	sp,sp,-16
 1003ec8:	dfc00315 	stw	ra,12(sp)
 1003ecc:	df000215 	stw	fp,8(sp)
 1003ed0:	df000204 	addi	fp,sp,8
 1003ed4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1003ed8:	e0bfff17 	ldw	r2,-4(fp)
 1003edc:	10800017 	ldw	r2,0(r2)
 1003ee0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 1003ee4:	e0bffe17 	ldw	r2,-8(fp)
 1003ee8:	10c00a04 	addi	r3,r2,40
 1003eec:	e0bfff17 	ldw	r2,-4(fp)
 1003ef0:	10800217 	ldw	r2,8(r2)
 1003ef4:	100b883a 	mov	r5,r2
 1003ef8:	1809883a 	mov	r4,r3
 1003efc:	10042d40 	call	10042d4 <altera_avalon_jtag_uart_close>
}
 1003f00:	e037883a 	mov	sp,fp
 1003f04:	dfc00117 	ldw	ra,4(sp)
 1003f08:	df000017 	ldw	fp,0(sp)
 1003f0c:	dec00204 	addi	sp,sp,8
 1003f10:	f800283a 	ret

01003f14 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 1003f14:	defffa04 	addi	sp,sp,-24
 1003f18:	dfc00515 	stw	ra,20(sp)
 1003f1c:	df000415 	stw	fp,16(sp)
 1003f20:	df000404 	addi	fp,sp,16
 1003f24:	e13ffd15 	stw	r4,-12(fp)
 1003f28:	e17ffe15 	stw	r5,-8(fp)
 1003f2c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 1003f30:	e0bffd17 	ldw	r2,-12(fp)
 1003f34:	10800017 	ldw	r2,0(r2)
 1003f38:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 1003f3c:	e0bffc17 	ldw	r2,-16(fp)
 1003f40:	10800a04 	addi	r2,r2,40
 1003f44:	e1bfff17 	ldw	r6,-4(fp)
 1003f48:	e17ffe17 	ldw	r5,-8(fp)
 1003f4c:	1009883a 	mov	r4,r2
 1003f50:	100433c0 	call	100433c <altera_avalon_jtag_uart_ioctl>
}
 1003f54:	e037883a 	mov	sp,fp
 1003f58:	dfc00117 	ldw	ra,4(sp)
 1003f5c:	df000017 	ldw	fp,0(sp)
 1003f60:	dec00204 	addi	sp,sp,8
 1003f64:	f800283a 	ret

01003f68 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 1003f68:	defffa04 	addi	sp,sp,-24
 1003f6c:	dfc00515 	stw	ra,20(sp)
 1003f70:	df000415 	stw	fp,16(sp)
 1003f74:	df000404 	addi	fp,sp,16
 1003f78:	e13ffd15 	stw	r4,-12(fp)
 1003f7c:	e17ffe15 	stw	r5,-8(fp)
 1003f80:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1003f84:	e0bffd17 	ldw	r2,-12(fp)
 1003f88:	00c00044 	movi	r3,1
 1003f8c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 1003f90:	e0bffd17 	ldw	r2,-12(fp)
 1003f94:	10800017 	ldw	r2,0(r2)
 1003f98:	10800104 	addi	r2,r2,4
 1003f9c:	1007883a 	mov	r3,r2
 1003fa0:	e0bffd17 	ldw	r2,-12(fp)
 1003fa4:	10800817 	ldw	r2,32(r2)
 1003fa8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 1003fac:	e0bffe17 	ldw	r2,-8(fp)
 1003fb0:	e0ffff17 	ldw	r3,-4(fp)
 1003fb4:	d8000015 	stw	zero,0(sp)
 1003fb8:	e1fffd17 	ldw	r7,-12(fp)
 1003fbc:	01804034 	movhi	r6,256
 1003fc0:	31900a04 	addi	r6,r6,16424
 1003fc4:	180b883a 	mov	r5,r3
 1003fc8:	1009883a 	mov	r4,r2
 1003fcc:	10033740 	call	1003374 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 1003fd0:	e0bffd17 	ldw	r2,-12(fp)
 1003fd4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 1003fd8:	e0bffd17 	ldw	r2,-12(fp)
 1003fdc:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1003fe0:	d0e6b317 	ldw	r3,-25908(gp)
 1003fe4:	e1fffd17 	ldw	r7,-12(fp)
 1003fe8:	01804034 	movhi	r6,256
 1003fec:	31908d04 	addi	r6,r6,16948
 1003ff0:	180b883a 	mov	r5,r3
 1003ff4:	1009883a 	mov	r4,r2
 1003ff8:	10049600 	call	1004960 <alt_alarm_start>
 1003ffc:	1000040e 	bge	r2,zero,1004010 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 1004000:	e0fffd17 	ldw	r3,-12(fp)
 1004004:	00a00034 	movhi	r2,32768
 1004008:	10bfffc4 	addi	r2,r2,-1
 100400c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 1004010:	0001883a 	nop
 1004014:	e037883a 	mov	sp,fp
 1004018:	dfc00117 	ldw	ra,4(sp)
 100401c:	df000017 	ldw	fp,0(sp)
 1004020:	dec00204 	addi	sp,sp,8
 1004024:	f800283a 	ret

01004028 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 1004028:	defff804 	addi	sp,sp,-32
 100402c:	df000715 	stw	fp,28(sp)
 1004030:	df000704 	addi	fp,sp,28
 1004034:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 1004038:	e0bfff17 	ldw	r2,-4(fp)
 100403c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 1004040:	e0bffb17 	ldw	r2,-20(fp)
 1004044:	10800017 	ldw	r2,0(r2)
 1004048:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100404c:	e0bffc17 	ldw	r2,-16(fp)
 1004050:	10800104 	addi	r2,r2,4
 1004054:	10800037 	ldwio	r2,0(r2)
 1004058:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 100405c:	e0bffd17 	ldw	r2,-12(fp)
 1004060:	1080c00c 	andi	r2,r2,768
 1004064:	10006d26 	beq	r2,zero,100421c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 1004068:	e0bffd17 	ldw	r2,-12(fp)
 100406c:	1080400c 	andi	r2,r2,256
 1004070:	10003526 	beq	r2,zero,1004148 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 1004074:	00800074 	movhi	r2,1
 1004078:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100407c:	e0bffb17 	ldw	r2,-20(fp)
 1004080:	10800a17 	ldw	r2,40(r2)
 1004084:	10800044 	addi	r2,r2,1
 1004088:	1081ffcc 	andi	r2,r2,2047
 100408c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 1004090:	e0bffb17 	ldw	r2,-20(fp)
 1004094:	10c00b17 	ldw	r3,44(r2)
 1004098:	e0bffe17 	ldw	r2,-8(fp)
 100409c:	18801526 	beq	r3,r2,10040f4 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 10040a0:	e0bffc17 	ldw	r2,-16(fp)
 10040a4:	10800037 	ldwio	r2,0(r2)
 10040a8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 10040ac:	e0bff917 	ldw	r2,-28(fp)
 10040b0:	10a0000c 	andi	r2,r2,32768
 10040b4:	10001126 	beq	r2,zero,10040fc <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 10040b8:	e0bffb17 	ldw	r2,-20(fp)
 10040bc:	10800a17 	ldw	r2,40(r2)
 10040c0:	e0fff917 	ldw	r3,-28(fp)
 10040c4:	1809883a 	mov	r4,r3
 10040c8:	e0fffb17 	ldw	r3,-20(fp)
 10040cc:	1885883a 	add	r2,r3,r2
 10040d0:	10800e04 	addi	r2,r2,56
 10040d4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 10040d8:	e0bffb17 	ldw	r2,-20(fp)
 10040dc:	10800a17 	ldw	r2,40(r2)
 10040e0:	10800044 	addi	r2,r2,1
 10040e4:	10c1ffcc 	andi	r3,r2,2047
 10040e8:	e0bffb17 	ldw	r2,-20(fp)
 10040ec:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 10040f0:	003fe206 	br	100407c <__alt_data_end+0xff00407c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 10040f4:	0001883a 	nop
 10040f8:	00000106 	br	1004100 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 10040fc:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 1004100:	e0bff917 	ldw	r2,-28(fp)
 1004104:	10bfffec 	andhi	r2,r2,65535
 1004108:	10000f26 	beq	r2,zero,1004148 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100410c:	e0bffb17 	ldw	r2,-20(fp)
 1004110:	10c00817 	ldw	r3,32(r2)
 1004114:	00bfff84 	movi	r2,-2
 1004118:	1886703a 	and	r3,r3,r2
 100411c:	e0bffb17 	ldw	r2,-20(fp)
 1004120:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 1004124:	e0bffc17 	ldw	r2,-16(fp)
 1004128:	10800104 	addi	r2,r2,4
 100412c:	1007883a 	mov	r3,r2
 1004130:	e0bffb17 	ldw	r2,-20(fp)
 1004134:	10800817 	ldw	r2,32(r2)
 1004138:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100413c:	e0bffc17 	ldw	r2,-16(fp)
 1004140:	10800104 	addi	r2,r2,4
 1004144:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 1004148:	e0bffd17 	ldw	r2,-12(fp)
 100414c:	1080800c 	andi	r2,r2,512
 1004150:	103fbe26 	beq	r2,zero,100404c <__alt_data_end+0xff00404c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 1004154:	e0bffd17 	ldw	r2,-12(fp)
 1004158:	1004d43a 	srli	r2,r2,16
 100415c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 1004160:	00001406 	br	10041b4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 1004164:	e0bffc17 	ldw	r2,-16(fp)
 1004168:	e0fffb17 	ldw	r3,-20(fp)
 100416c:	18c00d17 	ldw	r3,52(r3)
 1004170:	e13ffb17 	ldw	r4,-20(fp)
 1004174:	20c7883a 	add	r3,r4,r3
 1004178:	18c20e04 	addi	r3,r3,2104
 100417c:	18c00003 	ldbu	r3,0(r3)
 1004180:	18c03fcc 	andi	r3,r3,255
 1004184:	18c0201c 	xori	r3,r3,128
 1004188:	18ffe004 	addi	r3,r3,-128
 100418c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1004190:	e0bffb17 	ldw	r2,-20(fp)
 1004194:	10800d17 	ldw	r2,52(r2)
 1004198:	10800044 	addi	r2,r2,1
 100419c:	10c1ffcc 	andi	r3,r2,2047
 10041a0:	e0bffb17 	ldw	r2,-20(fp)
 10041a4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 10041a8:	e0bffa17 	ldw	r2,-24(fp)
 10041ac:	10bfffc4 	addi	r2,r2,-1
 10041b0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 10041b4:	e0bffa17 	ldw	r2,-24(fp)
 10041b8:	10000526 	beq	r2,zero,10041d0 <altera_avalon_jtag_uart_irq+0x1a8>
 10041bc:	e0bffb17 	ldw	r2,-20(fp)
 10041c0:	10c00d17 	ldw	r3,52(r2)
 10041c4:	e0bffb17 	ldw	r2,-20(fp)
 10041c8:	10800c17 	ldw	r2,48(r2)
 10041cc:	18bfe51e 	bne	r3,r2,1004164 <__alt_data_end+0xff004164>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 10041d0:	e0bffa17 	ldw	r2,-24(fp)
 10041d4:	103f9d26 	beq	r2,zero,100404c <__alt_data_end+0xff00404c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 10041d8:	e0bffb17 	ldw	r2,-20(fp)
 10041dc:	10c00817 	ldw	r3,32(r2)
 10041e0:	00bfff44 	movi	r2,-3
 10041e4:	1886703a 	and	r3,r3,r2
 10041e8:	e0bffb17 	ldw	r2,-20(fp)
 10041ec:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 10041f0:	e0bffb17 	ldw	r2,-20(fp)
 10041f4:	10800017 	ldw	r2,0(r2)
 10041f8:	10800104 	addi	r2,r2,4
 10041fc:	1007883a 	mov	r3,r2
 1004200:	e0bffb17 	ldw	r2,-20(fp)
 1004204:	10800817 	ldw	r2,32(r2)
 1004208:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100420c:	e0bffc17 	ldw	r2,-16(fp)
 1004210:	10800104 	addi	r2,r2,4
 1004214:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 1004218:	003f8c06 	br	100404c <__alt_data_end+0xff00404c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 100421c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 1004220:	0001883a 	nop
 1004224:	e037883a 	mov	sp,fp
 1004228:	df000017 	ldw	fp,0(sp)
 100422c:	dec00104 	addi	sp,sp,4
 1004230:	f800283a 	ret

01004234 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 1004234:	defff804 	addi	sp,sp,-32
 1004238:	df000715 	stw	fp,28(sp)
 100423c:	df000704 	addi	fp,sp,28
 1004240:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 1004244:	e0bffb17 	ldw	r2,-20(fp)
 1004248:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 100424c:	e0bff917 	ldw	r2,-28(fp)
 1004250:	10800017 	ldw	r2,0(r2)
 1004254:	10800104 	addi	r2,r2,4
 1004258:	10800037 	ldwio	r2,0(r2)
 100425c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 1004260:	e0bffa17 	ldw	r2,-24(fp)
 1004264:	1081000c 	andi	r2,r2,1024
 1004268:	10000b26 	beq	r2,zero,1004298 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 100426c:	e0bff917 	ldw	r2,-28(fp)
 1004270:	10800017 	ldw	r2,0(r2)
 1004274:	10800104 	addi	r2,r2,4
 1004278:	1007883a 	mov	r3,r2
 100427c:	e0bff917 	ldw	r2,-28(fp)
 1004280:	10800817 	ldw	r2,32(r2)
 1004284:	10810014 	ori	r2,r2,1024
 1004288:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 100428c:	e0bff917 	ldw	r2,-28(fp)
 1004290:	10000915 	stw	zero,36(r2)
 1004294:	00000a06 	br	10042c0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 1004298:	e0bff917 	ldw	r2,-28(fp)
 100429c:	10c00917 	ldw	r3,36(r2)
 10042a0:	00a00034 	movhi	r2,32768
 10042a4:	10bfff04 	addi	r2,r2,-4
 10042a8:	10c00536 	bltu	r2,r3,10042c0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 10042ac:	e0bff917 	ldw	r2,-28(fp)
 10042b0:	10800917 	ldw	r2,36(r2)
 10042b4:	10c00044 	addi	r3,r2,1
 10042b8:	e0bff917 	ldw	r2,-28(fp)
 10042bc:	10c00915 	stw	r3,36(r2)
 10042c0:	d0a6b317 	ldw	r2,-25908(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 10042c4:	e037883a 	mov	sp,fp
 10042c8:	df000017 	ldw	fp,0(sp)
 10042cc:	dec00104 	addi	sp,sp,4
 10042d0:	f800283a 	ret

010042d4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 10042d4:	defffd04 	addi	sp,sp,-12
 10042d8:	df000215 	stw	fp,8(sp)
 10042dc:	df000204 	addi	fp,sp,8
 10042e0:	e13ffe15 	stw	r4,-8(fp)
 10042e4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 10042e8:	00000506 	br	1004300 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 10042ec:	e0bfff17 	ldw	r2,-4(fp)
 10042f0:	1090000c 	andi	r2,r2,16384
 10042f4:	10000226 	beq	r2,zero,1004300 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 10042f8:	00bffd44 	movi	r2,-11
 10042fc:	00000b06 	br	100432c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1004300:	e0bffe17 	ldw	r2,-8(fp)
 1004304:	10c00d17 	ldw	r3,52(r2)
 1004308:	e0bffe17 	ldw	r2,-8(fp)
 100430c:	10800c17 	ldw	r2,48(r2)
 1004310:	18800526 	beq	r3,r2,1004328 <altera_avalon_jtag_uart_close+0x54>
 1004314:	e0bffe17 	ldw	r2,-8(fp)
 1004318:	10c00917 	ldw	r3,36(r2)
 100431c:	e0bffe17 	ldw	r2,-8(fp)
 1004320:	10800117 	ldw	r2,4(r2)
 1004324:	18bff136 	bltu	r3,r2,10042ec <__alt_data_end+0xff0042ec>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 1004328:	0005883a 	mov	r2,zero
}
 100432c:	e037883a 	mov	sp,fp
 1004330:	df000017 	ldw	fp,0(sp)
 1004334:	dec00104 	addi	sp,sp,4
 1004338:	f800283a 	ret

0100433c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 100433c:	defffa04 	addi	sp,sp,-24
 1004340:	df000515 	stw	fp,20(sp)
 1004344:	df000504 	addi	fp,sp,20
 1004348:	e13ffd15 	stw	r4,-12(fp)
 100434c:	e17ffe15 	stw	r5,-8(fp)
 1004350:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 1004354:	00bff9c4 	movi	r2,-25
 1004358:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 100435c:	e0bffe17 	ldw	r2,-8(fp)
 1004360:	10da8060 	cmpeqi	r3,r2,27137
 1004364:	1800031e 	bne	r3,zero,1004374 <altera_avalon_jtag_uart_ioctl+0x38>
 1004368:	109a80a0 	cmpeqi	r2,r2,27138
 100436c:	1000181e 	bne	r2,zero,10043d0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 1004370:	00002906 	br	1004418 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 1004374:	e0bffd17 	ldw	r2,-12(fp)
 1004378:	10c00117 	ldw	r3,4(r2)
 100437c:	00a00034 	movhi	r2,32768
 1004380:	10bfffc4 	addi	r2,r2,-1
 1004384:	18802126 	beq	r3,r2,100440c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 1004388:	e0bfff17 	ldw	r2,-4(fp)
 100438c:	10800017 	ldw	r2,0(r2)
 1004390:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 1004394:	e0bffc17 	ldw	r2,-16(fp)
 1004398:	10800090 	cmplti	r2,r2,2
 100439c:	1000061e 	bne	r2,zero,10043b8 <altera_avalon_jtag_uart_ioctl+0x7c>
 10043a0:	e0fffc17 	ldw	r3,-16(fp)
 10043a4:	00a00034 	movhi	r2,32768
 10043a8:	10bfffc4 	addi	r2,r2,-1
 10043ac:	18800226 	beq	r3,r2,10043b8 <altera_avalon_jtag_uart_ioctl+0x7c>
 10043b0:	e0bffc17 	ldw	r2,-16(fp)
 10043b4:	00000206 	br	10043c0 <altera_avalon_jtag_uart_ioctl+0x84>
 10043b8:	00a00034 	movhi	r2,32768
 10043bc:	10bfff84 	addi	r2,r2,-2
 10043c0:	e0fffd17 	ldw	r3,-12(fp)
 10043c4:	18800115 	stw	r2,4(r3)
      rc = 0;
 10043c8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 10043cc:	00000f06 	br	100440c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 10043d0:	e0bffd17 	ldw	r2,-12(fp)
 10043d4:	10c00117 	ldw	r3,4(r2)
 10043d8:	00a00034 	movhi	r2,32768
 10043dc:	10bfffc4 	addi	r2,r2,-1
 10043e0:	18800c26 	beq	r3,r2,1004414 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 10043e4:	e0bffd17 	ldw	r2,-12(fp)
 10043e8:	10c00917 	ldw	r3,36(r2)
 10043ec:	e0bffd17 	ldw	r2,-12(fp)
 10043f0:	10800117 	ldw	r2,4(r2)
 10043f4:	1885803a 	cmpltu	r2,r3,r2
 10043f8:	10c03fcc 	andi	r3,r2,255
 10043fc:	e0bfff17 	ldw	r2,-4(fp)
 1004400:	10c00015 	stw	r3,0(r2)
      rc = 0;
 1004404:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 1004408:	00000206 	br	1004414 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 100440c:	0001883a 	nop
 1004410:	00000106 	br	1004418 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 1004414:	0001883a 	nop

  default:
    break;
  }

  return rc;
 1004418:	e0bffb17 	ldw	r2,-20(fp)
}
 100441c:	e037883a 	mov	sp,fp
 1004420:	df000017 	ldw	fp,0(sp)
 1004424:	dec00104 	addi	sp,sp,4
 1004428:	f800283a 	ret

0100442c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 100442c:	defff304 	addi	sp,sp,-52
 1004430:	dfc00c15 	stw	ra,48(sp)
 1004434:	df000b15 	stw	fp,44(sp)
 1004438:	df000b04 	addi	fp,sp,44
 100443c:	e13ffc15 	stw	r4,-16(fp)
 1004440:	e17ffd15 	stw	r5,-12(fp)
 1004444:	e1bffe15 	stw	r6,-8(fp)
 1004448:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 100444c:	e0bffd17 	ldw	r2,-12(fp)
 1004450:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 1004454:	00004706 	br	1004574 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 1004458:	e0bffc17 	ldw	r2,-16(fp)
 100445c:	10800a17 	ldw	r2,40(r2)
 1004460:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 1004464:	e0bffc17 	ldw	r2,-16(fp)
 1004468:	10800b17 	ldw	r2,44(r2)
 100446c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 1004470:	e0fff717 	ldw	r3,-36(fp)
 1004474:	e0bff817 	ldw	r2,-32(fp)
 1004478:	18800536 	bltu	r3,r2,1004490 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 100447c:	e0fff717 	ldw	r3,-36(fp)
 1004480:	e0bff817 	ldw	r2,-32(fp)
 1004484:	1885c83a 	sub	r2,r3,r2
 1004488:	e0bff615 	stw	r2,-40(fp)
 100448c:	00000406 	br	10044a0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 1004490:	00c20004 	movi	r3,2048
 1004494:	e0bff817 	ldw	r2,-32(fp)
 1004498:	1885c83a 	sub	r2,r3,r2
 100449c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 10044a0:	e0bff617 	ldw	r2,-40(fp)
 10044a4:	10001e26 	beq	r2,zero,1004520 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 10044a8:	e0fffe17 	ldw	r3,-8(fp)
 10044ac:	e0bff617 	ldw	r2,-40(fp)
 10044b0:	1880022e 	bgeu	r3,r2,10044bc <altera_avalon_jtag_uart_read+0x90>
        n = space;
 10044b4:	e0bffe17 	ldw	r2,-8(fp)
 10044b8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 10044bc:	e0bffc17 	ldw	r2,-16(fp)
 10044c0:	10c00e04 	addi	r3,r2,56
 10044c4:	e0bff817 	ldw	r2,-32(fp)
 10044c8:	1885883a 	add	r2,r3,r2
 10044cc:	e1bff617 	ldw	r6,-40(fp)
 10044d0:	100b883a 	mov	r5,r2
 10044d4:	e13ff517 	ldw	r4,-44(fp)
 10044d8:	10017c80 	call	10017c8 <memcpy>
      ptr   += n;
 10044dc:	e0fff517 	ldw	r3,-44(fp)
 10044e0:	e0bff617 	ldw	r2,-40(fp)
 10044e4:	1885883a 	add	r2,r3,r2
 10044e8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 10044ec:	e0fffe17 	ldw	r3,-8(fp)
 10044f0:	e0bff617 	ldw	r2,-40(fp)
 10044f4:	1885c83a 	sub	r2,r3,r2
 10044f8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 10044fc:	e0fff817 	ldw	r3,-32(fp)
 1004500:	e0bff617 	ldw	r2,-40(fp)
 1004504:	1885883a 	add	r2,r3,r2
 1004508:	10c1ffcc 	andi	r3,r2,2047
 100450c:	e0bffc17 	ldw	r2,-16(fp)
 1004510:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 1004514:	e0bffe17 	ldw	r2,-8(fp)
 1004518:	00bfcf16 	blt	zero,r2,1004458 <__alt_data_end+0xff004458>
 100451c:	00000106 	br	1004524 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 1004520:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 1004524:	e0fff517 	ldw	r3,-44(fp)
 1004528:	e0bffd17 	ldw	r2,-12(fp)
 100452c:	1880141e 	bne	r3,r2,1004580 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 1004530:	e0bfff17 	ldw	r2,-4(fp)
 1004534:	1090000c 	andi	r2,r2,16384
 1004538:	1000131e 	bne	r2,zero,1004588 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 100453c:	0001883a 	nop
 1004540:	e0bffc17 	ldw	r2,-16(fp)
 1004544:	10c00a17 	ldw	r3,40(r2)
 1004548:	e0bff717 	ldw	r2,-36(fp)
 100454c:	1880051e 	bne	r3,r2,1004564 <altera_avalon_jtag_uart_read+0x138>
 1004550:	e0bffc17 	ldw	r2,-16(fp)
 1004554:	10c00917 	ldw	r3,36(r2)
 1004558:	e0bffc17 	ldw	r2,-16(fp)
 100455c:	10800117 	ldw	r2,4(r2)
 1004560:	18bff736 	bltu	r3,r2,1004540 <__alt_data_end+0xff004540>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 1004564:	e0bffc17 	ldw	r2,-16(fp)
 1004568:	10c00a17 	ldw	r3,40(r2)
 100456c:	e0bff717 	ldw	r2,-36(fp)
 1004570:	18800726 	beq	r3,r2,1004590 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 1004574:	e0bffe17 	ldw	r2,-8(fp)
 1004578:	00bfb716 	blt	zero,r2,1004458 <__alt_data_end+0xff004458>
 100457c:	00000506 	br	1004594 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 1004580:	0001883a 	nop
 1004584:	00000306 	br	1004594 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 1004588:	0001883a 	nop
 100458c:	00000106 	br	1004594 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 1004590:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 1004594:	e0fff517 	ldw	r3,-44(fp)
 1004598:	e0bffd17 	ldw	r2,-12(fp)
 100459c:	18801826 	beq	r3,r2,1004600 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10045a0:	0005303a 	rdctl	r2,status
 10045a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10045a8:	e0fffb17 	ldw	r3,-20(fp)
 10045ac:	00bfff84 	movi	r2,-2
 10045b0:	1884703a 	and	r2,r3,r2
 10045b4:	1001703a 	wrctl	status,r2
  
  return context;
 10045b8:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 10045bc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 10045c0:	e0bffc17 	ldw	r2,-16(fp)
 10045c4:	10800817 	ldw	r2,32(r2)
 10045c8:	10c00054 	ori	r3,r2,1
 10045cc:	e0bffc17 	ldw	r2,-16(fp)
 10045d0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 10045d4:	e0bffc17 	ldw	r2,-16(fp)
 10045d8:	10800017 	ldw	r2,0(r2)
 10045dc:	10800104 	addi	r2,r2,4
 10045e0:	1007883a 	mov	r3,r2
 10045e4:	e0bffc17 	ldw	r2,-16(fp)
 10045e8:	10800817 	ldw	r2,32(r2)
 10045ec:	18800035 	stwio	r2,0(r3)
 10045f0:	e0bffa17 	ldw	r2,-24(fp)
 10045f4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10045f8:	e0bff917 	ldw	r2,-28(fp)
 10045fc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 1004600:	e0fff517 	ldw	r3,-44(fp)
 1004604:	e0bffd17 	ldw	r2,-12(fp)
 1004608:	18800426 	beq	r3,r2,100461c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 100460c:	e0fff517 	ldw	r3,-44(fp)
 1004610:	e0bffd17 	ldw	r2,-12(fp)
 1004614:	1885c83a 	sub	r2,r3,r2
 1004618:	00000606 	br	1004634 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 100461c:	e0bfff17 	ldw	r2,-4(fp)
 1004620:	1090000c 	andi	r2,r2,16384
 1004624:	10000226 	beq	r2,zero,1004630 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 1004628:	00bffd44 	movi	r2,-11
 100462c:	00000106 	br	1004634 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 1004630:	00bffec4 	movi	r2,-5
}
 1004634:	e037883a 	mov	sp,fp
 1004638:	dfc00117 	ldw	ra,4(sp)
 100463c:	df000017 	ldw	fp,0(sp)
 1004640:	dec00204 	addi	sp,sp,8
 1004644:	f800283a 	ret

01004648 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 1004648:	defff304 	addi	sp,sp,-52
 100464c:	dfc00c15 	stw	ra,48(sp)
 1004650:	df000b15 	stw	fp,44(sp)
 1004654:	df000b04 	addi	fp,sp,44
 1004658:	e13ffc15 	stw	r4,-16(fp)
 100465c:	e17ffd15 	stw	r5,-12(fp)
 1004660:	e1bffe15 	stw	r6,-8(fp)
 1004664:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 1004668:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 100466c:	e0bffd17 	ldw	r2,-12(fp)
 1004670:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 1004674:	00003706 	br	1004754 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 1004678:	e0bffc17 	ldw	r2,-16(fp)
 100467c:	10800c17 	ldw	r2,48(r2)
 1004680:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 1004684:	e0bffc17 	ldw	r2,-16(fp)
 1004688:	10800d17 	ldw	r2,52(r2)
 100468c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 1004690:	e0fff917 	ldw	r3,-28(fp)
 1004694:	e0bff517 	ldw	r2,-44(fp)
 1004698:	1880062e 	bgeu	r3,r2,10046b4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 100469c:	e0fff517 	ldw	r3,-44(fp)
 10046a0:	e0bff917 	ldw	r2,-28(fp)
 10046a4:	1885c83a 	sub	r2,r3,r2
 10046a8:	10bfffc4 	addi	r2,r2,-1
 10046ac:	e0bff615 	stw	r2,-40(fp)
 10046b0:	00000b06 	br	10046e0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 10046b4:	e0bff517 	ldw	r2,-44(fp)
 10046b8:	10000526 	beq	r2,zero,10046d0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 10046bc:	00c20004 	movi	r3,2048
 10046c0:	e0bff917 	ldw	r2,-28(fp)
 10046c4:	1885c83a 	sub	r2,r3,r2
 10046c8:	e0bff615 	stw	r2,-40(fp)
 10046cc:	00000406 	br	10046e0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 10046d0:	00c1ffc4 	movi	r3,2047
 10046d4:	e0bff917 	ldw	r2,-28(fp)
 10046d8:	1885c83a 	sub	r2,r3,r2
 10046dc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 10046e0:	e0bff617 	ldw	r2,-40(fp)
 10046e4:	10001e26 	beq	r2,zero,1004760 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 10046e8:	e0fffe17 	ldw	r3,-8(fp)
 10046ec:	e0bff617 	ldw	r2,-40(fp)
 10046f0:	1880022e 	bgeu	r3,r2,10046fc <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 10046f4:	e0bffe17 	ldw	r2,-8(fp)
 10046f8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 10046fc:	e0bffc17 	ldw	r2,-16(fp)
 1004700:	10c20e04 	addi	r3,r2,2104
 1004704:	e0bff917 	ldw	r2,-28(fp)
 1004708:	1885883a 	add	r2,r3,r2
 100470c:	e1bff617 	ldw	r6,-40(fp)
 1004710:	e17ffd17 	ldw	r5,-12(fp)
 1004714:	1009883a 	mov	r4,r2
 1004718:	10017c80 	call	10017c8 <memcpy>
      ptr   += n;
 100471c:	e0fffd17 	ldw	r3,-12(fp)
 1004720:	e0bff617 	ldw	r2,-40(fp)
 1004724:	1885883a 	add	r2,r3,r2
 1004728:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 100472c:	e0fffe17 	ldw	r3,-8(fp)
 1004730:	e0bff617 	ldw	r2,-40(fp)
 1004734:	1885c83a 	sub	r2,r3,r2
 1004738:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100473c:	e0fff917 	ldw	r3,-28(fp)
 1004740:	e0bff617 	ldw	r2,-40(fp)
 1004744:	1885883a 	add	r2,r3,r2
 1004748:	10c1ffcc 	andi	r3,r2,2047
 100474c:	e0bffc17 	ldw	r2,-16(fp)
 1004750:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 1004754:	e0bffe17 	ldw	r2,-8(fp)
 1004758:	00bfc716 	blt	zero,r2,1004678 <__alt_data_end+0xff004678>
 100475c:	00000106 	br	1004764 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 1004760:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1004764:	0005303a 	rdctl	r2,status
 1004768:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100476c:	e0fffb17 	ldw	r3,-20(fp)
 1004770:	00bfff84 	movi	r2,-2
 1004774:	1884703a 	and	r2,r3,r2
 1004778:	1001703a 	wrctl	status,r2
  
  return context;
 100477c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 1004780:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1004784:	e0bffc17 	ldw	r2,-16(fp)
 1004788:	10800817 	ldw	r2,32(r2)
 100478c:	10c00094 	ori	r3,r2,2
 1004790:	e0bffc17 	ldw	r2,-16(fp)
 1004794:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1004798:	e0bffc17 	ldw	r2,-16(fp)
 100479c:	10800017 	ldw	r2,0(r2)
 10047a0:	10800104 	addi	r2,r2,4
 10047a4:	1007883a 	mov	r3,r2
 10047a8:	e0bffc17 	ldw	r2,-16(fp)
 10047ac:	10800817 	ldw	r2,32(r2)
 10047b0:	18800035 	stwio	r2,0(r3)
 10047b4:	e0bffa17 	ldw	r2,-24(fp)
 10047b8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10047bc:	e0bff817 	ldw	r2,-32(fp)
 10047c0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 10047c4:	e0bffe17 	ldw	r2,-8(fp)
 10047c8:	0080100e 	bge	zero,r2,100480c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 10047cc:	e0bfff17 	ldw	r2,-4(fp)
 10047d0:	1090000c 	andi	r2,r2,16384
 10047d4:	1000101e 	bne	r2,zero,1004818 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 10047d8:	0001883a 	nop
 10047dc:	e0bffc17 	ldw	r2,-16(fp)
 10047e0:	10c00d17 	ldw	r3,52(r2)
 10047e4:	e0bff517 	ldw	r2,-44(fp)
 10047e8:	1880051e 	bne	r3,r2,1004800 <altera_avalon_jtag_uart_write+0x1b8>
 10047ec:	e0bffc17 	ldw	r2,-16(fp)
 10047f0:	10c00917 	ldw	r3,36(r2)
 10047f4:	e0bffc17 	ldw	r2,-16(fp)
 10047f8:	10800117 	ldw	r2,4(r2)
 10047fc:	18bff736 	bltu	r3,r2,10047dc <__alt_data_end+0xff0047dc>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 1004800:	e0bffc17 	ldw	r2,-16(fp)
 1004804:	10800917 	ldw	r2,36(r2)
 1004808:	1000051e 	bne	r2,zero,1004820 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 100480c:	e0bffe17 	ldw	r2,-8(fp)
 1004810:	00bfd016 	blt	zero,r2,1004754 <__alt_data_end+0xff004754>
 1004814:	00000306 	br	1004824 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 1004818:	0001883a 	nop
 100481c:	00000106 	br	1004824 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 1004820:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 1004824:	e0fffd17 	ldw	r3,-12(fp)
 1004828:	e0bff717 	ldw	r2,-36(fp)
 100482c:	18800426 	beq	r3,r2,1004840 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 1004830:	e0fffd17 	ldw	r3,-12(fp)
 1004834:	e0bff717 	ldw	r2,-36(fp)
 1004838:	1885c83a 	sub	r2,r3,r2
 100483c:	00000606 	br	1004858 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 1004840:	e0bfff17 	ldw	r2,-4(fp)
 1004844:	1090000c 	andi	r2,r2,16384
 1004848:	10000226 	beq	r2,zero,1004854 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 100484c:	00bffd44 	movi	r2,-11
 1004850:	00000106 	br	1004858 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 1004854:	00bffec4 	movi	r2,-5
}
 1004858:	e037883a 	mov	sp,fp
 100485c:	dfc00117 	ldw	ra,4(sp)
 1004860:	df000017 	ldw	fp,0(sp)
 1004864:	dec00204 	addi	sp,sp,8
 1004868:	f800283a 	ret

0100486c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 100486c:	defffa04 	addi	sp,sp,-24
 1004870:	dfc00515 	stw	ra,20(sp)
 1004874:	df000415 	stw	fp,16(sp)
 1004878:	df000404 	addi	fp,sp,16
 100487c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 1004880:	0007883a 	mov	r3,zero
 1004884:	e0bfff17 	ldw	r2,-4(fp)
 1004888:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 100488c:	e0bfff17 	ldw	r2,-4(fp)
 1004890:	10800104 	addi	r2,r2,4
 1004894:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1004898:	0005303a 	rdctl	r2,status
 100489c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10048a0:	e0fffd17 	ldw	r3,-12(fp)
 10048a4:	00bfff84 	movi	r2,-2
 10048a8:	1884703a 	and	r2,r3,r2
 10048ac:	1001703a 	wrctl	status,r2
  
  return context;
 10048b0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 10048b4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 10048b8:	10051740 	call	1005174 <alt_tick>
 10048bc:	e0bffc17 	ldw	r2,-16(fp)
 10048c0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10048c4:	e0bffe17 	ldw	r2,-8(fp)
 10048c8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 10048cc:	0001883a 	nop
 10048d0:	e037883a 	mov	sp,fp
 10048d4:	dfc00117 	ldw	ra,4(sp)
 10048d8:	df000017 	ldw	fp,0(sp)
 10048dc:	dec00204 	addi	sp,sp,8
 10048e0:	f800283a 	ret

010048e4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 10048e4:	defff804 	addi	sp,sp,-32
 10048e8:	dfc00715 	stw	ra,28(sp)
 10048ec:	df000615 	stw	fp,24(sp)
 10048f0:	df000604 	addi	fp,sp,24
 10048f4:	e13ffc15 	stw	r4,-16(fp)
 10048f8:	e17ffd15 	stw	r5,-12(fp)
 10048fc:	e1bffe15 	stw	r6,-8(fp)
 1004900:	e1ffff15 	stw	r7,-4(fp)
 1004904:	e0bfff17 	ldw	r2,-4(fp)
 1004908:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 100490c:	d0a6b317 	ldw	r2,-25908(gp)
 1004910:	1000021e 	bne	r2,zero,100491c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 1004914:	e0bffb17 	ldw	r2,-20(fp)
 1004918:	d0a6b315 	stw	r2,-25908(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 100491c:	e0bffc17 	ldw	r2,-16(fp)
 1004920:	10800104 	addi	r2,r2,4
 1004924:	00c001c4 	movi	r3,7
 1004928:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 100492c:	d8000015 	stw	zero,0(sp)
 1004930:	e1fffc17 	ldw	r7,-16(fp)
 1004934:	01804034 	movhi	r6,256
 1004938:	31921b04 	addi	r6,r6,18540
 100493c:	e17ffe17 	ldw	r5,-8(fp)
 1004940:	e13ffd17 	ldw	r4,-12(fp)
 1004944:	10033740 	call	1003374 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 1004948:	0001883a 	nop
 100494c:	e037883a 	mov	sp,fp
 1004950:	dfc00117 	ldw	ra,4(sp)
 1004954:	df000017 	ldw	fp,0(sp)
 1004958:	dec00204 	addi	sp,sp,8
 100495c:	f800283a 	ret

01004960 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 1004960:	defff504 	addi	sp,sp,-44
 1004964:	df000a15 	stw	fp,40(sp)
 1004968:	df000a04 	addi	fp,sp,40
 100496c:	e13ffc15 	stw	r4,-16(fp)
 1004970:	e17ffd15 	stw	r5,-12(fp)
 1004974:	e1bffe15 	stw	r6,-8(fp)
 1004978:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 100497c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1004980:	d0a6b317 	ldw	r2,-25908(gp)
  
  if (alt_ticks_per_second ())
 1004984:	10003c26 	beq	r2,zero,1004a78 <alt_alarm_start+0x118>
  {
    if (alarm)
 1004988:	e0bffc17 	ldw	r2,-16(fp)
 100498c:	10003826 	beq	r2,zero,1004a70 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 1004990:	e0bffc17 	ldw	r2,-16(fp)
 1004994:	e0fffe17 	ldw	r3,-8(fp)
 1004998:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 100499c:	e0bffc17 	ldw	r2,-16(fp)
 10049a0:	e0ffff17 	ldw	r3,-4(fp)
 10049a4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10049a8:	0005303a 	rdctl	r2,status
 10049ac:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10049b0:	e0fff917 	ldw	r3,-28(fp)
 10049b4:	00bfff84 	movi	r2,-2
 10049b8:	1884703a 	and	r2,r3,r2
 10049bc:	1001703a 	wrctl	status,r2
  
  return context;
 10049c0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 10049c4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 10049c8:	d0a6b417 	ldw	r2,-25904(gp)
      
      current_nticks = alt_nticks();
 10049cc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 10049d0:	e0fffd17 	ldw	r3,-12(fp)
 10049d4:	e0bff617 	ldw	r2,-40(fp)
 10049d8:	1885883a 	add	r2,r3,r2
 10049dc:	10c00044 	addi	r3,r2,1
 10049e0:	e0bffc17 	ldw	r2,-16(fp)
 10049e4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 10049e8:	e0bffc17 	ldw	r2,-16(fp)
 10049ec:	10c00217 	ldw	r3,8(r2)
 10049f0:	e0bff617 	ldw	r2,-40(fp)
 10049f4:	1880042e 	bgeu	r3,r2,1004a08 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 10049f8:	e0bffc17 	ldw	r2,-16(fp)
 10049fc:	00c00044 	movi	r3,1
 1004a00:	10c00405 	stb	r3,16(r2)
 1004a04:	00000206 	br	1004a10 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 1004a08:	e0bffc17 	ldw	r2,-16(fp)
 1004a0c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 1004a10:	e0bffc17 	ldw	r2,-16(fp)
 1004a14:	d0e00c04 	addi	r3,gp,-32720
 1004a18:	e0fffa15 	stw	r3,-24(fp)
 1004a1c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1004a20:	e0bffb17 	ldw	r2,-20(fp)
 1004a24:	e0fffa17 	ldw	r3,-24(fp)
 1004a28:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 1004a2c:	e0bffa17 	ldw	r2,-24(fp)
 1004a30:	10c00017 	ldw	r3,0(r2)
 1004a34:	e0bffb17 	ldw	r2,-20(fp)
 1004a38:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1004a3c:	e0bffa17 	ldw	r2,-24(fp)
 1004a40:	10800017 	ldw	r2,0(r2)
 1004a44:	e0fffb17 	ldw	r3,-20(fp)
 1004a48:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 1004a4c:	e0bffa17 	ldw	r2,-24(fp)
 1004a50:	e0fffb17 	ldw	r3,-20(fp)
 1004a54:	10c00015 	stw	r3,0(r2)
 1004a58:	e0bff817 	ldw	r2,-32(fp)
 1004a5c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1004a60:	e0bff717 	ldw	r2,-36(fp)
 1004a64:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 1004a68:	0005883a 	mov	r2,zero
 1004a6c:	00000306 	br	1004a7c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 1004a70:	00bffa84 	movi	r2,-22
 1004a74:	00000106 	br	1004a7c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 1004a78:	00bfde84 	movi	r2,-134
  }
}
 1004a7c:	e037883a 	mov	sp,fp
 1004a80:	df000017 	ldw	fp,0(sp)
 1004a84:	dec00104 	addi	sp,sp,4
 1004a88:	f800283a 	ret

01004a8c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 1004a8c:	defffe04 	addi	sp,sp,-8
 1004a90:	df000115 	stw	fp,4(sp)
 1004a94:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 1004a98:	e03fff15 	stw	zero,-4(fp)
 1004a9c:	00000506 	br	1004ab4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 1004aa0:	e0bfff17 	ldw	r2,-4(fp)
 1004aa4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 1004aa8:	e0bfff17 	ldw	r2,-4(fp)
 1004aac:	10800804 	addi	r2,r2,32
 1004ab0:	e0bfff15 	stw	r2,-4(fp)
 1004ab4:	e0bfff17 	ldw	r2,-4(fp)
 1004ab8:	10820030 	cmpltui	r2,r2,2048
 1004abc:	103ff81e 	bne	r2,zero,1004aa0 <__alt_data_end+0xff004aa0>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 1004ac0:	0001883a 	nop
 1004ac4:	e037883a 	mov	sp,fp
 1004ac8:	df000017 	ldw	fp,0(sp)
 1004acc:	dec00104 	addi	sp,sp,4
 1004ad0:	f800283a 	ret

01004ad4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1004ad4:	defffe04 	addi	sp,sp,-8
 1004ad8:	dfc00115 	stw	ra,4(sp)
 1004adc:	df000015 	stw	fp,0(sp)
 1004ae0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1004ae4:	d0a00917 	ldw	r2,-32732(gp)
 1004ae8:	10000326 	beq	r2,zero,1004af8 <alt_get_errno+0x24>
 1004aec:	d0a00917 	ldw	r2,-32732(gp)
 1004af0:	103ee83a 	callr	r2
 1004af4:	00000106 	br	1004afc <alt_get_errno+0x28>
 1004af8:	d0a6ad04 	addi	r2,gp,-25932
}
 1004afc:	e037883a 	mov	sp,fp
 1004b00:	dfc00117 	ldw	ra,4(sp)
 1004b04:	df000017 	ldw	fp,0(sp)
 1004b08:	dec00204 	addi	sp,sp,8
 1004b0c:	f800283a 	ret

01004b10 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 1004b10:	defffa04 	addi	sp,sp,-24
 1004b14:	dfc00515 	stw	ra,20(sp)
 1004b18:	df000415 	stw	fp,16(sp)
 1004b1c:	df000404 	addi	fp,sp,16
 1004b20:	e13ffe15 	stw	r4,-8(fp)
 1004b24:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 1004b28:	e0bffe17 	ldw	r2,-8(fp)
 1004b2c:	10000326 	beq	r2,zero,1004b3c <alt_dev_llist_insert+0x2c>
 1004b30:	e0bffe17 	ldw	r2,-8(fp)
 1004b34:	10800217 	ldw	r2,8(r2)
 1004b38:	1000061e 	bne	r2,zero,1004b54 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 1004b3c:	1004ad40 	call	1004ad4 <alt_get_errno>
 1004b40:	1007883a 	mov	r3,r2
 1004b44:	00800584 	movi	r2,22
 1004b48:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 1004b4c:	00bffa84 	movi	r2,-22
 1004b50:	00001306 	br	1004ba0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 1004b54:	e0bffe17 	ldw	r2,-8(fp)
 1004b58:	e0ffff17 	ldw	r3,-4(fp)
 1004b5c:	e0fffc15 	stw	r3,-16(fp)
 1004b60:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1004b64:	e0bffd17 	ldw	r2,-12(fp)
 1004b68:	e0fffc17 	ldw	r3,-16(fp)
 1004b6c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 1004b70:	e0bffc17 	ldw	r2,-16(fp)
 1004b74:	10c00017 	ldw	r3,0(r2)
 1004b78:	e0bffd17 	ldw	r2,-12(fp)
 1004b7c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1004b80:	e0bffc17 	ldw	r2,-16(fp)
 1004b84:	10800017 	ldw	r2,0(r2)
 1004b88:	e0fffd17 	ldw	r3,-12(fp)
 1004b8c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 1004b90:	e0bffc17 	ldw	r2,-16(fp)
 1004b94:	e0fffd17 	ldw	r3,-12(fp)
 1004b98:	10c00015 	stw	r3,0(r2)

  return 0;  
 1004b9c:	0005883a 	mov	r2,zero
}
 1004ba0:	e037883a 	mov	sp,fp
 1004ba4:	dfc00117 	ldw	ra,4(sp)
 1004ba8:	df000017 	ldw	fp,0(sp)
 1004bac:	dec00204 	addi	sp,sp,8
 1004bb0:	f800283a 	ret

01004bb4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 1004bb4:	defffd04 	addi	sp,sp,-12
 1004bb8:	dfc00215 	stw	ra,8(sp)
 1004bbc:	df000115 	stw	fp,4(sp)
 1004bc0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1004bc4:	00804034 	movhi	r2,256
 1004bc8:	10963f04 	addi	r2,r2,22780
 1004bcc:	e0bfff15 	stw	r2,-4(fp)
 1004bd0:	00000606 	br	1004bec <_do_ctors+0x38>
        (*ctor) (); 
 1004bd4:	e0bfff17 	ldw	r2,-4(fp)
 1004bd8:	10800017 	ldw	r2,0(r2)
 1004bdc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1004be0:	e0bfff17 	ldw	r2,-4(fp)
 1004be4:	10bfff04 	addi	r2,r2,-4
 1004be8:	e0bfff15 	stw	r2,-4(fp)
 1004bec:	e0ffff17 	ldw	r3,-4(fp)
 1004bf0:	00804034 	movhi	r2,256
 1004bf4:	10964004 	addi	r2,r2,22784
 1004bf8:	18bff62e 	bgeu	r3,r2,1004bd4 <__alt_data_end+0xff004bd4>
        (*ctor) (); 
}
 1004bfc:	0001883a 	nop
 1004c00:	e037883a 	mov	sp,fp
 1004c04:	dfc00117 	ldw	ra,4(sp)
 1004c08:	df000017 	ldw	fp,0(sp)
 1004c0c:	dec00204 	addi	sp,sp,8
 1004c10:	f800283a 	ret

01004c14 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 1004c14:	defffd04 	addi	sp,sp,-12
 1004c18:	dfc00215 	stw	ra,8(sp)
 1004c1c:	df000115 	stw	fp,4(sp)
 1004c20:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1004c24:	00804034 	movhi	r2,256
 1004c28:	10963f04 	addi	r2,r2,22780
 1004c2c:	e0bfff15 	stw	r2,-4(fp)
 1004c30:	00000606 	br	1004c4c <_do_dtors+0x38>
        (*dtor) (); 
 1004c34:	e0bfff17 	ldw	r2,-4(fp)
 1004c38:	10800017 	ldw	r2,0(r2)
 1004c3c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1004c40:	e0bfff17 	ldw	r2,-4(fp)
 1004c44:	10bfff04 	addi	r2,r2,-4
 1004c48:	e0bfff15 	stw	r2,-4(fp)
 1004c4c:	e0ffff17 	ldw	r3,-4(fp)
 1004c50:	00804034 	movhi	r2,256
 1004c54:	10964004 	addi	r2,r2,22784
 1004c58:	18bff62e 	bgeu	r3,r2,1004c34 <__alt_data_end+0xff004c34>
        (*dtor) (); 
}
 1004c5c:	0001883a 	nop
 1004c60:	e037883a 	mov	sp,fp
 1004c64:	dfc00117 	ldw	ra,4(sp)
 1004c68:	df000017 	ldw	fp,0(sp)
 1004c6c:	dec00204 	addi	sp,sp,8
 1004c70:	f800283a 	ret

01004c74 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 1004c74:	defffe04 	addi	sp,sp,-8
 1004c78:	dfc00115 	stw	ra,4(sp)
 1004c7c:	df000015 	stw	fp,0(sp)
 1004c80:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 1004c84:	01440004 	movi	r5,4096
 1004c88:	0009883a 	mov	r4,zero
 1004c8c:	10054dc0 	call	10054dc <alt_icache_flush>
#endif
}
 1004c90:	0001883a 	nop
 1004c94:	e037883a 	mov	sp,fp
 1004c98:	dfc00117 	ldw	ra,4(sp)
 1004c9c:	df000017 	ldw	fp,0(sp)
 1004ca0:	dec00204 	addi	sp,sp,8
 1004ca4:	f800283a 	ret

01004ca8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 1004ca8:	defffe04 	addi	sp,sp,-8
 1004cac:	df000115 	stw	fp,4(sp)
 1004cb0:	df000104 	addi	fp,sp,4
 1004cb4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 1004cb8:	e0bfff17 	ldw	r2,-4(fp)
 1004cbc:	10bffe84 	addi	r2,r2,-6
 1004cc0:	10c00428 	cmpgeui	r3,r2,16
 1004cc4:	18001a1e 	bne	r3,zero,1004d30 <alt_exception_cause_generated_bad_addr+0x88>
 1004cc8:	100690ba 	slli	r3,r2,2
 1004ccc:	00804034 	movhi	r2,256
 1004cd0:	10933804 	addi	r2,r2,19680
 1004cd4:	1885883a 	add	r2,r3,r2
 1004cd8:	10800017 	ldw	r2,0(r2)
 1004cdc:	1000683a 	jmp	r2
 1004ce0:	01004d20 	cmpeqi	r4,zero,308
 1004ce4:	01004d20 	cmpeqi	r4,zero,308
 1004ce8:	01004d30 	cmpltui	r4,zero,308
 1004cec:	01004d30 	cmpltui	r4,zero,308
 1004cf0:	01004d30 	cmpltui	r4,zero,308
 1004cf4:	01004d20 	cmpeqi	r4,zero,308
 1004cf8:	01004d28 	cmpgeui	r4,zero,308
 1004cfc:	01004d30 	cmpltui	r4,zero,308
 1004d00:	01004d20 	cmpeqi	r4,zero,308
 1004d04:	01004d20 	cmpeqi	r4,zero,308
 1004d08:	01004d30 	cmpltui	r4,zero,308
 1004d0c:	01004d20 	cmpeqi	r4,zero,308
 1004d10:	01004d28 	cmpgeui	r4,zero,308
 1004d14:	01004d30 	cmpltui	r4,zero,308
 1004d18:	01004d30 	cmpltui	r4,zero,308
 1004d1c:	01004d20 	cmpeqi	r4,zero,308
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 1004d20:	00800044 	movi	r2,1
 1004d24:	00000306 	br	1004d34 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 1004d28:	0005883a 	mov	r2,zero
 1004d2c:	00000106 	br	1004d34 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 1004d30:	0005883a 	mov	r2,zero
  }
}
 1004d34:	e037883a 	mov	sp,fp
 1004d38:	df000017 	ldw	fp,0(sp)
 1004d3c:	dec00104 	addi	sp,sp,4
 1004d40:	f800283a 	ret

01004d44 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 1004d44:	defff904 	addi	sp,sp,-28
 1004d48:	dfc00615 	stw	ra,24(sp)
 1004d4c:	df000515 	stw	fp,20(sp)
 1004d50:	df000504 	addi	fp,sp,20
 1004d54:	e13ffc15 	stw	r4,-16(fp)
 1004d58:	e17ffd15 	stw	r5,-12(fp)
 1004d5c:	e1bffe15 	stw	r6,-8(fp)
 1004d60:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 1004d64:	e1bfff17 	ldw	r6,-4(fp)
 1004d68:	e17ffe17 	ldw	r5,-8(fp)
 1004d6c:	e13ffd17 	ldw	r4,-12(fp)
 1004d70:	1004f840 	call	1004f84 <open>
 1004d74:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 1004d78:	e0bffb17 	ldw	r2,-20(fp)
 1004d7c:	10001c16 	blt	r2,zero,1004df0 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 1004d80:	00804034 	movhi	r2,256
 1004d84:	10986804 	addi	r2,r2,24992
 1004d88:	e0fffb17 	ldw	r3,-20(fp)
 1004d8c:	18c00324 	muli	r3,r3,12
 1004d90:	10c5883a 	add	r2,r2,r3
 1004d94:	10c00017 	ldw	r3,0(r2)
 1004d98:	e0bffc17 	ldw	r2,-16(fp)
 1004d9c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 1004da0:	00804034 	movhi	r2,256
 1004da4:	10986804 	addi	r2,r2,24992
 1004da8:	e0fffb17 	ldw	r3,-20(fp)
 1004dac:	18c00324 	muli	r3,r3,12
 1004db0:	10c5883a 	add	r2,r2,r3
 1004db4:	10800104 	addi	r2,r2,4
 1004db8:	10c00017 	ldw	r3,0(r2)
 1004dbc:	e0bffc17 	ldw	r2,-16(fp)
 1004dc0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 1004dc4:	00804034 	movhi	r2,256
 1004dc8:	10986804 	addi	r2,r2,24992
 1004dcc:	e0fffb17 	ldw	r3,-20(fp)
 1004dd0:	18c00324 	muli	r3,r3,12
 1004dd4:	10c5883a 	add	r2,r2,r3
 1004dd8:	10800204 	addi	r2,r2,8
 1004ddc:	10c00017 	ldw	r3,0(r2)
 1004de0:	e0bffc17 	ldw	r2,-16(fp)
 1004de4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 1004de8:	e13ffb17 	ldw	r4,-20(fp)
 1004dec:	1003aec0 	call	1003aec <alt_release_fd>
  }
} 
 1004df0:	0001883a 	nop
 1004df4:	e037883a 	mov	sp,fp
 1004df8:	dfc00117 	ldw	ra,4(sp)
 1004dfc:	df000017 	ldw	fp,0(sp)
 1004e00:	dec00204 	addi	sp,sp,8
 1004e04:	f800283a 	ret

01004e08 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 1004e08:	defffb04 	addi	sp,sp,-20
 1004e0c:	dfc00415 	stw	ra,16(sp)
 1004e10:	df000315 	stw	fp,12(sp)
 1004e14:	df000304 	addi	fp,sp,12
 1004e18:	e13ffd15 	stw	r4,-12(fp)
 1004e1c:	e17ffe15 	stw	r5,-8(fp)
 1004e20:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 1004e24:	01c07fc4 	movi	r7,511
 1004e28:	01800044 	movi	r6,1
 1004e2c:	e17ffd17 	ldw	r5,-12(fp)
 1004e30:	01004034 	movhi	r4,256
 1004e34:	21186b04 	addi	r4,r4,25004
 1004e38:	1004d440 	call	1004d44 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 1004e3c:	01c07fc4 	movi	r7,511
 1004e40:	000d883a 	mov	r6,zero
 1004e44:	e17ffe17 	ldw	r5,-8(fp)
 1004e48:	01004034 	movhi	r4,256
 1004e4c:	21186804 	addi	r4,r4,24992
 1004e50:	1004d440 	call	1004d44 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 1004e54:	01c07fc4 	movi	r7,511
 1004e58:	01800044 	movi	r6,1
 1004e5c:	e17fff17 	ldw	r5,-4(fp)
 1004e60:	01004034 	movhi	r4,256
 1004e64:	21186e04 	addi	r4,r4,25016
 1004e68:	1004d440 	call	1004d44 <alt_open_fd>
}  
 1004e6c:	0001883a 	nop
 1004e70:	e037883a 	mov	sp,fp
 1004e74:	dfc00117 	ldw	ra,4(sp)
 1004e78:	df000017 	ldw	fp,0(sp)
 1004e7c:	dec00204 	addi	sp,sp,8
 1004e80:	f800283a 	ret

01004e84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1004e84:	defffe04 	addi	sp,sp,-8
 1004e88:	dfc00115 	stw	ra,4(sp)
 1004e8c:	df000015 	stw	fp,0(sp)
 1004e90:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1004e94:	d0a00917 	ldw	r2,-32732(gp)
 1004e98:	10000326 	beq	r2,zero,1004ea8 <alt_get_errno+0x24>
 1004e9c:	d0a00917 	ldw	r2,-32732(gp)
 1004ea0:	103ee83a 	callr	r2
 1004ea4:	00000106 	br	1004eac <alt_get_errno+0x28>
 1004ea8:	d0a6ad04 	addi	r2,gp,-25932
}
 1004eac:	e037883a 	mov	sp,fp
 1004eb0:	dfc00117 	ldw	ra,4(sp)
 1004eb4:	df000017 	ldw	fp,0(sp)
 1004eb8:	dec00204 	addi	sp,sp,8
 1004ebc:	f800283a 	ret

01004ec0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 1004ec0:	defffd04 	addi	sp,sp,-12
 1004ec4:	df000215 	stw	fp,8(sp)
 1004ec8:	df000204 	addi	fp,sp,8
 1004ecc:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 1004ed0:	e0bfff17 	ldw	r2,-4(fp)
 1004ed4:	10800217 	ldw	r2,8(r2)
 1004ed8:	10d00034 	orhi	r3,r2,16384
 1004edc:	e0bfff17 	ldw	r2,-4(fp)
 1004ee0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1004ee4:	e03ffe15 	stw	zero,-8(fp)
 1004ee8:	00001d06 	br	1004f60 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 1004eec:	00804034 	movhi	r2,256
 1004ef0:	10986804 	addi	r2,r2,24992
 1004ef4:	e0fffe17 	ldw	r3,-8(fp)
 1004ef8:	18c00324 	muli	r3,r3,12
 1004efc:	10c5883a 	add	r2,r2,r3
 1004f00:	10c00017 	ldw	r3,0(r2)
 1004f04:	e0bfff17 	ldw	r2,-4(fp)
 1004f08:	10800017 	ldw	r2,0(r2)
 1004f0c:	1880111e 	bne	r3,r2,1004f54 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 1004f10:	00804034 	movhi	r2,256
 1004f14:	10986804 	addi	r2,r2,24992
 1004f18:	e0fffe17 	ldw	r3,-8(fp)
 1004f1c:	18c00324 	muli	r3,r3,12
 1004f20:	10c5883a 	add	r2,r2,r3
 1004f24:	10800204 	addi	r2,r2,8
 1004f28:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 1004f2c:	1000090e 	bge	r2,zero,1004f54 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 1004f30:	e0bffe17 	ldw	r2,-8(fp)
 1004f34:	10c00324 	muli	r3,r2,12
 1004f38:	00804034 	movhi	r2,256
 1004f3c:	10986804 	addi	r2,r2,24992
 1004f40:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 1004f44:	e0bfff17 	ldw	r2,-4(fp)
 1004f48:	18800226 	beq	r3,r2,1004f54 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 1004f4c:	00bffcc4 	movi	r2,-13
 1004f50:	00000806 	br	1004f74 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1004f54:	e0bffe17 	ldw	r2,-8(fp)
 1004f58:	10800044 	addi	r2,r2,1
 1004f5c:	e0bffe15 	stw	r2,-8(fp)
 1004f60:	d0a00817 	ldw	r2,-32736(gp)
 1004f64:	1007883a 	mov	r3,r2
 1004f68:	e0bffe17 	ldw	r2,-8(fp)
 1004f6c:	18bfdf2e 	bgeu	r3,r2,1004eec <__alt_data_end+0xff004eec>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 1004f70:	0005883a 	mov	r2,zero
}
 1004f74:	e037883a 	mov	sp,fp
 1004f78:	df000017 	ldw	fp,0(sp)
 1004f7c:	dec00104 	addi	sp,sp,4
 1004f80:	f800283a 	ret

01004f84 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 1004f84:	defff604 	addi	sp,sp,-40
 1004f88:	dfc00915 	stw	ra,36(sp)
 1004f8c:	df000815 	stw	fp,32(sp)
 1004f90:	df000804 	addi	fp,sp,32
 1004f94:	e13ffd15 	stw	r4,-12(fp)
 1004f98:	e17ffe15 	stw	r5,-8(fp)
 1004f9c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 1004fa0:	00bfffc4 	movi	r2,-1
 1004fa4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 1004fa8:	00bffb44 	movi	r2,-19
 1004fac:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 1004fb0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 1004fb4:	d1600604 	addi	r5,gp,-32744
 1004fb8:	e13ffd17 	ldw	r4,-12(fp)
 1004fbc:	10052a00 	call	10052a0 <alt_find_dev>
 1004fc0:	e0bff815 	stw	r2,-32(fp)
 1004fc4:	e0bff817 	ldw	r2,-32(fp)
 1004fc8:	1000051e 	bne	r2,zero,1004fe0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 1004fcc:	e13ffd17 	ldw	r4,-12(fp)
 1004fd0:	10053300 	call	1005330 <alt_find_file>
 1004fd4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 1004fd8:	00800044 	movi	r2,1
 1004fdc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 1004fe0:	e0bff817 	ldw	r2,-32(fp)
 1004fe4:	10002926 	beq	r2,zero,100508c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 1004fe8:	e13ff817 	ldw	r4,-32(fp)
 1004fec:	10054380 	call	1005438 <alt_get_fd>
 1004ff0:	e0bff915 	stw	r2,-28(fp)
 1004ff4:	e0bff917 	ldw	r2,-28(fp)
 1004ff8:	1000030e 	bge	r2,zero,1005008 <open+0x84>
    {
      status = index;
 1004ffc:	e0bff917 	ldw	r2,-28(fp)
 1005000:	e0bffa15 	stw	r2,-24(fp)
 1005004:	00002306 	br	1005094 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 1005008:	e0bff917 	ldw	r2,-28(fp)
 100500c:	10c00324 	muli	r3,r2,12
 1005010:	00804034 	movhi	r2,256
 1005014:	10986804 	addi	r2,r2,24992
 1005018:	1885883a 	add	r2,r3,r2
 100501c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 1005020:	e0fffe17 	ldw	r3,-8(fp)
 1005024:	00900034 	movhi	r2,16384
 1005028:	10bfffc4 	addi	r2,r2,-1
 100502c:	1886703a 	and	r3,r3,r2
 1005030:	e0bffc17 	ldw	r2,-16(fp)
 1005034:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 1005038:	e0bffb17 	ldw	r2,-20(fp)
 100503c:	1000051e 	bne	r2,zero,1005054 <open+0xd0>
 1005040:	e13ffc17 	ldw	r4,-16(fp)
 1005044:	1004ec00 	call	1004ec0 <alt_file_locked>
 1005048:	e0bffa15 	stw	r2,-24(fp)
 100504c:	e0bffa17 	ldw	r2,-24(fp)
 1005050:	10001016 	blt	r2,zero,1005094 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 1005054:	e0bff817 	ldw	r2,-32(fp)
 1005058:	10800317 	ldw	r2,12(r2)
 100505c:	10000826 	beq	r2,zero,1005080 <open+0xfc>
 1005060:	e0bff817 	ldw	r2,-32(fp)
 1005064:	10800317 	ldw	r2,12(r2)
 1005068:	e1ffff17 	ldw	r7,-4(fp)
 100506c:	e1bffe17 	ldw	r6,-8(fp)
 1005070:	e17ffd17 	ldw	r5,-12(fp)
 1005074:	e13ffc17 	ldw	r4,-16(fp)
 1005078:	103ee83a 	callr	r2
 100507c:	00000106 	br	1005084 <open+0x100>
 1005080:	0005883a 	mov	r2,zero
 1005084:	e0bffa15 	stw	r2,-24(fp)
 1005088:	00000206 	br	1005094 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 100508c:	00bffb44 	movi	r2,-19
 1005090:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 1005094:	e0bffa17 	ldw	r2,-24(fp)
 1005098:	1000090e 	bge	r2,zero,10050c0 <open+0x13c>
  {
    alt_release_fd (index);  
 100509c:	e13ff917 	ldw	r4,-28(fp)
 10050a0:	1003aec0 	call	1003aec <alt_release_fd>
    ALT_ERRNO = -status;
 10050a4:	1004e840 	call	1004e84 <alt_get_errno>
 10050a8:	1007883a 	mov	r3,r2
 10050ac:	e0bffa17 	ldw	r2,-24(fp)
 10050b0:	0085c83a 	sub	r2,zero,r2
 10050b4:	18800015 	stw	r2,0(r3)
    return -1;
 10050b8:	00bfffc4 	movi	r2,-1
 10050bc:	00000106 	br	10050c4 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 10050c0:	e0bff917 	ldw	r2,-28(fp)
}
 10050c4:	e037883a 	mov	sp,fp
 10050c8:	dfc00117 	ldw	ra,4(sp)
 10050cc:	df000017 	ldw	fp,0(sp)
 10050d0:	dec00204 	addi	sp,sp,8
 10050d4:	f800283a 	ret

010050d8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 10050d8:	defffa04 	addi	sp,sp,-24
 10050dc:	df000515 	stw	fp,20(sp)
 10050e0:	df000504 	addi	fp,sp,20
 10050e4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10050e8:	0005303a 	rdctl	r2,status
 10050ec:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10050f0:	e0fffc17 	ldw	r3,-16(fp)
 10050f4:	00bfff84 	movi	r2,-2
 10050f8:	1884703a 	and	r2,r3,r2
 10050fc:	1001703a 	wrctl	status,r2
  
  return context;
 1005100:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 1005104:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 1005108:	e0bfff17 	ldw	r2,-4(fp)
 100510c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 1005110:	e0bffd17 	ldw	r2,-12(fp)
 1005114:	10800017 	ldw	r2,0(r2)
 1005118:	e0fffd17 	ldw	r3,-12(fp)
 100511c:	18c00117 	ldw	r3,4(r3)
 1005120:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 1005124:	e0bffd17 	ldw	r2,-12(fp)
 1005128:	10800117 	ldw	r2,4(r2)
 100512c:	e0fffd17 	ldw	r3,-12(fp)
 1005130:	18c00017 	ldw	r3,0(r3)
 1005134:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 1005138:	e0bffd17 	ldw	r2,-12(fp)
 100513c:	e0fffd17 	ldw	r3,-12(fp)
 1005140:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 1005144:	e0bffd17 	ldw	r2,-12(fp)
 1005148:	e0fffd17 	ldw	r3,-12(fp)
 100514c:	10c00015 	stw	r3,0(r2)
 1005150:	e0bffb17 	ldw	r2,-20(fp)
 1005154:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1005158:	e0bffe17 	ldw	r2,-8(fp)
 100515c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 1005160:	0001883a 	nop
 1005164:	e037883a 	mov	sp,fp
 1005168:	df000017 	ldw	fp,0(sp)
 100516c:	dec00104 	addi	sp,sp,4
 1005170:	f800283a 	ret

01005174 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 1005174:	defffb04 	addi	sp,sp,-20
 1005178:	dfc00415 	stw	ra,16(sp)
 100517c:	df000315 	stw	fp,12(sp)
 1005180:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 1005184:	d0a00c17 	ldw	r2,-32720(gp)
 1005188:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 100518c:	d0a6b417 	ldw	r2,-25904(gp)
 1005190:	10800044 	addi	r2,r2,1
 1005194:	d0a6b415 	stw	r2,-25904(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1005198:	00002e06 	br	1005254 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 100519c:	e0bffd17 	ldw	r2,-12(fp)
 10051a0:	10800017 	ldw	r2,0(r2)
 10051a4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 10051a8:	e0bffd17 	ldw	r2,-12(fp)
 10051ac:	10800403 	ldbu	r2,16(r2)
 10051b0:	10803fcc 	andi	r2,r2,255
 10051b4:	10000426 	beq	r2,zero,10051c8 <alt_tick+0x54>
 10051b8:	d0a6b417 	ldw	r2,-25904(gp)
 10051bc:	1000021e 	bne	r2,zero,10051c8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 10051c0:	e0bffd17 	ldw	r2,-12(fp)
 10051c4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 10051c8:	e0bffd17 	ldw	r2,-12(fp)
 10051cc:	10800217 	ldw	r2,8(r2)
 10051d0:	d0e6b417 	ldw	r3,-25904(gp)
 10051d4:	18801d36 	bltu	r3,r2,100524c <alt_tick+0xd8>
 10051d8:	e0bffd17 	ldw	r2,-12(fp)
 10051dc:	10800403 	ldbu	r2,16(r2)
 10051e0:	10803fcc 	andi	r2,r2,255
 10051e4:	1000191e 	bne	r2,zero,100524c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 10051e8:	e0bffd17 	ldw	r2,-12(fp)
 10051ec:	10800317 	ldw	r2,12(r2)
 10051f0:	e0fffd17 	ldw	r3,-12(fp)
 10051f4:	18c00517 	ldw	r3,20(r3)
 10051f8:	1809883a 	mov	r4,r3
 10051fc:	103ee83a 	callr	r2
 1005200:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 1005204:	e0bfff17 	ldw	r2,-4(fp)
 1005208:	1000031e 	bne	r2,zero,1005218 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 100520c:	e13ffd17 	ldw	r4,-12(fp)
 1005210:	10050d80 	call	10050d8 <alt_alarm_stop>
 1005214:	00000d06 	br	100524c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 1005218:	e0bffd17 	ldw	r2,-12(fp)
 100521c:	10c00217 	ldw	r3,8(r2)
 1005220:	e0bfff17 	ldw	r2,-4(fp)
 1005224:	1887883a 	add	r3,r3,r2
 1005228:	e0bffd17 	ldw	r2,-12(fp)
 100522c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 1005230:	e0bffd17 	ldw	r2,-12(fp)
 1005234:	10c00217 	ldw	r3,8(r2)
 1005238:	d0a6b417 	ldw	r2,-25904(gp)
 100523c:	1880032e 	bgeu	r3,r2,100524c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 1005240:	e0bffd17 	ldw	r2,-12(fp)
 1005244:	00c00044 	movi	r3,1
 1005248:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 100524c:	e0bffe17 	ldw	r2,-8(fp)
 1005250:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1005254:	e0fffd17 	ldw	r3,-12(fp)
 1005258:	d0a00c04 	addi	r2,gp,-32720
 100525c:	18bfcf1e 	bne	r3,r2,100519c <__alt_data_end+0xff00519c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 1005260:	0001883a 	nop
}
 1005264:	0001883a 	nop
 1005268:	e037883a 	mov	sp,fp
 100526c:	dfc00117 	ldw	ra,4(sp)
 1005270:	df000017 	ldw	fp,0(sp)
 1005274:	dec00204 	addi	sp,sp,8
 1005278:	f800283a 	ret

0100527c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 100527c:	deffff04 	addi	sp,sp,-4
 1005280:	df000015 	stw	fp,0(sp)
 1005284:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 1005288:	000170fa 	wrctl	ienable,zero
}
 100528c:	0001883a 	nop
 1005290:	e037883a 	mov	sp,fp
 1005294:	df000017 	ldw	fp,0(sp)
 1005298:	dec00104 	addi	sp,sp,4
 100529c:	f800283a 	ret

010052a0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 10052a0:	defffa04 	addi	sp,sp,-24
 10052a4:	dfc00515 	stw	ra,20(sp)
 10052a8:	df000415 	stw	fp,16(sp)
 10052ac:	df000404 	addi	fp,sp,16
 10052b0:	e13ffe15 	stw	r4,-8(fp)
 10052b4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 10052b8:	e0bfff17 	ldw	r2,-4(fp)
 10052bc:	10800017 	ldw	r2,0(r2)
 10052c0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 10052c4:	e13ffe17 	ldw	r4,-8(fp)
 10052c8:	100045c0 	call	100045c <strlen>
 10052cc:	10800044 	addi	r2,r2,1
 10052d0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 10052d4:	00000d06 	br	100530c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 10052d8:	e0bffc17 	ldw	r2,-16(fp)
 10052dc:	10800217 	ldw	r2,8(r2)
 10052e0:	e0fffd17 	ldw	r3,-12(fp)
 10052e4:	180d883a 	mov	r6,r3
 10052e8:	e17ffe17 	ldw	r5,-8(fp)
 10052ec:	1009883a 	mov	r4,r2
 10052f0:	10055b80 	call	10055b8 <memcmp>
 10052f4:	1000021e 	bne	r2,zero,1005300 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 10052f8:	e0bffc17 	ldw	r2,-16(fp)
 10052fc:	00000706 	br	100531c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 1005300:	e0bffc17 	ldw	r2,-16(fp)
 1005304:	10800017 	ldw	r2,0(r2)
 1005308:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 100530c:	e0fffc17 	ldw	r3,-16(fp)
 1005310:	e0bfff17 	ldw	r2,-4(fp)
 1005314:	18bff01e 	bne	r3,r2,10052d8 <__alt_data_end+0xff0052d8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 1005318:	0005883a 	mov	r2,zero
}
 100531c:	e037883a 	mov	sp,fp
 1005320:	dfc00117 	ldw	ra,4(sp)
 1005324:	df000017 	ldw	fp,0(sp)
 1005328:	dec00204 	addi	sp,sp,8
 100532c:	f800283a 	ret

01005330 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 1005330:	defffb04 	addi	sp,sp,-20
 1005334:	dfc00415 	stw	ra,16(sp)
 1005338:	df000315 	stw	fp,12(sp)
 100533c:	df000304 	addi	fp,sp,12
 1005340:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 1005344:	d0a00417 	ldw	r2,-32752(gp)
 1005348:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 100534c:	00003106 	br	1005414 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 1005350:	e0bffd17 	ldw	r2,-12(fp)
 1005354:	10800217 	ldw	r2,8(r2)
 1005358:	1009883a 	mov	r4,r2
 100535c:	100045c0 	call	100045c <strlen>
 1005360:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 1005364:	e0bffd17 	ldw	r2,-12(fp)
 1005368:	10c00217 	ldw	r3,8(r2)
 100536c:	e0bffe17 	ldw	r2,-8(fp)
 1005370:	10bfffc4 	addi	r2,r2,-1
 1005374:	1885883a 	add	r2,r3,r2
 1005378:	10800003 	ldbu	r2,0(r2)
 100537c:	10803fcc 	andi	r2,r2,255
 1005380:	1080201c 	xori	r2,r2,128
 1005384:	10bfe004 	addi	r2,r2,-128
 1005388:	10800bd8 	cmpnei	r2,r2,47
 100538c:	1000031e 	bne	r2,zero,100539c <alt_find_file+0x6c>
    {
      len -= 1;
 1005390:	e0bffe17 	ldw	r2,-8(fp)
 1005394:	10bfffc4 	addi	r2,r2,-1
 1005398:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 100539c:	e0bffe17 	ldw	r2,-8(fp)
 10053a0:	e0ffff17 	ldw	r3,-4(fp)
 10053a4:	1885883a 	add	r2,r3,r2
 10053a8:	10800003 	ldbu	r2,0(r2)
 10053ac:	10803fcc 	andi	r2,r2,255
 10053b0:	1080201c 	xori	r2,r2,128
 10053b4:	10bfe004 	addi	r2,r2,-128
 10053b8:	10800be0 	cmpeqi	r2,r2,47
 10053bc:	1000081e 	bne	r2,zero,10053e0 <alt_find_file+0xb0>
 10053c0:	e0bffe17 	ldw	r2,-8(fp)
 10053c4:	e0ffff17 	ldw	r3,-4(fp)
 10053c8:	1885883a 	add	r2,r3,r2
 10053cc:	10800003 	ldbu	r2,0(r2)
 10053d0:	10803fcc 	andi	r2,r2,255
 10053d4:	1080201c 	xori	r2,r2,128
 10053d8:	10bfe004 	addi	r2,r2,-128
 10053dc:	10000a1e 	bne	r2,zero,1005408 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 10053e0:	e0bffd17 	ldw	r2,-12(fp)
 10053e4:	10800217 	ldw	r2,8(r2)
 10053e8:	e0fffe17 	ldw	r3,-8(fp)
 10053ec:	180d883a 	mov	r6,r3
 10053f0:	e17fff17 	ldw	r5,-4(fp)
 10053f4:	1009883a 	mov	r4,r2
 10053f8:	10055b80 	call	10055b8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 10053fc:	1000021e 	bne	r2,zero,1005408 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 1005400:	e0bffd17 	ldw	r2,-12(fp)
 1005404:	00000706 	br	1005424 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 1005408:	e0bffd17 	ldw	r2,-12(fp)
 100540c:	10800017 	ldw	r2,0(r2)
 1005410:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1005414:	e0fffd17 	ldw	r3,-12(fp)
 1005418:	d0a00404 	addi	r2,gp,-32752
 100541c:	18bfcc1e 	bne	r3,r2,1005350 <__alt_data_end+0xff005350>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 1005420:	0005883a 	mov	r2,zero
}
 1005424:	e037883a 	mov	sp,fp
 1005428:	dfc00117 	ldw	ra,4(sp)
 100542c:	df000017 	ldw	fp,0(sp)
 1005430:	dec00204 	addi	sp,sp,8
 1005434:	f800283a 	ret

01005438 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 1005438:	defffc04 	addi	sp,sp,-16
 100543c:	df000315 	stw	fp,12(sp)
 1005440:	df000304 	addi	fp,sp,12
 1005444:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 1005448:	00bffa04 	movi	r2,-24
 100544c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1005450:	e03ffd15 	stw	zero,-12(fp)
 1005454:	00001906 	br	10054bc <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 1005458:	00804034 	movhi	r2,256
 100545c:	10986804 	addi	r2,r2,24992
 1005460:	e0fffd17 	ldw	r3,-12(fp)
 1005464:	18c00324 	muli	r3,r3,12
 1005468:	10c5883a 	add	r2,r2,r3
 100546c:	10800017 	ldw	r2,0(r2)
 1005470:	10000f1e 	bne	r2,zero,10054b0 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 1005474:	00804034 	movhi	r2,256
 1005478:	10986804 	addi	r2,r2,24992
 100547c:	e0fffd17 	ldw	r3,-12(fp)
 1005480:	18c00324 	muli	r3,r3,12
 1005484:	10c5883a 	add	r2,r2,r3
 1005488:	e0ffff17 	ldw	r3,-4(fp)
 100548c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 1005490:	d0e00817 	ldw	r3,-32736(gp)
 1005494:	e0bffd17 	ldw	r2,-12(fp)
 1005498:	1880020e 	bge	r3,r2,10054a4 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 100549c:	e0bffd17 	ldw	r2,-12(fp)
 10054a0:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
 10054a4:	e0bffd17 	ldw	r2,-12(fp)
 10054a8:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 10054ac:	00000606 	br	10054c8 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 10054b0:	e0bffd17 	ldw	r2,-12(fp)
 10054b4:	10800044 	addi	r2,r2,1
 10054b8:	e0bffd15 	stw	r2,-12(fp)
 10054bc:	e0bffd17 	ldw	r2,-12(fp)
 10054c0:	10800810 	cmplti	r2,r2,32
 10054c4:	103fe41e 	bne	r2,zero,1005458 <__alt_data_end+0xff005458>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 10054c8:	e0bffe17 	ldw	r2,-8(fp)
}
 10054cc:	e037883a 	mov	sp,fp
 10054d0:	df000017 	ldw	fp,0(sp)
 10054d4:	dec00104 	addi	sp,sp,4
 10054d8:	f800283a 	ret

010054dc <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 10054dc:	defffb04 	addi	sp,sp,-20
 10054e0:	df000415 	stw	fp,16(sp)
 10054e4:	df000404 	addi	fp,sp,16
 10054e8:	e13ffe15 	stw	r4,-8(fp)
 10054ec:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 10054f0:	e0bfff17 	ldw	r2,-4(fp)
 10054f4:	10840070 	cmpltui	r2,r2,4097
 10054f8:	1000021e 	bne	r2,zero,1005504 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 10054fc:	00840004 	movi	r2,4096
 1005500:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 1005504:	e0fffe17 	ldw	r3,-8(fp)
 1005508:	e0bfff17 	ldw	r2,-4(fp)
 100550c:	1885883a 	add	r2,r3,r2
 1005510:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 1005514:	e0bffe17 	ldw	r2,-8(fp)
 1005518:	e0bffc15 	stw	r2,-16(fp)
 100551c:	00000506 	br	1005534 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 1005520:	e0bffc17 	ldw	r2,-16(fp)
 1005524:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 1005528:	e0bffc17 	ldw	r2,-16(fp)
 100552c:	10800804 	addi	r2,r2,32
 1005530:	e0bffc15 	stw	r2,-16(fp)
 1005534:	e0fffc17 	ldw	r3,-16(fp)
 1005538:	e0bffd17 	ldw	r2,-12(fp)
 100553c:	18bff836 	bltu	r3,r2,1005520 <__alt_data_end+0xff005520>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 1005540:	e0bffe17 	ldw	r2,-8(fp)
 1005544:	108007cc 	andi	r2,r2,31
 1005548:	10000226 	beq	r2,zero,1005554 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 100554c:	e0bffc17 	ldw	r2,-16(fp)
 1005550:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 1005554:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 1005558:	0001883a 	nop
 100555c:	e037883a 	mov	sp,fp
 1005560:	df000017 	ldw	fp,0(sp)
 1005564:	dec00104 	addi	sp,sp,4
 1005568:	f800283a 	ret

0100556c <atexit>:
 100556c:	200b883a 	mov	r5,r4
 1005570:	000f883a 	mov	r7,zero
 1005574:	000d883a 	mov	r6,zero
 1005578:	0009883a 	mov	r4,zero
 100557c:	10056341 	jmpi	1005634 <__register_exitproc>

01005580 <exit>:
 1005580:	defffe04 	addi	sp,sp,-8
 1005584:	000b883a 	mov	r5,zero
 1005588:	dc000015 	stw	r16,0(sp)
 100558c:	dfc00115 	stw	ra,4(sp)
 1005590:	2021883a 	mov	r16,r4
 1005594:	100574c0 	call	100574c <__call_exitprocs>
 1005598:	00804034 	movhi	r2,256
 100559c:	109ce004 	addi	r2,r2,29568
 10055a0:	11000017 	ldw	r4,0(r2)
 10055a4:	20800f17 	ldw	r2,60(r4)
 10055a8:	10000126 	beq	r2,zero,10055b0 <exit+0x30>
 10055ac:	103ee83a 	callr	r2
 10055b0:	8009883a 	mov	r4,r16
 10055b4:	10058cc0 	call	10058cc <_exit>

010055b8 <memcmp>:
 10055b8:	01c000c4 	movi	r7,3
 10055bc:	3980192e 	bgeu	r7,r6,1005624 <memcmp+0x6c>
 10055c0:	2144b03a 	or	r2,r4,r5
 10055c4:	11c4703a 	and	r2,r2,r7
 10055c8:	10000f26 	beq	r2,zero,1005608 <memcmp+0x50>
 10055cc:	20800003 	ldbu	r2,0(r4)
 10055d0:	28c00003 	ldbu	r3,0(r5)
 10055d4:	10c0151e 	bne	r2,r3,100562c <memcmp+0x74>
 10055d8:	31bfff84 	addi	r6,r6,-2
 10055dc:	01ffffc4 	movi	r7,-1
 10055e0:	00000406 	br	10055f4 <memcmp+0x3c>
 10055e4:	20800003 	ldbu	r2,0(r4)
 10055e8:	28c00003 	ldbu	r3,0(r5)
 10055ec:	31bfffc4 	addi	r6,r6,-1
 10055f0:	10c00e1e 	bne	r2,r3,100562c <memcmp+0x74>
 10055f4:	21000044 	addi	r4,r4,1
 10055f8:	29400044 	addi	r5,r5,1
 10055fc:	31fff91e 	bne	r6,r7,10055e4 <__alt_data_end+0xff0055e4>
 1005600:	0005883a 	mov	r2,zero
 1005604:	f800283a 	ret
 1005608:	20c00017 	ldw	r3,0(r4)
 100560c:	28800017 	ldw	r2,0(r5)
 1005610:	18bfee1e 	bne	r3,r2,10055cc <__alt_data_end+0xff0055cc>
 1005614:	31bfff04 	addi	r6,r6,-4
 1005618:	21000104 	addi	r4,r4,4
 100561c:	29400104 	addi	r5,r5,4
 1005620:	39bff936 	bltu	r7,r6,1005608 <__alt_data_end+0xff005608>
 1005624:	303fe91e 	bne	r6,zero,10055cc <__alt_data_end+0xff0055cc>
 1005628:	003ff506 	br	1005600 <__alt_data_end+0xff005600>
 100562c:	10c5c83a 	sub	r2,r2,r3
 1005630:	f800283a 	ret

01005634 <__register_exitproc>:
 1005634:	defffa04 	addi	sp,sp,-24
 1005638:	dc000315 	stw	r16,12(sp)
 100563c:	04004034 	movhi	r16,256
 1005640:	841ce004 	addi	r16,r16,29568
 1005644:	80c00017 	ldw	r3,0(r16)
 1005648:	dc400415 	stw	r17,16(sp)
 100564c:	dfc00515 	stw	ra,20(sp)
 1005650:	18805217 	ldw	r2,328(r3)
 1005654:	2023883a 	mov	r17,r4
 1005658:	10003726 	beq	r2,zero,1005738 <__register_exitproc+0x104>
 100565c:	10c00117 	ldw	r3,4(r2)
 1005660:	010007c4 	movi	r4,31
 1005664:	20c00e16 	blt	r4,r3,10056a0 <__register_exitproc+0x6c>
 1005668:	1a000044 	addi	r8,r3,1
 100566c:	8800221e 	bne	r17,zero,10056f8 <__register_exitproc+0xc4>
 1005670:	18c00084 	addi	r3,r3,2
 1005674:	18c7883a 	add	r3,r3,r3
 1005678:	18c7883a 	add	r3,r3,r3
 100567c:	12000115 	stw	r8,4(r2)
 1005680:	10c7883a 	add	r3,r2,r3
 1005684:	19400015 	stw	r5,0(r3)
 1005688:	0005883a 	mov	r2,zero
 100568c:	dfc00517 	ldw	ra,20(sp)
 1005690:	dc400417 	ldw	r17,16(sp)
 1005694:	dc000317 	ldw	r16,12(sp)
 1005698:	dec00604 	addi	sp,sp,24
 100569c:	f800283a 	ret
 10056a0:	00800034 	movhi	r2,0
 10056a4:	10800004 	addi	r2,r2,0
 10056a8:	10002626 	beq	r2,zero,1005744 <__register_exitproc+0x110>
 10056ac:	01006404 	movi	r4,400
 10056b0:	d9400015 	stw	r5,0(sp)
 10056b4:	d9800115 	stw	r6,4(sp)
 10056b8:	d9c00215 	stw	r7,8(sp)
 10056bc:	00000000 	call	0 <__alt_mem_SDRAM_controller-0x1000000>
 10056c0:	d9400017 	ldw	r5,0(sp)
 10056c4:	d9800117 	ldw	r6,4(sp)
 10056c8:	d9c00217 	ldw	r7,8(sp)
 10056cc:	10001d26 	beq	r2,zero,1005744 <__register_exitproc+0x110>
 10056d0:	81000017 	ldw	r4,0(r16)
 10056d4:	10000115 	stw	zero,4(r2)
 10056d8:	02000044 	movi	r8,1
 10056dc:	22405217 	ldw	r9,328(r4)
 10056e0:	0007883a 	mov	r3,zero
 10056e4:	12400015 	stw	r9,0(r2)
 10056e8:	20805215 	stw	r2,328(r4)
 10056ec:	10006215 	stw	zero,392(r2)
 10056f0:	10006315 	stw	zero,396(r2)
 10056f4:	883fde26 	beq	r17,zero,1005670 <__alt_data_end+0xff005670>
 10056f8:	18c9883a 	add	r4,r3,r3
 10056fc:	2109883a 	add	r4,r4,r4
 1005700:	1109883a 	add	r4,r2,r4
 1005704:	21802215 	stw	r6,136(r4)
 1005708:	01800044 	movi	r6,1
 100570c:	12406217 	ldw	r9,392(r2)
 1005710:	30cc983a 	sll	r6,r6,r3
 1005714:	4992b03a 	or	r9,r9,r6
 1005718:	12406215 	stw	r9,392(r2)
 100571c:	21c04215 	stw	r7,264(r4)
 1005720:	01000084 	movi	r4,2
 1005724:	893fd21e 	bne	r17,r4,1005670 <__alt_data_end+0xff005670>
 1005728:	11006317 	ldw	r4,396(r2)
 100572c:	218cb03a 	or	r6,r4,r6
 1005730:	11806315 	stw	r6,396(r2)
 1005734:	003fce06 	br	1005670 <__alt_data_end+0xff005670>
 1005738:	18805304 	addi	r2,r3,332
 100573c:	18805215 	stw	r2,328(r3)
 1005740:	003fc606 	br	100565c <__alt_data_end+0xff00565c>
 1005744:	00bfffc4 	movi	r2,-1
 1005748:	003fd006 	br	100568c <__alt_data_end+0xff00568c>

0100574c <__call_exitprocs>:
 100574c:	defff504 	addi	sp,sp,-44
 1005750:	df000915 	stw	fp,36(sp)
 1005754:	dd400615 	stw	r21,24(sp)
 1005758:	dc800315 	stw	r18,12(sp)
 100575c:	dfc00a15 	stw	ra,40(sp)
 1005760:	ddc00815 	stw	r23,32(sp)
 1005764:	dd800715 	stw	r22,28(sp)
 1005768:	dd000515 	stw	r20,20(sp)
 100576c:	dcc00415 	stw	r19,16(sp)
 1005770:	dc400215 	stw	r17,8(sp)
 1005774:	dc000115 	stw	r16,4(sp)
 1005778:	d9000015 	stw	r4,0(sp)
 100577c:	2839883a 	mov	fp,r5
 1005780:	04800044 	movi	r18,1
 1005784:	057fffc4 	movi	r21,-1
 1005788:	00804034 	movhi	r2,256
 100578c:	109ce004 	addi	r2,r2,29568
 1005790:	12000017 	ldw	r8,0(r2)
 1005794:	45005217 	ldw	r20,328(r8)
 1005798:	44c05204 	addi	r19,r8,328
 100579c:	a0001c26 	beq	r20,zero,1005810 <__call_exitprocs+0xc4>
 10057a0:	a0800117 	ldw	r2,4(r20)
 10057a4:	15ffffc4 	addi	r23,r2,-1
 10057a8:	b8000d16 	blt	r23,zero,10057e0 <__call_exitprocs+0x94>
 10057ac:	14000044 	addi	r16,r2,1
 10057b0:	8421883a 	add	r16,r16,r16
 10057b4:	8421883a 	add	r16,r16,r16
 10057b8:	84402004 	addi	r17,r16,128
 10057bc:	a463883a 	add	r17,r20,r17
 10057c0:	a421883a 	add	r16,r20,r16
 10057c4:	e0001e26 	beq	fp,zero,1005840 <__call_exitprocs+0xf4>
 10057c8:	80804017 	ldw	r2,256(r16)
 10057cc:	e0801c26 	beq	fp,r2,1005840 <__call_exitprocs+0xf4>
 10057d0:	bdffffc4 	addi	r23,r23,-1
 10057d4:	843fff04 	addi	r16,r16,-4
 10057d8:	8c7fff04 	addi	r17,r17,-4
 10057dc:	bd7ff91e 	bne	r23,r21,10057c4 <__alt_data_end+0xff0057c4>
 10057e0:	00800034 	movhi	r2,0
 10057e4:	10800004 	addi	r2,r2,0
 10057e8:	10000926 	beq	r2,zero,1005810 <__call_exitprocs+0xc4>
 10057ec:	a0800117 	ldw	r2,4(r20)
 10057f0:	1000301e 	bne	r2,zero,10058b4 <__call_exitprocs+0x168>
 10057f4:	a0800017 	ldw	r2,0(r20)
 10057f8:	10003226 	beq	r2,zero,10058c4 <__call_exitprocs+0x178>
 10057fc:	a009883a 	mov	r4,r20
 1005800:	98800015 	stw	r2,0(r19)
 1005804:	00000000 	call	0 <__alt_mem_SDRAM_controller-0x1000000>
 1005808:	9d000017 	ldw	r20,0(r19)
 100580c:	a03fe41e 	bne	r20,zero,10057a0 <__alt_data_end+0xff0057a0>
 1005810:	dfc00a17 	ldw	ra,40(sp)
 1005814:	df000917 	ldw	fp,36(sp)
 1005818:	ddc00817 	ldw	r23,32(sp)
 100581c:	dd800717 	ldw	r22,28(sp)
 1005820:	dd400617 	ldw	r21,24(sp)
 1005824:	dd000517 	ldw	r20,20(sp)
 1005828:	dcc00417 	ldw	r19,16(sp)
 100582c:	dc800317 	ldw	r18,12(sp)
 1005830:	dc400217 	ldw	r17,8(sp)
 1005834:	dc000117 	ldw	r16,4(sp)
 1005838:	dec00b04 	addi	sp,sp,44
 100583c:	f800283a 	ret
 1005840:	a0800117 	ldw	r2,4(r20)
 1005844:	80c00017 	ldw	r3,0(r16)
 1005848:	10bfffc4 	addi	r2,r2,-1
 100584c:	15c01426 	beq	r2,r23,10058a0 <__call_exitprocs+0x154>
 1005850:	80000015 	stw	zero,0(r16)
 1005854:	183fde26 	beq	r3,zero,10057d0 <__alt_data_end+0xff0057d0>
 1005858:	95c8983a 	sll	r4,r18,r23
 100585c:	a0806217 	ldw	r2,392(r20)
 1005860:	a5800117 	ldw	r22,4(r20)
 1005864:	2084703a 	and	r2,r4,r2
 1005868:	10000b26 	beq	r2,zero,1005898 <__call_exitprocs+0x14c>
 100586c:	a0806317 	ldw	r2,396(r20)
 1005870:	2088703a 	and	r4,r4,r2
 1005874:	20000c1e 	bne	r4,zero,10058a8 <__call_exitprocs+0x15c>
 1005878:	89400017 	ldw	r5,0(r17)
 100587c:	d9000017 	ldw	r4,0(sp)
 1005880:	183ee83a 	callr	r3
 1005884:	a0800117 	ldw	r2,4(r20)
 1005888:	15bfbf1e 	bne	r2,r22,1005788 <__alt_data_end+0xff005788>
 100588c:	98800017 	ldw	r2,0(r19)
 1005890:	153fcf26 	beq	r2,r20,10057d0 <__alt_data_end+0xff0057d0>
 1005894:	003fbc06 	br	1005788 <__alt_data_end+0xff005788>
 1005898:	183ee83a 	callr	r3
 100589c:	003ff906 	br	1005884 <__alt_data_end+0xff005884>
 10058a0:	a5c00115 	stw	r23,4(r20)
 10058a4:	003feb06 	br	1005854 <__alt_data_end+0xff005854>
 10058a8:	89000017 	ldw	r4,0(r17)
 10058ac:	183ee83a 	callr	r3
 10058b0:	003ff406 	br	1005884 <__alt_data_end+0xff005884>
 10058b4:	a0800017 	ldw	r2,0(r20)
 10058b8:	a027883a 	mov	r19,r20
 10058bc:	1029883a 	mov	r20,r2
 10058c0:	003fb606 	br	100579c <__alt_data_end+0xff00579c>
 10058c4:	0005883a 	mov	r2,zero
 10058c8:	003ffb06 	br	10058b8 <__alt_data_end+0xff0058b8>

010058cc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 10058cc:	defffd04 	addi	sp,sp,-12
 10058d0:	df000215 	stw	fp,8(sp)
 10058d4:	df000204 	addi	fp,sp,8
 10058d8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 10058dc:	0001883a 	nop
 10058e0:	e0bfff17 	ldw	r2,-4(fp)
 10058e4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 10058e8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 10058ec:	10000226 	beq	r2,zero,10058f8 <_exit+0x2c>
    ALT_SIM_FAIL();
 10058f0:	002af070 	cmpltui	zero,zero,43969
 10058f4:	00000106 	br	10058fc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 10058f8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 10058fc:	003fff06 	br	10058fc <__alt_data_end+0xff0058fc>
